
MP2403_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009900  08009900  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009900  08009900  00019900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009908  08009908  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ec4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f38  20004f38  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027bec  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b6f  00000000  00000000  00047c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0004c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001438  00000000  00000000  0004de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024400  00000000  00000000  0004f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bace  00000000  00000000  00073648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d68  00000000  00000000  0008f116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00166e7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d80  00000000  00000000  00166ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009720 	.word	0x08009720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009720 	.word	0x08009720

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <InterputDataCanProt>:

#include "CanProt.h"


void InterputDataCanProt(uint32_t RxIdHeader, uint8_t *RxDataBuff,struct InsideData *DevData)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	DevData->CanError = DisableSw;
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7993      	ldrb	r3, [r2, #6]
 80004d8:	f36f 1304 	bfc	r3, #4, #1
 80004dc:	7193      	strb	r3, [r2, #6]
	switch(RxIdHeader){
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80004e4:	d114      	bne.n	8000510 <InterputDataCanProt+0x48>
	case CAN_PROT_ID:
		DevData->CanEnableLoad = RxDataBuff[7];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	79da      	ldrb	r2, [r3, #7]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	705a      	strb	r2, [r3, #1]
		if(RxDataBuff[7]==3){
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	3307      	adds	r3, #7
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d105      	bne.n	8000504 <InterputDataCanProt+0x3c>
			DevData->CanSwitchOn = 1;
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7f13      	ldrb	r3, [r2, #28]
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	7713      	strb	r3, [r2, #28]
		}
		else
			DevData->CanSwitchOn = 0;
		break;
 8000502:	e004      	b.n	800050e <InterputDataCanProt+0x46>
			DevData->CanSwitchOn = 0;
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7f13      	ldrb	r3, [r2, #28]
 8000508:	f36f 0341 	bfc	r3, #1, #1
 800050c:	7713      	strb	r3, [r2, #28]
		break;
 800050e:	bf00      	nop
	}

}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <ConvertDataTOProt>:
void ConvertDataTOProt(uint32_t RxIdHeader, uint8_t *RxDataBuff,struct InsideData *DevData)
{
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	uint8_t Data;
	switch(RxIdHeader){
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800052e:	d173      	bne.n	8000618 <ConvertDataTOProt+0xfc>
		case CAN_PROT_TD_TO_PROG:
			Data = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	75fb      	strb	r3, [r7, #23]
			if(DevData->ModeChannelA == BreakChannel) Data |= (1<<6);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	2b04      	cmp	r3, #4
 800053a:	d103      	bne.n	8000544 <ConvertDataTOProt+0x28>
 800053c:	7dfb      	ldrb	r3, [r7, #23]
 800053e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000542:	75fb      	strb	r3, [r7, #23]
			else Data |= (0<<6);
			if(DevData->ModeChannelB == BreakChannel) Data |= (1<<7);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	2b04      	cmp	r3, #4
 800054a:	d104      	bne.n	8000556 <ConvertDataTOProt+0x3a>
 800054c:	7dfb      	ldrb	r3, [r7, #23]
 800054e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000552:	75fb      	strb	r3, [r7, #23]
 8000554:	e001      	b.n	800055a <ConvertDataTOProt+0x3e>
			else Data = (0<<7);
 8000556:	2300      	movs	r3, #0
 8000558:	75fb      	strb	r3, [r7, #23]
			if(DevData->ModeChannelA == OverCurrent) Data |= (1<<0);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d103      	bne.n	800056a <ConvertDataTOProt+0x4e>
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	75fb      	strb	r3, [r7, #23]
			else Data |= (0<<0);
			if(DevData->ModeChannelB == OverCurrent) Data |= (1<<1);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d103      	bne.n	800057a <ConvertDataTOProt+0x5e>
 8000572:	7dfb      	ldrb	r3, [r7, #23]
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	75fb      	strb	r3, [r7, #23]
			else Data |= (0<<1);
			RxDataBuff[0] = Data;
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	7dfa      	ldrb	r2, [r7, #23]
 800057e:	701a      	strb	r2, [r3, #0]
			Data = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
			if((DevData->ModeChannelA == OffChannel)||(DevData->ModeChannelA == OnChannel)) Data |= (1<<0);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <ConvertDataTOProt+0x78>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d103      	bne.n	800059c <ConvertDataTOProt+0x80>
 8000594:	7dfb      	ldrb	r3, [r7, #23]
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	75fb      	strb	r3, [r7, #23]
			else Data |= (0<<0);
			if(DevData->ModeChannelB == OffChannel||(DevData->ModeChannelB == OnChannel)) Data |= (1<<1);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d003      	beq.n	80005ac <ConvertDataTOProt+0x90>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d103      	bne.n	80005b4 <ConvertDataTOProt+0x98>
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	75fb      	strb	r3, [r7, #23]
			else Data |= (0<<1);
			if(DevData->VoltageChASred > MIN_OUT_VOLTAGE) Data |= (1<<2);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80005b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80005bc:	4293      	cmp	r3, r2
 80005be:	d903      	bls.n	80005c8 <ConvertDataTOProt+0xac>
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	f043 0304 	orr.w	r3, r3, #4
 80005c6:	75fb      	strb	r3, [r7, #23]
			else Data |= (0<<2);
			if(DevData->VoltageChBSred > MIN_OUT_VOLTAGE) Data |= (1<<3);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d903      	bls.n	80005de <ConvertDataTOProt+0xc2>
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	75fb      	strb	r3, [r7, #23]
			else Data |= (0<<3);

			RxDataBuff[1] = Data;
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	3301      	adds	r3, #1
 80005e2:	7dfa      	ldrb	r2, [r7, #23]
 80005e4:	701a      	strb	r2, [r3, #0]
			RxDataBuff[2] = 0x00;
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	3302      	adds	r3, #2
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
			RxDataBuff[3] = 0x00;
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3303      	adds	r3, #3
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
			RxDataBuff[4] = 0x00;
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	3304      	adds	r3, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
			RxDataBuff[5] = 0x00;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	3305      	adds	r3, #5
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
			RxDataBuff[6] = 0x65;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	3306      	adds	r3, #6
 800060a:	2265      	movs	r2, #101	; 0x65
 800060c:	701a      	strb	r2, [r3, #0]
			RxDataBuff[7] = 0x00;
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	3307      	adds	r3, #7
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]

			break;
 8000616:	bf00      	nop
		}
}
 8000618:	bf00      	nop
 800061a:	371c      	adds	r7, #28
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <CanSendStdMessage>:
void CanSendStdMessage(uint32_t RxIdHeader,uint8_t *TxDataBuff)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = RxIdHeader;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	60bb      	str	r3, [r7, #8]
	TxHeader.DLC = 8;
 8000632:	2308      	movs	r3, #8
 8000634:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2))
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <CanSendStdMessage+0x3c>)
 8000640:	f002 fd89 	bl	8003156 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <CanSendStdMessage+0x34>
	{
		if(HAL_CAN_AddTxMessage(&hcan2,&TxHeader,TxDataBuff,0) !=HAL_OK)
 800064a:	f107 0108 	add.w	r1, r7, #8
 800064e:	2300      	movs	r3, #0
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <CanSendStdMessage+0x3c>)
 8000654:	f002 fca4 	bl	8002fa0 <HAL_CAN_AddTxMessage>
		{
		}
	}
}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20004c8c 	.word	0x20004c8c

08000664 <GetInfo>:
 *      Author: kto23
 */

#include "ModeDes.h"

void GetInfo (struct InsideData *DevData){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	//считывание кода места
	if(HAL_GPIO_ReadPin(C1_1_GPIO_Port, C1_1_Pin)==GPIO_PIN_SET){
 800066c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <GetInfo+0x6c>)
 8000672:	f003 ff6b 	bl	800454c <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d106      	bne.n	800068a <GetInfo+0x26>
		DevData->CodMesta |= 0x01;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	789b      	ldrb	r3, [r3, #2]
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	709a      	strb	r2, [r3, #2]
	}
	if(HAL_GPIO_ReadPin(C1_2_GPIO_Port, C1_2_Pin)==GPIO_PIN_SET){
 800068a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <GetInfo+0x6c>)
 8000690:	f003 ff5c 	bl	800454c <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d106      	bne.n	80006a8 <GetInfo+0x44>
		DevData->CodMesta |= 0x02;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	f043 0302 	orr.w	r3, r3, #2
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	709a      	strb	r2, [r3, #2]
	}
	if(HAL_GPIO_ReadPin(C1_3_GPIO_Port, C1_3_Pin)==GPIO_PIN_SET){
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <GetInfo+0x6c>)
 80006ae:	f003 ff4d 	bl	800454c <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d106      	bne.n	80006c6 <GetInfo+0x62>
		DevData->CodMesta |= 0x04;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	789b      	ldrb	r3, [r3, #2]
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	709a      	strb	r2, [r3, #2]
	}
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020800 	.word	0x40020800

080006d4 <InterputDataFromAdc>:

void InterputDataFromAdc(struct InsideData *DevData, uint16_t *ADCBuff)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	if(ADCBuff[0] < MIN_ADC_CUR_VAL) ADCBuff[0] = MIN_ADC_CUR_VAL;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80006e6:	d203      	bcs.n	80006f0 <InterputDataFromAdc+0x1c>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80006ee:	801a      	strh	r2, [r3, #0]
	if(ADCBuff[1] < MIN_ADC_CUR_VAL) ADCBuff[1] = MIN_ADC_CUR_VAL;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	3302      	adds	r3, #2
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80006fa:	d204      	bcs.n	8000706 <InterputDataFromAdc+0x32>
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	3302      	adds	r3, #2
 8000700:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000704:	801a      	strh	r2, [r3, #0]

	DevData->ADCCurrentChA = ADCBuff[0]-MIN_ADC_CUR_VAL;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	609a      	str	r2, [r3, #8]
	DevData->ADCCurrentChB = ADCBuff[1]-MIN_ADC_CUR_VAL;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	3302      	adds	r3, #2
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800071e:	461a      	mov	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60da      	str	r2, [r3, #12]

	//DevData->CurrentChA =  (DevData->ADCCurrentChA*1000) / 31;
	//DevData->CurrentChB =  (DevData->ADCCurrentChB*1000)/31;

	DevData->CurrentChA =  (abs(ADCBuff[0]-MIN_ADC_CUR_VAL)*1000)/31;
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bfb8      	it	lt
 8000730:	425b      	neglt	r3, r3
 8000732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	4a24      	ldr	r2, [pc, #144]	; (80007cc <InterputDataFromAdc+0xf8>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	441a      	add	r2, r3
 8000742:	1112      	asrs	r2, r2, #4
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
	DevData->CurrentChB =  (abs(ADCBuff[1]-MIN_ADC_CUR_VAL)*1000)/31;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3302      	adds	r3, #2
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8000758:	2b00      	cmp	r3, #0
 800075a:	bfb8      	it	lt
 800075c:	425b      	neglt	r3, r3
 800075e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000762:	fb02 f303 	mul.w	r3, r2, r3
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <InterputDataFromAdc+0xf8>)
 8000768:	fb82 1203 	smull	r1, r2, r2, r3
 800076c:	441a      	add	r2, r3
 800076e:	1112      	asrs	r2, r2, #4
 8000770:	17db      	asrs	r3, r3, #31
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	461a      	mov	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	645a      	str	r2, [r3, #68]	; 0x44

	DevData->VoltageChA = (ADCBuff[2] * 1000)/104;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3304      	adds	r3, #4
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	fb03 f302 	mul.w	r3, r3, r2
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <InterputDataFromAdc+0xfc>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	1152      	asrs	r2, r2, #5
 8000792:	17db      	asrs	r3, r3, #31
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	461a      	mov	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	661a      	str	r2, [r3, #96]	; 0x60
	DevData->VoltageChB = (ADCBuff[3] * 1000)/104;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	3306      	adds	r3, #6
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	fb03 f302 	mul.w	r3, r3, r2
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <InterputDataFromAdc+0xfc>)
 80007ae:	fb82 1203 	smull	r1, r2, r2, r3
 80007b2:	1152      	asrs	r2, r2, #5
 80007b4:	17db      	asrs	r3, r3, #31
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	67da      	str	r2, [r3, #124]	; 0x7c
	/*if(DevData->CurrentChA > 4000)
	{
		osDelay(1);
	}*/
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	84210843 	.word	0x84210843
 80007d0:	4ec4ec4f 	.word	0x4ec4ec4f

080007d4 <AverDataFromAdc>:

void AverDataFromAdc(struct InsideData *DevData)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	 for(int i = 10; i >= 1; i--)
 80007dc:	230a      	movs	r3, #10
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e031      	b.n	8000846 <AverDataFromAdc+0x72>
			  {
				  //
				  DevData->CurrentChABuff[i] = DevData->CurrentChABuff[i-1];
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3214      	adds	r2, #20
 80007ea:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	3214      	adds	r2, #20
 80007f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  DevData->CurrentChBBuff[i] = DevData->CurrentChBBuff[i-1];
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3224      	adds	r2, #36	; 0x24
 8000800:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	3224      	adds	r2, #36	; 0x24
 800080a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  //
				  DevData->VoltageChABuff[i] = DevData->VoltageChABuff[i-1];
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3b01      	subs	r3, #1
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	3330      	adds	r3, #48	; 0x30
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	8899      	ldrh	r1, [r3, #4]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3330      	adds	r3, #48	; 0x30
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	460a      	mov	r2, r1
 8000828:	809a      	strh	r2, [r3, #4]
				  DevData->VoltageChBBuff[i] = DevData->VoltageChBBuff[i-1];
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3240      	adds	r2, #64	; 0x40
 8000832:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	3240      	adds	r2, #64	; 0x40
 800083c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	 for(int i = 10; i >= 1; i--)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3b01      	subs	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	dcca      	bgt.n	80007e2 <AverDataFromAdc+0xe>
			  }
	 	 	 if(DevData->CurrentChAOld)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00e      	beq.n	8000872 <AverDataFromAdc+0x9e>
	 		 {
	 			if((DevData->CurrentChA - DevData->CurrentChAOld) < ITERATION_ADC)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a1b      	ldr	r3, [r3, #32]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b63      	cmp	r3, #99	; 0x63
 8000860:	d804      	bhi.n	800086c <AverDataFromAdc+0x98>
	 			{
	 				DevData->CurrentChABuff[0] = DevData->CurrentChA;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	b29a      	uxth	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	851a      	strh	r2, [r3, #40]	; 0x28
	 			}
	 			DevData->CurrentChAOld = 0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
	 		 }
	 	 	if(DevData->CurrentChBOld)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00f      	beq.n	800089a <AverDataFromAdc+0xc6>
	 	 	{
	 	 		if((DevData->CurrentChB - DevData->CurrentChBOld) < ITERATION_ADC)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	2b63      	cmp	r3, #99	; 0x63
 8000886:	d805      	bhi.n	8000894 <AverDataFromAdc+0xc0>
	 	 		{
	 	 		 	DevData->CurrentChBBuff[0] = DevData->CurrentChB;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088c:	b29a      	uxth	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	 	 		}
	 	 		DevData->CurrentChBOld = 0;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
	 	 	}
	 	 	 if(abs( DevData->CurrentChA - DevData->CurrentChABuff[1]) < ITERATION_ADC)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80008a2:	1a9b      	subs	r3, r3, r2
 80008a4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80008a8:	db0f      	blt.n	80008ca <AverDataFromAdc+0xf6>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80008b2:	1a9b      	subs	r3, r3, r2
 80008b4:	2b63      	cmp	r3, #99	; 0x63
 80008b6:	dc08      	bgt.n	80008ca <AverDataFromAdc+0xf6>
	 	 	 {
	 	 		DevData->CurrentChABuff[0] = DevData->CurrentChA;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	851a      	strh	r2, [r3, #40]	; 0x28
	 	 		osDelay(20);
 80008c2:	2014      	movs	r0, #20
 80008c4:	f006 f98e 	bl	8006be4 <osDelay>
 80008c8:	e006      	b.n	80008d8 <AverDataFromAdc+0x104>
	 	 	 }
	 	 	 else
	 	 	 {
	 	 		DevData->CurrentChAOld = DevData->CurrentChA;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	621a      	str	r2, [r3, #32]
	 	 		osDelay(20);
 80008d2:	2014      	movs	r0, #20
 80008d4:	f006 f986 	bl	8006be4 <osDelay>
	 	 	 }
	 	 	if(abs( DevData->CurrentChB - DevData->CurrentChBBuff[1]) < ITERATION_ADC)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 80008e2:	1a9b      	subs	r3, r3, r2
 80008e4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80008e8:	db11      	blt.n	800090e <AverDataFromAdc+0x13a>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 80008f4:	1a9b      	subs	r3, r3, r2
 80008f6:	2b63      	cmp	r3, #99	; 0x63
 80008f8:	dc09      	bgt.n	800090e <AverDataFromAdc+0x13a>
	 	 	{
	 	 		DevData->CurrentChBBuff[0] = DevData->CurrentChB;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	b29a      	uxth	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	 	 		osDelay(20);
 8000906:	2014      	movs	r0, #20
 8000908:	f006 f96c 	bl	8006be4 <osDelay>
 800090c:	e006      	b.n	800091c <AverDataFromAdc+0x148>
	 	 	}
	 	 	else
	 	 	{
	 	 		DevData->CurrentChBOld = DevData->CurrentChB;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	641a      	str	r2, [r3, #64]	; 0x40
	 	 		osDelay(20);
 8000916:	2014      	movs	r0, #20
 8000918:	f006 f964 	bl	8006be4 <osDelay>
	 	 	}


			  DevData->VoltageChABuff[0] = DevData->VoltageChA;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000920:	b29a      	uxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			  DevData->VoltageChBBuff[0] = DevData->VoltageChB;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800092c:	b29a      	uxth	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

			  DevData->CurrentChASred = 0;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	879a      	strh	r2, [r3, #60]	; 0x3c
			  DevData->CurrentChBSred = 0;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			  DevData->VoltageChASred = 0;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	679a      	str	r2, [r3, #120]	; 0x78
			  DevData->VoltageChBSred = 0;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

			  for(int i = 0; i<10; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	e031      	b.n	80009ba <AverDataFromAdc+0x1e6>
			  {
				  DevData->CurrentChASred += DevData->CurrentChABuff[i];
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	3114      	adds	r1, #20
 8000960:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000964:	4413      	add	r3, r2
 8000966:	b29a      	uxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	879a      	strh	r2, [r3, #60]	; 0x3c
				  DevData->CurrentChBSred += DevData->CurrentChBBuff[i];
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	3124      	adds	r1, #36	; 0x24
 8000978:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800097c:	4413      	add	r3, r2
 800097e:	b29a      	uxth	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

				  DevData->VoltageChASred += DevData->VoltageChABuff[i];
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3330      	adds	r3, #48	; 0x30
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	440b      	add	r3, r1
 8000994:	889b      	ldrh	r3, [r3, #4]
 8000996:	441a      	add	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	679a      	str	r2, [r3, #120]	; 0x78
				  DevData->VoltageChBSred += DevData->VoltageChBBuff[i];
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	3140      	adds	r1, #64	; 0x40
 80009a8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80009ac:	441a      	add	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			  for(int i = 0; i<10; i++)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	3301      	adds	r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2b09      	cmp	r3, #9
 80009be:	ddca      	ble.n	8000956 <AverDataFromAdc+0x182>
			  }
			  	  DevData->CurrentChASred /=10;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <AverDataFromAdc+0x240>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	879a      	strh	r2, [r3, #60]	; 0x3c
			  	  DevData->CurrentChBSred /=10;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <AverDataFromAdc+0x240>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			  	  DevData->VoltageChASred /= 10;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <AverDataFromAdc+0x240>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	08da      	lsrs	r2, r3, #3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	679a      	str	r2, [r3, #120]	; 0x78
			  	  DevData->VoltageChBSred /= 10;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <AverDataFromAdc+0x240>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	cccccccd 	.word	0xcccccccd

08000a18 <ChangeModes>:

void ChangeModes(struct InsideData *DevData)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if((DevData->ButtonSwitchOn!=DevData->ButtonSwitchOnOldVal)||(DevData->CanSwitchOn!=DevData->CanSwitchOnOldVal))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7f1b      	ldrb	r3, [r3, #28]
 8000a24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7f1b      	ldrb	r3, [r3, #28]
 8000a2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d10b      	bne.n	8000a50 <ChangeModes+0x38>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7f1b      	ldrb	r3, [r3, #28]
 8000a3c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7f1b      	ldrb	r3, [r3, #28]
 8000a46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d042      	beq.n	8000ad6 <ChangeModes+0xbe>
	{
		DevData->ButtonSwitchOnOldVal = DevData->ButtonSwitchOn;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7f1b      	ldrb	r3, [r3, #28]
 8000a54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a58:	b2d9      	uxtb	r1, r3
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	7f13      	ldrb	r3, [r2, #28]
 8000a5e:	f361 0382 	bfi	r3, r1, #2, #1
 8000a62:	7713      	strb	r3, [r2, #28]
		DevData->CanSwitchOnOldVal = DevData->CanSwitchOn;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7f1b      	ldrb	r3, [r3, #28]
 8000a68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a6c:	b2d9      	uxtb	r1, r3
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	7f13      	ldrb	r3, [r2, #28]
 8000a72:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a76:	7713      	strb	r3, [r2, #28]
		if((DevData->ButtonSwitchOn == EnableSw)||(DevData->CanSwitchOn == EnableSw))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7f1b      	ldrb	r3, [r3, #28]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d106      	bne.n	8000a94 <ChangeModes+0x7c>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7f1b      	ldrb	r3, [r3, #28]
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d013      	beq.n	8000abc <ChangeModes+0xa4>
			{
				DevData->ModeChannelA = OnChannel;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2201      	movs	r2, #1
 8000a98:	711a      	strb	r2, [r3, #4]
				DevData->ModeChannelB = OnChannel;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	715a      	strb	r2, [r3, #5]
				CHANNEL_A_ON
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	4873      	ldr	r0, [pc, #460]	; (8000c74 <ChangeModes+0x25c>)
 8000aa6:	f003 fd69 	bl	800457c <HAL_GPIO_WritePin>
				CHANNEL_B_ON
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2104      	movs	r1, #4
 8000aae:	4871      	ldr	r0, [pc, #452]	; (8000c74 <ChangeModes+0x25c>)
 8000ab0:	f003 fd64 	bl	800457c <HAL_GPIO_WritePin>
				osDelay(200);
 8000ab4:	20c8      	movs	r0, #200	; 0xc8
 8000ab6:	f006 f895 	bl	8006be4 <osDelay>
 8000aba:	e00c      	b.n	8000ad6 <ChangeModes+0xbe>
			}
			else
			{
				//DevData->ModeChannelA = OffChannel;
				//DevData->ModeChannelB = OffChannel;
				CHANNEL_A_OFF
 8000abc:	2201      	movs	r2, #1
 8000abe:	2102      	movs	r1, #2
 8000ac0:	486c      	ldr	r0, [pc, #432]	; (8000c74 <ChangeModes+0x25c>)
 8000ac2:	f003 fd5b 	bl	800457c <HAL_GPIO_WritePin>
				CHANNEL_B_OFF
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2104      	movs	r1, #4
 8000aca:	486a      	ldr	r0, [pc, #424]	; (8000c74 <ChangeModes+0x25c>)
 8000acc:	f003 fd56 	bl	800457c <HAL_GPIO_WritePin>
				osDelay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f006 f887 	bl	8006be4 <osDelay>
			}
	}
	if((DevData->ButtonSwitchOn == EnableSw) || (DevData->CanSwitchOn == EnableSw))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7f1b      	ldrb	r3, [r3, #28]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d107      	bne.n	8000af4 <ChangeModes+0xdc>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7f1b      	ldrb	r3, [r3, #28]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8094 	beq.w	8000c1c <ChangeModes+0x204>
	{
		if((DevData->CurrentChASred > MIN_OUT_CURRENT)&&(DevData->VoltageChA > MIN_OUT_VOLTAGE)&&(DevData->ModeChannelA != OverCurrent))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000af8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000afc:	d90d      	bls.n	8000b1a <ChangeModes+0x102>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d907      	bls.n	8000b1a <ChangeModes+0x102>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d003      	beq.n	8000b1a <ChangeModes+0x102>
		{
		  DevData->ModeChannelA = OnChannel;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2201      	movs	r2, #1
 8000b16:	711a      	strb	r2, [r3, #4]
 8000b18:	e033      	b.n	8000b82 <ChangeModes+0x16a>
		}
		else if((DevData->CurrentChASred < MIN_OUT_CURRENT)&&(DevData->VoltageChA > MIN_OUT_VOLTAGE)&&(DevData->ModeChannelA != OverCurrent))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000b1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b22:	d20d      	bcs.n	8000b40 <ChangeModes+0x128>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b28:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d907      	bls.n	8000b40 <ChangeModes+0x128>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	791b      	ldrb	r3, [r3, #4]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d003      	beq.n	8000b40 <ChangeModes+0x128>
		{
			DevData->ModeChannelA = BreakChannel;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	711a      	strb	r2, [r3, #4]
 8000b3e:	e020      	b.n	8000b82 <ChangeModes+0x16a>
		}
		else if((DevData->CurrentChASred < MIN_OUT_CURRENT)&&(DevData->VoltageChA < MIN_OUT_VOLTAGE))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000b44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b48:	d21b      	bcs.n	8000b82 <ChangeModes+0x16a>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d815      	bhi.n	8000b82 <ChangeModes+0x16a>
		{
			osDelay(10);
 8000b56:	200a      	movs	r0, #10
 8000b58:	f006 f844 	bl	8006be4 <osDelay>
			if((DevData->CurrentChASred < MIN_OUT_CURRENT)&&(DevData->VoltageChA < MIN_OUT_VOLTAGE))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000b60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b64:	d20d      	bcs.n	8000b82 <ChangeModes+0x16a>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d807      	bhi.n	8000b82 <ChangeModes+0x16a>
			{
				DevData->ModeChannelA = OverCurrent;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2202      	movs	r2, #2
 8000b76:	711a      	strb	r2, [r3, #4]
				CHANNEL_A_OFF
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	483d      	ldr	r0, [pc, #244]	; (8000c74 <ChangeModes+0x25c>)
 8000b7e:	f003 fcfd 	bl	800457c <HAL_GPIO_WritePin>
			}

		}

		if((DevData->CurrentChBSred > MIN_OUT_CURRENT)&&(DevData->VoltageChB > MIN_OUT_VOLTAGE)&&(DevData->ModeChannelB != OverCurrent))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000b88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b8c:	d90d      	bls.n	8000baa <ChangeModes+0x192>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000b92:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d907      	bls.n	8000baa <ChangeModes+0x192>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	795b      	ldrb	r3, [r3, #5]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d003      	beq.n	8000baa <ChangeModes+0x192>
				{
				  DevData->ModeChannelB = OnChannel;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	715a      	strb	r2, [r3, #5]
 8000ba8:	e037      	b.n	8000c1a <ChangeModes+0x202>
				}
				else if((DevData->CurrentChBSred < MIN_OUT_CURRENT)&&(DevData->VoltageChB > MIN_OUT_VOLTAGE)&&(DevData->ModeChannelB != OverCurrent))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000bb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bb4:	d20d      	bcs.n	8000bd2 <ChangeModes+0x1ba>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000bba:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d907      	bls.n	8000bd2 <ChangeModes+0x1ba>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	795b      	ldrb	r3, [r3, #5]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d003      	beq.n	8000bd2 <ChangeModes+0x1ba>
				{
					DevData->ModeChannelB = BreakChannel;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	715a      	strb	r2, [r3, #5]
 8000bd0:	e023      	b.n	8000c1a <ChangeModes+0x202>
				}
				else if((DevData->CurrentChBSred < MIN_OUT_CURRENT)&&(DevData->VoltageChB < MIN_OUT_VOLTAGE))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000bd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bdc:	d244      	bcs.n	8000c68 <ChangeModes+0x250>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000be2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d83e      	bhi.n	8000c68 <ChangeModes+0x250>
				{
					osDelay(10);
 8000bea:	200a      	movs	r0, #10
 8000bec:	f005 fffa 	bl	8006be4 <osDelay>
					 if((DevData->CurrentChBSred < MIN_OUT_CURRENT)&&(DevData->VoltageChB < MIN_OUT_VOLTAGE))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000bf6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bfa:	d235      	bcs.n	8000c68 <ChangeModes+0x250>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c00:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d82f      	bhi.n	8000c68 <ChangeModes+0x250>
					{
						 DevData->ModeChannelB = OverCurrent;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	715a      	strb	r2, [r3, #5]
						 CHANNEL_B_OFF
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2104      	movs	r1, #4
 8000c12:	4818      	ldr	r0, [pc, #96]	; (8000c74 <ChangeModes+0x25c>)
 8000c14:	f003 fcb2 	bl	800457c <HAL_GPIO_WritePin>
		if((DevData->CurrentChBSred > MIN_OUT_CURRENT)&&(DevData->VoltageChB > MIN_OUT_VOLTAGE)&&(DevData->ModeChannelB != OverCurrent))
 8000c18:	e026      	b.n	8000c68 <ChangeModes+0x250>
 8000c1a:	e025      	b.n	8000c68 <ChangeModes+0x250>
				}

	}
	else
	{
		if(DevData->ModeChannelA != OverCurrent)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d00d      	beq.n	8000c40 <ChangeModes+0x228>
				{
					if((DevData->CurrentChASred < MIN_OUT_CURRENT)&&(DevData->VoltageChA < MIN_OUT_VOLTAGE))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000c28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c2c:	d208      	bcs.n	8000c40 <ChangeModes+0x228>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d802      	bhi.n	8000c40 <ChangeModes+0x228>
						DevData->ModeChannelA = OffChannel;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	711a      	strb	r2, [r3, #4]
				}
				if(DevData->ModeChannelB != OverCurrent)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	795b      	ldrb	r3, [r3, #5]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d010      	beq.n	8000c6a <ChangeModes+0x252>
				{
					if((DevData->CurrentChBSred < MIN_OUT_CURRENT)&&(DevData->VoltageChB < MIN_OUT_VOLTAGE))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000c4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c52:	d20a      	bcs.n	8000c6a <ChangeModes+0x252>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c58:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d804      	bhi.n	8000c6a <ChangeModes+0x252>
						DevData->ModeChannelB = OffChannel;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	715a      	strb	r2, [r3, #5]
		 	  {
		 		 if((DevData->ButtonSwitchOn == EnableSw) || (DevData->CanSwitchOn == EnableSw))
		 		  DevData->ModeChannelB = OverCurrent;
		 	  }
		 	  */
}
 8000c66:	e000      	b.n	8000c6a <ChangeModes+0x252>
		if((DevData->CurrentChBSred > MIN_OUT_CURRENT)&&(DevData->VoltageChB > MIN_OUT_VOLTAGE)&&(DevData->ModeChannelB != OverCurrent))
 8000c68:	bf00      	nop
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40020000 	.word	0x40020000

08000c78 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c8a:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000c8c:	4a3d      	ldr	r2, [pc, #244]	; (8000d84 <MX_ADC1_Init+0x10c>)
 8000c8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c90:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c96:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c9c:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb0:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb6:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000cb8:	4a33      	ldr	r2, [pc, #204]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd6:	482a      	ldr	r0, [pc, #168]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000cd8:	f001 fae0 	bl	800229c <HAL_ADC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 fecf 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4822      	ldr	r0, [pc, #136]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000cf8:	f001 fc92 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d02:	f000 febf 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d06:	230d      	movs	r3, #13
 8000d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	481b      	ldr	r0, [pc, #108]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000d14:	f001 fc84 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000d1e:	f000 feb1 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d22:	230e      	movs	r3, #14
 8000d24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d26:	2303      	movs	r3, #3
 8000d28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000d30:	f001 fc76 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000d3a:	f000 fea3 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000d4c:	f001 fc68 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d56:	f000 fe95 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_ADC1_Init+0x108>)
 8000d68:	f001 fc5a 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d72:	f000 fe87 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20004b5c 	.word	0x20004b5c
 8000d84:	40012000 	.word	0x40012000
 8000d88:	0f000001 	.word	0x0f000001

08000d8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000da0:	4a36      	ldr	r2, [pc, #216]	; (8000e7c <MX_ADC2_Init+0xf0>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000da4:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000dcc:	4a2c      	ldr	r2, [pc, #176]	; (8000e80 <MX_ADC2_Init+0xf4>)
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000dd6:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000dd8:	2204      	movs	r2, #4
 8000dda:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dea:	4823      	ldr	r0, [pc, #140]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000dec:	f001 fa56 	bl	800229c <HAL_ADC_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f000 fe45 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000e02:	2303      	movs	r3, #3
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481b      	ldr	r0, [pc, #108]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000e0c:	f001 fc08 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000e16:	f000 fe35 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e1a:	230d      	movs	r3, #13
 8000e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000e28:	f001 fbfa 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e32:	f000 fe27 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e36:	230e      	movs	r3, #14
 8000e38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000e44:	f001 fbec 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8000e4e:	f000 fe19 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e52:	230f      	movs	r3, #15
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_ADC2_Init+0xec>)
 8000e60:	f001 fbde 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8000e6a:	f000 fe0b 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20004b14 	.word	0x20004b14
 8000e7c:	40012100 	.word	0x40012100
 8000e80:	0f000001 	.word	0x0f000001

08000e84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a5e      	ldr	r2, [pc, #376]	; (800101c <HAL_ADC_MspInit+0x198>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d159      	bne.n	8000f5a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	4b5d      	ldr	r3, [pc, #372]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a5c      	ldr	r2, [pc, #368]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a55      	ldr	r2, [pc, #340]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b53      	ldr	r3, [pc, #332]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CURR_B_Pin|U_A_Pin|U_B_Pin;
 8000ede:	2338      	movs	r3, #56	; 0x38
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	484c      	ldr	r0, [pc, #304]	; (8001024 <HAL_ADC_MspInit+0x1a0>)
 8000ef2:	f003 f98f 	bl	8004214 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_ADC_MspInit+0x1a8>)
 8000efa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f16:	4b44      	ldr	r3, [pc, #272]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f1e:	4b42      	ldr	r3, [pc, #264]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f26:	4b40      	ldr	r3, [pc, #256]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f2e:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f3c:	483a      	ldr	r0, [pc, #232]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f3e:	f002 fd89 	bl	8003a54 <HAL_DMA_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000f48:	f000 fd9c 	bl	8001a84 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a36      	ldr	r2, [pc, #216]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f50:	639a      	str	r2, [r3, #56]	; 0x38
 8000f52:	4a35      	ldr	r2, [pc, #212]	; (8001028 <HAL_ADC_MspInit+0x1a4>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f58:	e05c      	b.n	8001014 <HAL_ADC_MspInit+0x190>
  else if(adcHandle->Instance==ADC2)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a34      	ldr	r2, [pc, #208]	; (8001030 <HAL_ADC_MspInit+0x1ac>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d157      	bne.n	8001014 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f72:	6453      	str	r3, [r2, #68]	; 0x44
 8000f74:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a25      	ldr	r2, [pc, #148]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_ADC_MspInit+0x19c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURR_A_Pin|CURR_B_Pin|U_A_Pin|U_B_Pin;
 8000f9c:	233c      	movs	r3, #60	; 0x3c
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <HAL_ADC_MspInit+0x1a0>)
 8000fb0:	f003 f930 	bl	8004214 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fb6:	4a20      	ldr	r2, [pc, #128]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000fb8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fc0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fdc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fe0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ff8:	480e      	ldr	r0, [pc, #56]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000ffa:	f002 fd2b 	bl	8003a54 <HAL_DMA_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8001004:	f000 fd3e 	bl	8001a84 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
 800100e:	4a09      	ldr	r2, [pc, #36]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001014:	bf00      	nop
 8001016:	3730      	adds	r7, #48	; 0x30
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40012000 	.word	0x40012000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800
 8001028:	20004ba4 	.word	0x20004ba4
 800102c:	40026410 	.word	0x40026410
 8001030:	40012100 	.word	0x40012100
 8001034:	20004c04 	.word	0x20004c04
 8001038:	40026440 	.word	0x40026440

0800103c <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <MX_CAN2_Init+0xb0>)
 8001042:	4a2b      	ldr	r2, [pc, #172]	; (80010f0 <MX_CAN2_Init+0xb4>)
 8001044:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <MX_CAN2_Init+0xb0>)
 8001048:	2206      	movs	r2, #6
 800104a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <MX_CAN2_Init+0xb0>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <MX_CAN2_Init+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <MX_CAN2_Init+0xb0>)
 800105a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800105e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_CAN2_Init+0xb0>)
 8001062:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001066:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_CAN2_Init+0xb0>)
 800106a:	2200      	movs	r2, #0
 800106c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_CAN2_Init+0xb0>)
 8001070:	2201      	movs	r2, #1
 8001072:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_CAN2_Init+0xb0>)
 8001076:	2200      	movs	r2, #0
 8001078:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_CAN2_Init+0xb0>)
 800107c:	2201      	movs	r2, #1
 800107e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_CAN2_Init+0xb0>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_CAN2_Init+0xb0>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800108c:	4817      	ldr	r0, [pc, #92]	; (80010ec <MX_CAN2_Init+0xb0>)
 800108e:	f001 fd67 	bl	8002b60 <HAL_CAN_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001098:	f000 fcf4 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  sFilterConfig.FilterBank=0;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_CAN2_Init+0xb8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  	sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	61da      	str	r2, [r3, #28]
  	sFilterConfig.FilterIdHigh=CAN_FILTER_ID_0 << 5;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010b0:	f44f 5257 	mov.w	r2, #13760	; 0x35c0
 80010b4:	601a      	str	r2, [r3, #0]
  	sFilterConfig.FilterIdLow=0x0000;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  	sFilterConfig.FilterMaskIdHigh=CAN_FILTER_MASK_0 << 5;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010be:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80010c2:	609a      	str	r2, [r3, #8]
  	sFilterConfig.FilterMaskIdLow=0x0000;
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  	sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  	sFilterConfig.FilterActivation=ENABLE;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	621a      	str	r2, [r3, #32]
  	//sFilterConfig.SlaveStartFilterBank=14;
  	if(HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig)!=HAL_OK)
 80010d6:	4907      	ldr	r1, [pc, #28]	; (80010f4 <MX_CAN2_Init+0xb8>)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_CAN2_Init+0xb0>)
 80010da:	f001 fe3d 	bl	8002d58 <HAL_CAN_ConfigFilter>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_CAN2_Init+0xac>
  	{
  		Error_Handler();
 80010e4:	f000 fcce 	bl	8001a84 <Error_Handler>
  		Error_Handler();
  	}
  	*/
  /* USER CODE END CAN2_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20004c8c 	.word	0x20004c8c
 80010f0:	40006800 	.word	0x40006800
 80010f4:	20004c64 	.word	0x20004c64

080010f8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <HAL_CAN_MspInit+0xc0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d14a      	bne.n	80011b0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a26      	ldr	r2, [pc, #152]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 8001124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 8001140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_CAN_MspInit+0xc4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800116e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001180:	2309      	movs	r3, #9
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <HAL_CAN_MspInit+0xc8>)
 800118c:	f003 f842 	bl	8004214 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2105      	movs	r1, #5
 8001194:	2040      	movs	r0, #64	; 0x40
 8001196:	f002 fc33 	bl	8003a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800119a:	2040      	movs	r0, #64	; 0x40
 800119c:	f002 fc4c 	bl	8003a38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2105      	movs	r1, #5
 80011a4:	2041      	movs	r0, #65	; 0x41
 80011a6:	f002 fc2b 	bl	8003a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80011aa:	2041      	movs	r0, #65	; 0x41
 80011ac:	f002 fc44 	bl	8003a38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40006800 	.word	0x40006800
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_DMA_Init+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1e      	ldr	r2, [pc, #120]	; (800124c <MX_DMA_Init+0x88>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_DMA_Init+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_DMA_Init+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <MX_DMA_Init+0x88>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_DMA_Init+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2105      	movs	r1, #5
 8001206:	200b      	movs	r0, #11
 8001208:	f002 fbfa 	bl	8003a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800120c:	200b      	movs	r0, #11
 800120e:	f002 fc13 	bl	8003a38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2105      	movs	r1, #5
 8001216:	2010      	movs	r0, #16
 8001218:	f002 fbf2 	bl	8003a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800121c:	2010      	movs	r0, #16
 800121e:	f002 fc0b 	bl	8003a38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2105      	movs	r1, #5
 8001226:	2038      	movs	r0, #56	; 0x38
 8001228:	f002 fbea 	bl	8003a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800122c:	2038      	movs	r0, #56	; 0x38
 800122e:	f002 fc03 	bl	8003a38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	203a      	movs	r0, #58	; 0x3a
 8001238:	f002 fbe2 	bl	8003a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800123c:	203a      	movs	r0, #58	; 0x3a
 800123e:	f002 fbfb 	bl	8003a38 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001254:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <MX_FREERTOS_Init+0x78>)
 8001256:	2100      	movs	r1, #0
 8001258:	481c      	ldr	r0, [pc, #112]	; (80012cc <MX_FREERTOS_Init+0x7c>)
 800125a:	f005 fc31 	bl	8006ac0 <osThreadNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <MX_FREERTOS_Init+0x80>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of Button */
  ButtonHandle = osThreadNew(ButtonTask, NULL, &Button_attributes);
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <MX_FREERTOS_Init+0x84>)
 8001266:	2100      	movs	r1, #0
 8001268:	481b      	ldr	r0, [pc, #108]	; (80012d8 <MX_FREERTOS_Init+0x88>)
 800126a:	f005 fc29 	bl	8006ac0 <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <MX_FREERTOS_Init+0x8c>)
 8001272:	6013      	str	r3, [r2, #0]

  /* creation of Output */
  OutputHandle = osThreadNew(OutputTask, NULL, &Output_attributes);
 8001274:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <MX_FREERTOS_Init+0x90>)
 8001276:	2100      	movs	r1, #0
 8001278:	481a      	ldr	r0, [pc, #104]	; (80012e4 <MX_FREERTOS_Init+0x94>)
 800127a:	f005 fc21 	bl	8006ac0 <osThreadNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <MX_FREERTOS_Init+0x98>)
 8001282:	6013      	str	r3, [r2, #0]

  /* creation of SwitchMode */
  SwitchModeHandle = osThreadNew(SwitchModeTask, NULL, &SwitchMode_attributes);
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <MX_FREERTOS_Init+0x9c>)
 8001286:	2100      	movs	r1, #0
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <MX_FREERTOS_Init+0xa0>)
 800128a:	f005 fc19 	bl	8006ac0 <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <MX_FREERTOS_Init+0xa4>)
 8001292:	6013      	str	r3, [r2, #0]

  /* creation of Can */
  CanHandle = osThreadNew(CanTask, NULL, &Can_attributes);
 8001294:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <MX_FREERTOS_Init+0xa8>)
 8001296:	2100      	movs	r1, #0
 8001298:	4818      	ldr	r0, [pc, #96]	; (80012fc <MX_FREERTOS_Init+0xac>)
 800129a:	f005 fc11 	bl	8006ac0 <osThreadNew>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a17      	ldr	r2, [pc, #92]	; (8001300 <MX_FREERTOS_Init+0xb0>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* creation of Adc */
  AdcHandle = osThreadNew(AdcTask, NULL, &Adc_attributes);
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <MX_FREERTOS_Init+0xb4>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <MX_FREERTOS_Init+0xb8>)
 80012aa:	f005 fc09 	bl	8006ac0 <osThreadNew>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a16      	ldr	r2, [pc, #88]	; (800130c <MX_FREERTOS_Init+0xbc>)
 80012b2:	6013      	str	r3, [r2, #0]

  /* creation of Led */
  LedHandle = osThreadNew(LedTask, NULL, &Led_attributes);
 80012b4:	4a16      	ldr	r2, [pc, #88]	; (8001310 <MX_FREERTOS_Init+0xc0>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <MX_FREERTOS_Init+0xc4>)
 80012ba:	f005 fc01 	bl	8006ac0 <osThreadNew>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a15      	ldr	r2, [pc, #84]	; (8001318 <MX_FREERTOS_Init+0xc8>)
 80012c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	08009784 	.word	0x08009784
 80012cc:	0800131d 	.word	0x0800131d
 80012d0:	20004cb8 	.word	0x20004cb8
 80012d4:	080097a8 	.word	0x080097a8
 80012d8:	080013e9 	.word	0x080013e9
 80012dc:	20004ccc 	.word	0x20004ccc
 80012e0:	080097cc 	.word	0x080097cc
 80012e4:	08001491 	.word	0x08001491
 80012e8:	20004cc0 	.word	0x20004cc0
 80012ec:	080097f0 	.word	0x080097f0
 80012f0:	080014a1 	.word	0x080014a1
 80012f4:	20004cc4 	.word	0x20004cc4
 80012f8:	08009814 	.word	0x08009814
 80012fc:	080014d1 	.word	0x080014d1
 8001300:	20004cbc 	.word	0x20004cbc
 8001304:	08009838 	.word	0x08009838
 8001308:	08001505 	.word	0x08001505
 800130c:	20004cd0 	.word	0x20004cd0
 8001310:	0800985c 	.word	0x0800985c
 8001314:	0800155d 	.word	0x0800155d
 8001318:	20004cb4 	.word	0x20004cb4

0800131c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint16_t buff[] = {48};
 8001324:	2330      	movs	r3, #48	; 0x30
 8001326:	81bb      	strh	r3, [r7, #12]

	CHANNEL_A_OFF
 8001328:	2201      	movs	r2, #1
 800132a:	2102      	movs	r1, #2
 800132c:	4829      	ldr	r0, [pc, #164]	; (80013d4 <StartDefaultTask+0xb8>)
 800132e:	f003 f925 	bl	800457c <HAL_GPIO_WritePin>
	CHANNEL_B_OFF
 8001332:	2201      	movs	r2, #1
 8001334:	2104      	movs	r1, #4
 8001336:	4827      	ldr	r0, [pc, #156]	; (80013d4 <StartDefaultTask+0xb8>)
 8001338:	f003 f920 	bl	800457c <HAL_GPIO_WritePin>
	//LED_CAN_GREEN_ON
	LED_CAN_RED_ON
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <StartDefaultTask+0xbc>)
 8001344:	f003 f91a 	bl	800457c <HAL_GPIO_WritePin>
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134e:	4821      	ldr	r0, [pc, #132]	; (80013d4 <StartDefaultTask+0xb8>)
 8001350:	f003 f914 	bl	800457c <HAL_GPIO_WritePin>
	  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t*)buff, 1);//channel 1
 8001354:	f107 020c 	add.w	r2, r7, #12
 8001358:	2301      	movs	r3, #1
 800135a:	2104      	movs	r1, #4
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <StartDefaultTask+0xc0>)
 800135e:	f004 f9c9 	bl	80056f4 <HAL_TIM_PWM_Start_DMA>
	 HAL_TIM_OC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001362:	2100      	movs	r1, #0
 8001364:	481e      	ldr	r0, [pc, #120]	; (80013e0 <StartDefaultTask+0xc4>)
 8001366:	f003 fecf 	bl	8005108 <HAL_TIM_OC_Start_IT>
	osDelay(100);
 800136a:	2064      	movs	r0, #100	; 0x64
 800136c:	f005 fc3a 	bl	8006be4 <osDelay>
	DevData.CanError = EnableSw;
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <StartDefaultTask+0xc8>)
 8001372:	7993      	ldrb	r3, [r2, #6]
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	7193      	strb	r3, [r2, #6]
	 // HAL_TIM_Base_Start_IT(&htim6);

  /* Infinite loop */
  for(;;)
  {
	  if(DevData.CanError == EnableSw)
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <StartDefaultTask+0xc8>)
 800137c:	799b      	ldrb	r3, [r3, #6]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00c      	beq.n	80013a2 <StartDefaultTask+0x86>
	  {
		  LED_CAN_RED_ON
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <StartDefaultTask+0xbc>)
 8001390:	f003 f8f4 	bl	800457c <HAL_GPIO_WritePin>
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <StartDefaultTask+0xb8>)
 800139c:	f003 f8ee 	bl	800457c <HAL_GPIO_WritePin>
 80013a0:	e014      	b.n	80013cc <StartDefaultTask+0xb0>
	  }
		  else{
			  LED_CAN_GREEN_ON
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <StartDefaultTask+0xb8>)
 80013aa:	f003 f8e7 	bl	800457c <HAL_GPIO_WritePin>
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <StartDefaultTask+0xbc>)
 80013b6:	f003 f8e1 	bl	800457c <HAL_GPIO_WritePin>
			  DevData.CanError = EnableSw;
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <StartDefaultTask+0xc8>)
 80013bc:	7993      	ldrb	r3, [r2, #6]
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	7193      	strb	r3, [r2, #6]
			  osDelay(5000);
 80013c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80013c8:	f005 fc0c 	bl	8006be4 <osDelay>
		  }
	  	 osDelay(50);
 80013cc:	2032      	movs	r0, #50	; 0x32
 80013ce:	f005 fc09 	bl	8006be4 <osDelay>
	  if(DevData.CanError == EnableSw)
 80013d2:	e7d2      	b.n	800137a <StartDefaultTask+0x5e>
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020800 	.word	0x40020800
 80013dc:	20004de0 	.word	0x20004de0
 80013e0:	20004d98 	.word	0x20004d98
 80013e4:	20004a7c 	.word	0x20004a7c

080013e8 <ButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonTask */
void ButtonTask(void *argument)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTask */
	LED_CAN_GREEN_ON
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4823      	ldr	r0, [pc, #140]	; (8001484 <ButtonTask+0x9c>)
 80013f8:	f003 f8c0 	bl	800457c <HAL_GPIO_WritePin>
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001402:	4821      	ldr	r0, [pc, #132]	; (8001488 <ButtonTask+0xa0>)
 8001404:	f003 f8ba 	bl	800457c <HAL_GPIO_WritePin>
	DevData.ButtonSwitchOn = DisableSw;
 8001408:	4a20      	ldr	r2, [pc, #128]	; (800148c <ButtonTask+0xa4>)
 800140a:	7f13      	ldrb	r3, [r2, #28]
 800140c:	f36f 0300 	bfc	r3, #0, #1
 8001410:	7713      	strb	r3, [r2, #28]
  /* Infinite loop */
  for(;;)
  {
	  if(DevData.ButtonSwitchOn == DisableSw)
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <ButtonTask+0xa4>)
 8001414:	7f1b      	ldrb	r3, [r3, #28]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d116      	bne.n	800144e <ButtonTask+0x66>
	  		{
	  			if(HAL_GPIO_ReadPin(ON_GPIO_Port,ON_Pin)==GPIO_PIN_RESET)
 8001420:	2110      	movs	r1, #16
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <ButtonTask+0x9c>)
 8001424:	f003 f892 	bl	800454c <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d125      	bne.n	800147a <ButtonTask+0x92>
	  			{
	  				osDelay(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f005 fbd8 	bl	8006be4 <osDelay>
	  				if(HAL_GPIO_ReadPin(ON_GPIO_Port,ON_Pin)==GPIO_PIN_RESET)
 8001434:	2110      	movs	r1, #16
 8001436:	4813      	ldr	r0, [pc, #76]	; (8001484 <ButtonTask+0x9c>)
 8001438:	f003 f888 	bl	800454c <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11b      	bne.n	800147a <ButtonTask+0x92>
	  				{
	  					DevData.ButtonSwitchOn = EnableSw;
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <ButtonTask+0xa4>)
 8001444:	7f13      	ldrb	r3, [r2, #28]
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	7713      	strb	r3, [r2, #28]
 800144c:	e015      	b.n	800147a <ButtonTask+0x92>
	  				}
	  			}
	  		}
	  		else
	  		{
	  			if(HAL_GPIO_ReadPin(ON_GPIO_Port,ON_Pin)==GPIO_PIN_SET)
 800144e:	2110      	movs	r1, #16
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <ButtonTask+0x9c>)
 8001452:	f003 f87b 	bl	800454c <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d10e      	bne.n	800147a <ButtonTask+0x92>
	  			{
	  				osDelay(10);
 800145c:	200a      	movs	r0, #10
 800145e:	f005 fbc1 	bl	8006be4 <osDelay>
	  				if(HAL_GPIO_ReadPin(ON_GPIO_Port,ON_Pin)==GPIO_PIN_SET)
 8001462:	2110      	movs	r1, #16
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <ButtonTask+0x9c>)
 8001466:	f003 f871 	bl	800454c <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d104      	bne.n	800147a <ButtonTask+0x92>
	  				{
	  					DevData.ButtonSwitchOn = DisableSw;
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <ButtonTask+0xa4>)
 8001472:	7f13      	ldrb	r3, [r2, #28]
 8001474:	f36f 0300 	bfc	r3, #0, #1
 8001478:	7713      	strb	r3, [r2, #28]
	  				}
	  			}
	  		}


	      osDelay(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f005 fbb2 	bl	8006be4 <osDelay>
	  if(DevData.ButtonSwitchOn == DisableSw)
 8001480:	e7c7      	b.n	8001412 <ButtonTask+0x2a>
 8001482:	bf00      	nop
 8001484:	40020000 	.word	0x40020000
 8001488:	40020800 	.word	0x40020800
 800148c:	20004a7c 	.word	0x20004a7c

08001490 <OutputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OutputTask */
void OutputTask(void *argument)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
		  CHANNEL_B_OFF
		  LED_OUT_1_GREEN_OFF
		  LED_OUT_2_GREEN_OFF
	  }
*/
	      osDelay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f005 fba3 	bl	8006be4 <osDelay>
 800149e:	e7fb      	b.n	8001498 <OutputTask+0x8>

080014a0 <SwitchModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SwitchModeTask */
void SwitchModeTask(void *argument)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SwitchModeTask */
	DevData.ModeChannelA = OffChannel;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <SwitchModeTask+0x2c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	711a      	strb	r2, [r3, #4]
	DevData.ModeChannelB = OffChannel;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <SwitchModeTask+0x2c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	715a      	strb	r2, [r3, #5]
	osDelay(300);
 80014b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014b8:	f005 fb94 	bl	8006be4 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  ChangeModes(&DevData);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <SwitchModeTask+0x2c>)
 80014be:	f7ff faab 	bl	8000a18 <ChangeModes>

    osDelay(10);
 80014c2:	200a      	movs	r0, #10
 80014c4:	f005 fb8e 	bl	8006be4 <osDelay>
  {
 80014c8:	e7f8      	b.n	80014bc <SwitchModeTask+0x1c>
 80014ca:	bf00      	nop
 80014cc:	20004a7c 	.word	0x20004a7c

080014d0 <CanTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CanTask */
void CanTask(void *argument)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	//uint16_t TxID = CAN_PROT_TD_TO_PROG;
  /* Infinite loop */
  for(;;)
  {

	  	ConvertDataTOProt(CAN_PROT_TD_TO_PROG, TxCanBuff, &DevData);
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <CanTask+0x30>)
 80014de:	4619      	mov	r1, r3
 80014e0:	f44f 70a2 	mov.w	r0, #324	; 0x144
 80014e4:	f7ff f81a 	bl	800051c <ConvertDataTOProt>
	  	CanSendStdMessage(CAN_PROT_TD_TO_PROG, TxCanBuff);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 70a2 	mov.w	r0, #324	; 0x144
 80014f2:	f7ff f897 	bl	8000624 <CanSendStdMessage>
	  	osDelay(800);
 80014f6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014fa:	f005 fb73 	bl	8006be4 <osDelay>
	  	ConvertDataTOProt(CAN_PROT_TD_TO_PROG, TxCanBuff, &DevData);
 80014fe:	e7eb      	b.n	80014d8 <CanTask+0x8>
 8001500:	20004a7c 	.word	0x20004a7c

08001504 <AdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AdcTask */
void AdcTask(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
	//HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_DMA(&hadc1, ADCResultBuff, 5);
 800150c:	2205      	movs	r2, #5
 800150e:	490d      	ldr	r1, [pc, #52]	; (8001544 <AdcTask+0x40>)
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <AdcTask+0x44>)
 8001512:	f000 ff07 	bl	8002324 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, ADCResultBuff2, 4);
 8001516:	2204      	movs	r2, #4
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <AdcTask+0x48>)
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <AdcTask+0x4c>)
 800151c:	f000 ff02 	bl	8002324 <HAL_ADC_Start_DMA>

	  if(ADCflag)
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <AdcTask+0x50>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <AdcTask+0x38>
	  {
		  ADCflag = 0;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <AdcTask+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
		  InterputDataFromAdc(&DevData,ADCResultBuff2);
 800152e:	4907      	ldr	r1, [pc, #28]	; (800154c <AdcTask+0x48>)
 8001530:	4809      	ldr	r0, [pc, #36]	; (8001558 <AdcTask+0x54>)
 8001532:	f7ff f8cf 	bl	80006d4 <InterputDataFromAdc>
		  AverDataFromAdc(&DevData);
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <AdcTask+0x54>)
 8001538:	f7ff f94c 	bl	80007d4 <AverDataFromAdc>

	  }
	  osDelay(50);
 800153c:	2032      	movs	r0, #50	; 0x32
 800153e:	f005 fb51 	bl	8006be4 <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, ADCResultBuff, 5);
 8001542:	e7e3      	b.n	800150c <AdcTask+0x8>
 8001544:	20000090 	.word	0x20000090
 8001548:	20004b5c 	.word	0x20004b5c
 800154c:	2000009c 	.word	0x2000009c
 8001550:	20004b14 	.word	0x20004b14
 8001554:	200000a4 	.word	0x200000a4
 8001558:	20004a7c 	.word	0x20004a7c

0800155c <LedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTask */
void LedTask(void *argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask */
  /* Infinite loop */
  for(;;)
  {
	  switch (DevData.ModeChannelA){
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <LedTask+0x1e8>)
 8001566:	791b      	ldrb	r3, [r3, #4]
 8001568:	2b04      	cmp	r3, #4
 800156a:	d877      	bhi.n	800165c <LedTask+0x100>
 800156c:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <LedTask+0x18>)
 800156e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001572:	bf00      	nop
 8001574:	08001589 	.word	0x08001589
 8001578:	080015c1 	.word	0x080015c1
 800157c:	080015ed 	.word	0x080015ed
 8001580:	0800165d 	.word	0x0800165d
 8001584:	08001625 	.word	0x08001625
	  case OffChannel:
		  LED_OUT_1_ALL_OFF
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158e:	486e      	ldr	r0, [pc, #440]	; (8001748 <LedTask+0x1ec>)
 8001590:	f002 fff4 	bl	800457c <HAL_GPIO_WritePin>
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159a:	486b      	ldr	r0, [pc, #428]	; (8001748 <LedTask+0x1ec>)
 800159c:	f002 ffee 	bl	800457c <HAL_GPIO_WritePin>
		  LED_OUT_1_ALL_OFF
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a6:	4868      	ldr	r0, [pc, #416]	; (8001748 <LedTask+0x1ec>)
 80015a8:	f002 ffe8 	bl	800457c <HAL_GPIO_WritePin>
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b2:	4865      	ldr	r0, [pc, #404]	; (8001748 <LedTask+0x1ec>)
 80015b4:	f002 ffe2 	bl	800457c <HAL_GPIO_WritePin>
		  osDelay(10);
 80015b8:	200a      	movs	r0, #10
 80015ba:	f005 fb13 	bl	8006be4 <osDelay>
		break;
 80015be:	e04d      	b.n	800165c <LedTask+0x100>
	  case OnChannel:
		  LED_OUT_1_ALL_OFF
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c6:	4860      	ldr	r0, [pc, #384]	; (8001748 <LedTask+0x1ec>)
 80015c8:	f002 ffd8 	bl	800457c <HAL_GPIO_WritePin>
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d2:	485d      	ldr	r0, [pc, #372]	; (8001748 <LedTask+0x1ec>)
 80015d4:	f002 ffd2 	bl	800457c <HAL_GPIO_WritePin>
		  LED_OUT_1_GREEN_ON
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015de:	485a      	ldr	r0, [pc, #360]	; (8001748 <LedTask+0x1ec>)
 80015e0:	f002 ffcc 	bl	800457c <HAL_GPIO_WritePin>
		  osDelay(10);
 80015e4:	200a      	movs	r0, #10
 80015e6:	f005 fafd 	bl	8006be4 <osDelay>
	  	break;
 80015ea:	e037      	b.n	800165c <LedTask+0x100>
	  case OverCurrent:
		  LED_OUT_1_ALL_OFF
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f2:	4855      	ldr	r0, [pc, #340]	; (8001748 <LedTask+0x1ec>)
 80015f4:	f002 ffc2 	bl	800457c <HAL_GPIO_WritePin>
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fe:	4852      	ldr	r0, [pc, #328]	; (8001748 <LedTask+0x1ec>)
 8001600:	f002 ffbc 	bl	800457c <HAL_GPIO_WritePin>
	  	  	LED_OUT_1_RED_ON
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160a:	484f      	ldr	r0, [pc, #316]	; (8001748 <LedTask+0x1ec>)
 800160c:	f002 ffb6 	bl	800457c <HAL_GPIO_WritePin>
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001616:	484c      	ldr	r0, [pc, #304]	; (8001748 <LedTask+0x1ec>)
 8001618:	f002 ffb0 	bl	800457c <HAL_GPIO_WritePin>
			osDelay(10);
 800161c:	200a      	movs	r0, #10
 800161e:	f005 fae1 	bl	8006be4 <osDelay>
	  	  	break;
 8001622:	e01b      	b.n	800165c <LedTask+0x100>
	  case BreakChannel:
		  LED_OUT_1_ALL_OFF
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162a:	4847      	ldr	r0, [pc, #284]	; (8001748 <LedTask+0x1ec>)
 800162c:	f002 ffa6 	bl	800457c <HAL_GPIO_WritePin>
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001636:	4844      	ldr	r0, [pc, #272]	; (8001748 <LedTask+0x1ec>)
 8001638:	f002 ffa0 	bl	800457c <HAL_GPIO_WritePin>
	  	  		LED_OUT_1_YELLOW_ON
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001642:	4841      	ldr	r0, [pc, #260]	; (8001748 <LedTask+0x1ec>)
 8001644:	f002 ff9a 	bl	800457c <HAL_GPIO_WritePin>
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164e:	483e      	ldr	r0, [pc, #248]	; (8001748 <LedTask+0x1ec>)
 8001650:	f002 ff94 	bl	800457c <HAL_GPIO_WritePin>
				osDelay(10);
 8001654:	200a      	movs	r0, #10
 8001656:	f005 fac5 	bl	8006be4 <osDelay>
	  	  	break;
 800165a:	bf00      	nop
	  }
	  switch (DevData.ModeChannelB){
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <LedTask+0x1e8>)
 800165e:	795b      	ldrb	r3, [r3, #5]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d86b      	bhi.n	800173c <LedTask+0x1e0>
 8001664:	a201      	add	r2, pc, #4	; (adr r2, 800166c <LedTask+0x110>)
 8001666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166a:	bf00      	nop
 800166c:	08001681 	.word	0x08001681
 8001670:	080016a1 	.word	0x080016a1
 8001674:	080016d9 	.word	0x080016d9
 8001678:	0800173d 	.word	0x0800173d
 800167c:	08001705 	.word	0x08001705
		  case OffChannel:
			  LED_OUT_2_ALL_OFF
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001686:	4830      	ldr	r0, [pc, #192]	; (8001748 <LedTask+0x1ec>)
 8001688:	f002 ff78 	bl	800457c <HAL_GPIO_WritePin>
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001692:	482d      	ldr	r0, [pc, #180]	; (8001748 <LedTask+0x1ec>)
 8001694:	f002 ff72 	bl	800457c <HAL_GPIO_WritePin>
			  osDelay(10);
 8001698:	200a      	movs	r0, #10
 800169a:	f005 faa3 	bl	8006be4 <osDelay>
			break;
 800169e:	e04d      	b.n	800173c <LedTask+0x1e0>
		  case OnChannel:
			  LED_OUT_2_ALL_OFF
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a6:	4828      	ldr	r0, [pc, #160]	; (8001748 <LedTask+0x1ec>)
 80016a8:	f002 ff68 	bl	800457c <HAL_GPIO_WritePin>
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b2:	4825      	ldr	r0, [pc, #148]	; (8001748 <LedTask+0x1ec>)
 80016b4:	f002 ff62 	bl	800457c <HAL_GPIO_WritePin>
			  LED_OUT_2_GREEN_ON
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016be:	4822      	ldr	r0, [pc, #136]	; (8001748 <LedTask+0x1ec>)
 80016c0:	f002 ff5c 	bl	800457c <HAL_GPIO_WritePin>
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ca:	481f      	ldr	r0, [pc, #124]	; (8001748 <LedTask+0x1ec>)
 80016cc:	f002 ff56 	bl	800457c <HAL_GPIO_WritePin>
			  osDelay(10);
 80016d0:	200a      	movs	r0, #10
 80016d2:	f005 fa87 	bl	8006be4 <osDelay>
	  	  	break;
 80016d6:	e031      	b.n	800173c <LedTask+0x1e0>
	  	  case OverCurrent:
	  		LED_OUT_2_ALL_OFF
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016de:	481a      	ldr	r0, [pc, #104]	; (8001748 <LedTask+0x1ec>)
 80016e0:	f002 ff4c 	bl	800457c <HAL_GPIO_WritePin>
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ea:	4817      	ldr	r0, [pc, #92]	; (8001748 <LedTask+0x1ec>)
 80016ec:	f002 ff46 	bl	800457c <HAL_GPIO_WritePin>
	  		LED_OUT_2_RED_ON
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <LedTask+0x1ec>)
 80016f8:	f002 ff40 	bl	800457c <HAL_GPIO_WritePin>
			osDelay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f005 fa71 	bl	8006be4 <osDelay>
	  	  	  	break;
 8001702:	e01b      	b.n	800173c <LedTask+0x1e0>
	  	  case BreakChannel:
	  		LED_OUT_2_ALL_OFF
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800170a:	480f      	ldr	r0, [pc, #60]	; (8001748 <LedTask+0x1ec>)
 800170c:	f002 ff36 	bl	800457c <HAL_GPIO_WritePin>
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001716:	480c      	ldr	r0, [pc, #48]	; (8001748 <LedTask+0x1ec>)
 8001718:	f002 ff30 	bl	800457c <HAL_GPIO_WritePin>
	  		LED_OUT_2_YELLOW_ON
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001722:	4809      	ldr	r0, [pc, #36]	; (8001748 <LedTask+0x1ec>)
 8001724:	f002 ff2a 	bl	800457c <HAL_GPIO_WritePin>
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <LedTask+0x1ec>)
 8001730:	f002 ff24 	bl	800457c <HAL_GPIO_WritePin>
			osDelay(10);
 8001734:	200a      	movs	r0, #10
 8001736:	f005 fa55 	bl	8006be4 <osDelay>
	  	  	  	break;
 800173a:	bf00      	nop
	  	  }

    osDelay(10);
 800173c:	200a      	movs	r0, #10
 800173e:	f005 fa51 	bl	8006be4 <osDelay>
	  switch (DevData.ModeChannelA){
 8001742:	e70f      	b.n	8001564 <LedTask+0x8>
 8001744:	20004a7c 	.word	0x20004a7c
 8001748:	40020000 	.word	0x40020000

0800174c <HAL_TIM_OC_DelayElapsedCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM5)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d107      	bne.n	800176e <HAL_TIM_OC_DelayElapsedCallback+0x22>
        		HAL_TIM_OC_Stop_IT(&htim5, TIM_CHANNEL_1);
        	}

            ActivSINC2 = 0xFF;
*/
        	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8001762:	f003 feff 	bl	8005564 <HAL_TIM_PWM_Start>
        	HAL_TIM_OC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001766:	2100      	movs	r1, #0
 8001768:	4807      	ldr	r0, [pc, #28]	; (8001788 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 800176a:	f003 fde3 	bl	8005334 <HAL_TIM_OC_Stop_IT>
        }CAN_RxHeaderTypeDef RxHeader;


        uint8_t CanRxBuff[8] = {0,};
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
}
 8001776:	bf00      	nop
 8001778:	3730      	adds	r7, #48	; 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40000c00 	.word	0x40000c00
 8001784:	20004d50 	.word	0x20004d50
 8001788:	20004d98 	.word	0x20004d98

0800178c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_ADC_ConvCpltCallback+0x38>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d102      	bne.n	80017a4 <HAL_ADC_ConvCpltCallback+0x18>
	{
		HAL_ADC_Stop_DMA(&hadc1);
 800179e:	480a      	ldr	r0, [pc, #40]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80017a0:	f000 fed0 	bl	8002544 <HAL_ADC_Stop_DMA>

	}
	if(hadc->Instance == ADC2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_ADC_ConvCpltCallback+0x40>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d105      	bne.n	80017ba <HAL_ADC_ConvCpltCallback+0x2e>
	{
		HAL_ADC_Stop_DMA(&hadc2);
 80017ae:	4808      	ldr	r0, [pc, #32]	; (80017d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80017b0:	f000 fec8 	bl	8002544 <HAL_ADC_Stop_DMA>
		ADCflag = 1;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x48>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]


	}
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40012000 	.word	0x40012000
 80017c8:	20004b5c 	.word	0x20004b5c
 80017cc:	40012100 	.word	0x40012100
 80017d0:	20004b14 	.word	0x20004b14
 80017d4:	200000a4 	.word	0x200000a4

080017d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <MX_GPIO_Init+0x114>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <MX_GPIO_Init+0x114>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <MX_GPIO_Init+0x114>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <MX_GPIO_Init+0x114>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a36      	ldr	r2, [pc, #216]	; (80018ec <MX_GPIO_Init+0x114>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <MX_GPIO_Init+0x114>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <MX_GPIO_Init+0x114>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <MX_GPIO_Init+0x114>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <MX_GPIO_Init+0x114>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b29      	ldr	r3, [pc, #164]	; (80018ec <MX_GPIO_Init+0x114>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a28      	ldr	r2, [pc, #160]	; (80018ec <MX_GPIO_Init+0x114>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <MX_GPIO_Init+0x114>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_A_Pin|ON_B_Pin|A4_1_Pin|A3_1_Pin
 800185e:	2200      	movs	r2, #0
 8001860:	f641 7106 	movw	r1, #7942	; 0x1f06
 8001864:	4822      	ldr	r0, [pc, #136]	; (80018f0 <MX_GPIO_Init+0x118>)
 8001866:	f002 fe89 	bl	800457c <HAL_GPIO_WritePin>
                          |A2_1_Pin|A1_1_Pin|A0_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A7_1_Pin|A6_1_Pin|A5_1_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001870:	4820      	ldr	r0, [pc, #128]	; (80018f4 <MX_GPIO_Init+0x11c>)
 8001872:	f002 fe83 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ON_A_Pin|ON_B_Pin|A4_1_Pin|A3_1_Pin
 8001876:	f641 7306 	movw	r3, #7942	; 0x1f06
 800187a:	617b      	str	r3, [r7, #20]
                          |A2_1_Pin|A1_1_Pin|A0_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4818      	ldr	r0, [pc, #96]	; (80018f0 <MX_GPIO_Init+0x118>)
 8001890:	f002 fcc0 	bl	8004214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Pin;
 8001894:	2310      	movs	r3, #16
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4812      	ldr	r0, [pc, #72]	; (80018f0 <MX_GPIO_Init+0x118>)
 80018a8:	f002 fcb4 	bl	8004214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = A7_1_Pin|A6_1_Pin|A5_1_Pin;
 80018ac:	f44f 7360 	mov.w	r3, #896	; 0x380
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <MX_GPIO_Init+0x11c>)
 80018c6:	f002 fca5 	bl	8004214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = C1_1_Pin|C1_2_Pin|C1_3_Pin;
 80018ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_GPIO_Init+0x11c>)
 80018e0:	f002 fc98 	bl	8004214 <HAL_GPIO_Init>

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	; 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020800 	.word	0x40020800

080018f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018fc:	f000 fc8c 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001900:	f000 f824 	bl	800194c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001904:	f7ff ff68 	bl	80017d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001908:	f7ff f9b6 	bl	8000c78 <MX_ADC1_Init>
  MX_CAN2_Init();
 800190c:	f7ff fb96 	bl	800103c <MX_CAN2_Init>
  MX_DMA_Init();
 8001910:	f7ff fc58 	bl	80011c4 <MX_DMA_Init>
  MX_TIM3_Init();
 8001914:	f000 f9b8 	bl	8001c88 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001918:	f000 fa4c 	bl	8001db4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800191c:	f000 fac0 	bl	8001ea0 <MX_TIM5_Init>
  MX_ADC2_Init();
 8001920:	f7ff fa34 	bl	8000d8c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  GetInfo();//состояние джамперов кода места
 8001924:	f7fe fe9e 	bl	8000664 <GetInfo>
	HAL_CAN_Start(&hcan2);
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <main+0x50>)
 800192a:	f001 faf5 	bl	8002f18 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_ERROR|CAN_IT_BUSOFF|CAN_IT_LAST_ERROR_CODE);
 800192e:	f648 4102 	movw	r1, #35842	; 0x8c02
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <main+0x50>)
 8001934:	f001 fd56 	bl	80033e4 <HAL_CAN_ActivateNotification>
	//HAL_ADC_Start_DMA(&hadc1, ADCResultBuff, 2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001938:	f005 f878 	bl	8006a2c <osKernelInitialize>
  MX_FREERTOS_Init();
 800193c:	f7ff fc88 	bl	8001250 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001940:	f005 f898 	bl	8006a74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001944:	e7fe      	b.n	8001944 <main+0x4c>
 8001946:	bf00      	nop
 8001948:	20004c8c 	.word	0x20004c8c

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b094      	sub	sp, #80	; 0x50
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	f107 0320 	add.w	r3, r7, #32
 8001956:	2230      	movs	r2, #48	; 0x30
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f007 fe12 	bl	8009584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <SystemClock_Config+0xc8>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <SystemClock_Config+0xc8>)
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <SystemClock_Config+0xc8>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <SystemClock_Config+0xcc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a20      	ldr	r2, [pc, #128]	; (8001a18 <SystemClock_Config+0xcc>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <SystemClock_Config+0xcc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b2:	2302      	movs	r3, #2
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80019bc:	2302      	movs	r3, #2
 80019be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80019c0:	2360      	movs	r3, #96	; 0x60
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019c8:	2304      	movs	r3, #4
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fded 	bl	80045b0 <HAL_RCC_OscConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019dc:	f000 f852 	bl	8001a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e0:	230f      	movs	r3, #15
 80019e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2101      	movs	r1, #1
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 f84f 	bl	8004aa0 <HAL_RCC_ClockConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a08:	f000 f83c 	bl	8001a84 <Error_Handler>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3750      	adds	r7, #80	; 0x50
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000

08001a1c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	uint8_t CanRxBuff[8] = {0,};
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,CanRxBuff)==HAL_OK)
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001a32:	2100      	movs	r1, #0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f001 fbc3 	bl	80031c0 <HAL_CAN_GetRxMessage>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d107      	bne.n	8001a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	{
		InterputDataCanProt(RxHeader.StdId,&CanRxBuff,&DevData);
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f107 0108 	add.w	r1, r7, #8
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd3c 	bl	80004c8 <InterputDataCanProt>

	}
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20004cec 	.word	0x20004cec
 8001a5c:	20004a7c 	.word	0x20004a7c

08001a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a72:	f000 fbf3 	bl	800225c <HAL_IncTick>
        HAL_TIM_Base_Stop_IT(&htim5);
*/

  }
  /* USER CODE END Callback 1 */
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40010000 	.word	0x40010000

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <Error_Handler+0x8>
	...

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_MspInit+0x54>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_MspInit+0x54>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x54>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_MspInit+0x54>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_MspInit+0x54>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_MspInit+0x54>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	f06f 0001 	mvn.w	r0, #1
 8001ad6:	f001 ff93 	bl	8003a00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	2019      	movs	r0, #25
 8001afe:	f001 ff7f 	bl	8003a00 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b02:	2019      	movs	r0, #25
 8001b04:	f001 ff98 	bl	8003a38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_InitTick+0xa0>)
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_InitTick+0xa0>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6453      	str	r3, [r2, #68]	; 0x44
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_InitTick+0xa0>)
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b24:	f107 0210 	add.w	r2, r7, #16
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 f99e 	bl	8004e70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b34:	f003 f988 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 8001b38:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_InitTick+0xa4>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	3b01      	subs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_InitTick+0xa8>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_InitTick+0xac>)
 8001b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_InitTick+0xa8>)
 8001b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_InitTick+0xa8>)
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_InitTick+0xa8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_InitTick+0xa8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <HAL_InitTick+0xa8>)
 8001b6a:	f003 f9b3 	bl	8004ed4 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b74:	4806      	ldr	r0, [pc, #24]	; (8001b90 <HAL_InitTick+0xa8>)
 8001b76:	f003 f9fd 	bl	8004f74 <HAL_TIM_Base_Start_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3730      	adds	r7, #48	; 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	20004d08 	.word	0x20004d08
 8001b94:	40010000 	.word	0x40010000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <DMA1_Stream0_IRQHandler+0x10>)
 8001bca:	f002 f8b9 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20004e88 	.word	0x20004e88

08001bd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <DMA1_Stream5_IRQHandler+0x10>)
 8001bde:	f002 f8af 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20004e28 	.word	0x20004e28

08001bec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bf2:	f003 ff47 	bl	8005a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20004d08 	.word	0x20004d08

08001c00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <TIM5_IRQHandler+0x10>)
 8001c06:	f003 ff3d 	bl	8005a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20004d98 	.word	0x20004d98

08001c14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <DMA2_Stream0_IRQHandler+0x10>)
 8001c1a:	f002 f891 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20004ba4 	.word	0x20004ba4

08001c28 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <DMA2_Stream2_IRQHandler+0x10>)
 8001c2e:	f002 f887 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20004c04 	.word	0x20004c04

08001c3c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <CAN2_RX0_IRQHandler+0x10>)
 8001c42:	f001 fbf5 	bl	8003430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20004c8c 	.word	0x20004c8c

08001c50 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <CAN2_RX1_IRQHandler+0x10>)
 8001c56:	f001 fbeb 	bl	8003430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20004c8c 	.word	0x20004c8c

08001c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch2;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb8:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <MX_TIM3_Init+0x124>)
 8001cba:	4a3d      	ldr	r2, [pc, #244]	; (8001db0 <MX_TIM3_Init+0x128>)
 8001cbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <MX_TIM3_Init+0x124>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc4:	4b39      	ldr	r3, [pc, #228]	; (8001dac <MX_TIM3_Init+0x124>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 480;
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <MX_TIM3_Init+0x124>)
 8001ccc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <MX_TIM3_Init+0x124>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <MX_TIM3_Init+0x124>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cde:	4833      	ldr	r0, [pc, #204]	; (8001dac <MX_TIM3_Init+0x124>)
 8001ce0:	f003 f8f8 	bl	8004ed4 <HAL_TIM_Base_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001cea:	f7ff fecb 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	482c      	ldr	r0, [pc, #176]	; (8001dac <MX_TIM3_Init+0x124>)
 8001cfc:	f004 f8e8 	bl	8005ed0 <HAL_TIM_ConfigClockSource>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d06:	f7ff febd 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001d0a:	4828      	ldr	r0, [pc, #160]	; (8001dac <MX_TIM3_Init+0x124>)
 8001d0c:	f003 f9a2 	bl	8005054 <HAL_TIM_OC_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d16:	f7ff feb5 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d1a:	4824      	ldr	r0, [pc, #144]	; (8001dac <MX_TIM3_Init+0x124>)
 8001d1c:	f003 fbc8 	bl	80054b0 <HAL_TIM_PWM_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001d26:	f7ff fead 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	4619      	mov	r1, r3
 8001d38:	481c      	ldr	r0, [pc, #112]	; (8001dac <MX_TIM3_Init+0x124>)
 8001d3a:	f004 fda3 	bl	8006884 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001d44:	f7ff fe9e 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 240;
 8001d4c:	23f0      	movs	r3, #240	; 0xf0
 8001d4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4813      	ldr	r0, [pc, #76]	; (8001dac <MX_TIM3_Init+0x124>)
 8001d60:	f003 ff98 	bl	8005c94 <HAL_TIM_OC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001d6a:	f7ff fe8b 	bl	8001a84 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_TIM3_Init+0x124>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <MX_TIM3_Init+0x124>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0208 	orr.w	r2, r2, #8
 8001d7c:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7e:	2360      	movs	r3, #96	; 0x60
 8001d80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 48;
 8001d82:	2330      	movs	r3, #48	; 0x30
 8001d84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2204      	movs	r2, #4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_TIM3_Init+0x124>)
 8001d8e:	f003 ffdd 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM3_Init+0x114>
  {
    Error_Handler();
 8001d98:	f7ff fe74 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <MX_TIM3_Init+0x124>)
 8001d9e:	f000 f9b1 	bl	8002104 <HAL_TIM_MspPostInit>

}
 8001da2:	bf00      	nop
 8001da4:	3738      	adds	r7, #56	; 0x38
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20004de0 	.word	0x20004de0
 8001db0:	40000400 	.word	0x40000400

08001db4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001de6:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 480;
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001df8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e0a:	4823      	ldr	r0, [pc, #140]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001e0c:	f003 f862 	bl	8004ed4 <HAL_TIM_Base_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e16:	f7ff fe35 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e24:	4619      	mov	r1, r3
 8001e26:	481c      	ldr	r0, [pc, #112]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001e28:	f004 f852 	bl	8005ed0 <HAL_TIM_ConfigClockSource>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e32:	f7ff fe27 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e36:	4818      	ldr	r0, [pc, #96]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001e38:	f003 fb3a 	bl	80054b0 <HAL_TIM_PWM_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e42:	f7ff fe1f 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e46:	2320      	movs	r3, #32
 8001e48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	4619      	mov	r1, r3
 8001e54:	4810      	ldr	r0, [pc, #64]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001e56:	f004 fd15 	bl	8006884 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e60:	f7ff fe10 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e64:	2360      	movs	r3, #96	; 0x60
 8001e66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 48;
 8001e68:	2330      	movs	r3, #48	; 0x30
 8001e6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001e7c:	f003 ff66 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e86:	f7ff fdfd 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM4_Init+0xe4>)
 8001e8c:	f000 f93a 	bl	8002104 <HAL_TIM_MspPostInit>

}
 8001e90:	bf00      	nop
 8001e92:	3738      	adds	r7, #56	; 0x38
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20004d50 	.word	0x20004d50
 8001e9c:	40000800 	.word	0x40000800

08001ea0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	f107 0320 	add.w	r3, r7, #32
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	615a      	str	r2, [r3, #20]
 8001ece:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001ed2:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <MX_TIM5_Init+0xe4>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400;
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001ee4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ee8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ef6:	4822      	ldr	r0, [pc, #136]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001ef8:	f002 ffec 	bl	8004ed4 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001f02:	f7ff fdbf 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f10:	4619      	mov	r1, r3
 8001f12:	481b      	ldr	r0, [pc, #108]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001f14:	f003 ffdc 	bl	8005ed0 <HAL_TIM_ConfigClockSource>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001f1e:	f7ff fdb1 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001f22:	4817      	ldr	r0, [pc, #92]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001f24:	f003 f896 	bl	8005054 <HAL_TIM_OC_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001f2e:	f7ff fda9 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f3a:	f107 0320 	add.w	r3, r7, #32
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480f      	ldr	r0, [pc, #60]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001f42:	f004 fc9f 	bl	8006884 <HAL_TIMEx_MasterConfigSynchronization>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001f4c:	f7ff fd9a 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001f50:	2330      	movs	r3, #48	; 0x30
 8001f52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 190;
 8001f54:	23be      	movs	r3, #190	; 0xbe
 8001f56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2200      	movs	r2, #0
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	; (8001f80 <MX_TIM5_Init+0xe0>)
 8001f68:	f003 fe94 	bl	8005c94 <HAL_TIM_OC_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001f72:	f7ff fd87 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	3738      	adds	r7, #56	; 0x38
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20004d98 	.word	0x20004d98
 8001f84:	40000c00 	.word	0x40000c00

08001f88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a53      	ldr	r2, [pc, #332]	; (80020e4 <HAL_TIM_Base_MspInit+0x15c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d13f      	bne.n	800201a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	4b52      	ldr	r3, [pc, #328]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a51      	ldr	r2, [pc, #324]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8001fb6:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001fb8:	4a4d      	ldr	r2, [pc, #308]	; (80020f0 <HAL_TIM_Base_MspInit+0x168>)
 8001fba:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001fbe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001fc2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc4:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fca:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001fd0:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fd8:	4b44      	ldr	r3, [pc, #272]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001fda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fde:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8001fe8:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fee:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001ffc:	483b      	ldr	r0, [pc, #236]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8001ffe:	f001 fd29 	bl	8003a54 <HAL_DMA_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002008:	f7ff fd3c 	bl	8001a84 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a37      	ldr	r2, [pc, #220]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
 8002012:	4a36      	ldr	r2, [pc, #216]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002018:	e05f      	b.n	80020da <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM4)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a35      	ldr	r2, [pc, #212]	; (80020f4 <HAL_TIM_Base_MspInit+0x16c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d13f      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a2e      	ldr	r2, [pc, #184]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
 8002034:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 8002042:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <HAL_TIM_Base_MspInit+0x174>)
 8002044:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 8002048:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800204c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 800205c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002060:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 8002064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002068:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 800206c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002070:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 8002074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002078:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002086:	481c      	ldr	r0, [pc, #112]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 8002088:	f001 fce4 	bl	8003a54 <HAL_DMA_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 8002092:	f7ff fcf7 	bl	8001a84 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_TIM_Base_MspInit+0x170>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020a2:	e01a      	b.n	80020da <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM5)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_TIM_Base_MspInit+0x178>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d115      	bne.n	80020da <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2105      	movs	r1, #5
 80020ce:	2032      	movs	r0, #50	; 0x32
 80020d0:	f001 fc96 	bl	8003a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020d4:	2032      	movs	r0, #50	; 0x32
 80020d6:	f001 fcaf 	bl	8003a38 <HAL_NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40023800 	.word	0x40023800
 80020ec:	20004e28 	.word	0x20004e28
 80020f0:	40026088 	.word	0x40026088
 80020f4:	40000800 	.word	0x40000800
 80020f8:	20004e88 	.word	0x20004e88
 80020fc:	40026010 	.word	0x40026010
 8002100:	40000c00 	.word	0x40000c00

08002104 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_TIM_MspPostInit+0xb0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d11e      	bne.n	8002164 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_TIM_MspPostInit+0xb4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_TIM_MspPostInit+0xb4>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_TIM_MspPostInit+0xb4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SINC_B_Pin;
 8002142:	2320      	movs	r3, #32
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002152:	2302      	movs	r3, #2
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SINC_B_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4817      	ldr	r0, [pc, #92]	; (80021bc <HAL_TIM_MspPostInit+0xb8>)
 800215e:	f002 f859 	bl	8004214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002162:	e022      	b.n	80021aa <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_TIM_MspPostInit+0xbc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d11d      	bne.n	80021aa <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_TIM_MspPostInit+0xb4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <HAL_TIM_MspPostInit+0xb4>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_TIM_MspPostInit+0xb4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SINC_A_Pin;
 800218a:	2340      	movs	r3, #64	; 0x40
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800219a:	2302      	movs	r3, #2
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SINC_A_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_TIM_MspPostInit+0xb8>)
 80021a6:	f002 f835 	bl	8004214 <HAL_GPIO_Init>
}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40000800 	.word	0x40000800

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021cc:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e0:	4c0b      	ldr	r4, [pc, #44]	; (8002210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ee:	f7ff fd39 	bl	8001c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f007 f993 	bl	800951c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7ff fb7f 	bl	80018f8 <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002208:	08009910 	.word	0x08009910
  ldr r2, =_sbss
 800220c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002210:	20004f38 	.word	0x20004f38

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_Init+0x40>)
 8002222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_Init+0x40>)
 800222e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_Init+0x40>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f001 fbd2 	bl	80039ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	200f      	movs	r0, #15
 8002248:	f7ff fc4e 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff fc20 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023c00 	.word	0x40023c00

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008
 8002280:	20004ee8 	.word	0x20004ee8

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20004ee8 	.word	0x20004ee8

0800229c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e033      	b.n	800231a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fde2 	bl	8000e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e2:	f023 0302 	bic.w	r3, r3, #2
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fab8 	bl	8002864 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
 800230a:	e001      	b.n	8002310 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_ADC_Start_DMA+0x1e>
 800233e:	2302      	movs	r3, #2
 8002340:	e0e9      	b.n	8002516 <HAL_ADC_Start_DMA+0x1f2>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d018      	beq.n	800238a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002368:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_ADC_Start_DMA+0x1fc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6d      	ldr	r2, [pc, #436]	; (8002524 <HAL_ADC_Start_DMA+0x200>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0c9a      	lsrs	r2, r3, #18
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800237c:	e002      	b.n	8002384 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3b01      	subs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002398:	d107      	bne.n	80023aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	f040 80a1 	bne.w	80024fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f8:	d106      	bne.n	8002408 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f023 0206 	bic.w	r2, r3, #6
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
 8002406:	e002      	b.n	800240e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002416:	4b44      	ldr	r3, [pc, #272]	; (8002528 <HAL_ADC_Start_DMA+0x204>)
 8002418:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	4a43      	ldr	r2, [pc, #268]	; (800252c <HAL_ADC_Start_DMA+0x208>)
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a42      	ldr	r2, [pc, #264]	; (8002530 <HAL_ADC_Start_DMA+0x20c>)
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	4a41      	ldr	r2, [pc, #260]	; (8002534 <HAL_ADC_Start_DMA+0x210>)
 8002430:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800243a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800244a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	334c      	adds	r3, #76	; 0x4c
 8002466:	4619      	mov	r1, r3
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f001 fba0 	bl	8003bb0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	2b00      	cmp	r3, #0
 800247a:	d12a      	bne.n	80024d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <HAL_ADC_Start_DMA+0x214>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d015      	beq.n	80024b2 <HAL_ADC_Start_DMA+0x18e>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2c      	ldr	r2, [pc, #176]	; (800253c <HAL_ADC_Start_DMA+0x218>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d105      	bne.n	800249c <HAL_ADC_Start_DMA+0x178>
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_ADC_Start_DMA+0x204>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a27      	ldr	r2, [pc, #156]	; (8002540 <HAL_ADC_Start_DMA+0x21c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d136      	bne.n	8002514 <HAL_ADC_Start_DMA+0x1f0>
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_ADC_Start_DMA+0x204>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d130      	bne.n	8002514 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d129      	bne.n	8002514 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e020      	b.n	8002514 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_ADC_Start_DMA+0x214>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d11b      	bne.n	8002514 <HAL_ADC_Start_DMA+0x1f0>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d114      	bne.n	8002514 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	e00b      	b.n	8002514 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f043 0210 	orr.w	r2, r3, #16
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000
 8002524:	431bde83 	.word	0x431bde83
 8002528:	40012300 	.word	0x40012300
 800252c:	08002a5d 	.word	0x08002a5d
 8002530:	08002b17 	.word	0x08002b17
 8002534:	08002b33 	.word	0x08002b33
 8002538:	40012000 	.word	0x40012000
 800253c:	40012100 	.word	0x40012100
 8002540:	40012200 	.word	0x40012200

08002544 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_ADC_Stop_DMA+0x1a>
 800255a:	2302      	movs	r3, #2
 800255c:	e048      	b.n	80025f0 <HAL_ADC_Stop_DMA+0xac>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d130      	bne.n	80025e6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002592:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d10f      	bne.n	80025c2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fb5a 	bl	8003c60 <HAL_DMA_Abort>
 80025ac:	4603      	mov	r3, r0
 80025ae:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80025d0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1c>
 8002638:	2302      	movs	r3, #2
 800263a:	e105      	b.n	8002848 <HAL_ADC_ConfigChannel+0x228>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b09      	cmp	r3, #9
 800264a:	d925      	bls.n	8002698 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68d9      	ldr	r1, [r3, #12]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	3b1e      	subs	r3, #30
 8002662:	2207      	movs	r2, #7
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43da      	mvns	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	400a      	ands	r2, r1
 8002670:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68d9      	ldr	r1, [r3, #12]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	4618      	mov	r0, r3
 8002684:	4603      	mov	r3, r0
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4403      	add	r3, r0
 800268a:	3b1e      	subs	r3, #30
 800268c:	409a      	lsls	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	e022      	b.n	80026de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	2207      	movs	r2, #7
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	400a      	ands	r2, r1
 80026ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4403      	add	r3, r0
 80026d4:	409a      	lsls	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d824      	bhi.n	8002730 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	3b05      	subs	r3, #5
 80026f8:	221f      	movs	r2, #31
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	400a      	ands	r2, r1
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b05      	subs	r3, #5
 8002722:	fa00 f203 	lsl.w	r2, r0, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
 800272e:	e04c      	b.n	80027ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d824      	bhi.n	8002782 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	3b23      	subs	r3, #35	; 0x23
 800274a:	221f      	movs	r2, #31
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	400a      	ands	r2, r1
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b23      	subs	r3, #35	; 0x23
 8002774:	fa00 f203 	lsl.w	r2, r0, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
 8002780:	e023      	b.n	80027ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3b41      	subs	r3, #65	; 0x41
 8002794:	221f      	movs	r2, #31
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	400a      	ands	r2, r1
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	3b41      	subs	r3, #65	; 0x41
 80027be:	fa00 f203 	lsl.w	r2, r0, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_ADC_ConfigChannel+0x234>)
 80027cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_ADC_ConfigChannel+0x238>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d109      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1cc>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b12      	cmp	r3, #18
 80027de:	d105      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_ADC_ConfigChannel+0x238>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d123      	bne.n	800283e <HAL_ADC_ConfigChannel+0x21e>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d003      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x1e6>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b11      	cmp	r3, #17
 8002804:	d11b      	bne.n	800283e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b10      	cmp	r3, #16
 8002818:	d111      	bne.n	800283e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_ADC_ConfigChannel+0x23c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_ADC_ConfigChannel+0x240>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	0c9a      	lsrs	r2, r3, #18
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002830:	e002      	b.n	8002838 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3b01      	subs	r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40012300 	.word	0x40012300
 8002858:	40012000 	.word	0x40012000
 800285c:	20000000 	.word	0x20000000
 8002860:	431bde83 	.word	0x431bde83

08002864 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286c:	4b79      	ldr	r3, [pc, #484]	; (8002a54 <ADC_Init+0x1f0>)
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	021a      	lsls	r2, r3, #8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6899      	ldr	r1, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <ADC_Init+0x1f4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d022      	beq.n	8002942 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800290a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800292c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	e00f      	b.n	8002962 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002960:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0202 	bic.w	r2, r2, #2
 8002970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6899      	ldr	r1, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7e1b      	ldrb	r3, [r3, #24]
 800297c:	005a      	lsls	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	3b01      	subs	r3, #1
 80029bc:	035a      	lsls	r2, r3, #13
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e007      	b.n	80029d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	051a      	lsls	r2, r3, #20
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a1a:	025a      	lsls	r2, r3, #9
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6899      	ldr	r1, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	029a      	lsls	r2, r3, #10
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40012300 	.word	0x40012300
 8002a58:	0f000001 	.word	0x0f000001

08002a5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d13c      	bne.n	8002af0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d12b      	bne.n	8002ae8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d127      	bne.n	8002ae8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d119      	bne.n	8002ae8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0220 	bic.w	r2, r2, #32
 8002ac2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7fe fe4f 	bl	800178c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002aee:	e00e      	b.n	8002b0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff fd85 	bl	800260c <HAL_ADC_ErrorCallback>
}
 8002b02:	e004      	b.n	8002b0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff fd67 	bl	80025f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff fd5a 	bl	800260c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0ed      	b.n	8002d4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe faba 	bl	80010f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b94:	f7ff fb76 	bl	8002284 <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b9a:	e012      	b.n	8002bc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b9c:	f7ff fb72 	bl	8002284 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b0a      	cmp	r3, #10
 8002ba8:	d90b      	bls.n	8002bc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2205      	movs	r2, #5
 8002bba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0c5      	b.n	8002d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0e5      	beq.n	8002b9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0202 	bic.w	r2, r2, #2
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be0:	f7ff fb50 	bl	8002284 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002be6:	e012      	b.n	8002c0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002be8:	f7ff fb4c 	bl	8002284 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b0a      	cmp	r3, #10
 8002bf4:	d90b      	bls.n	8002c0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2205      	movs	r2, #5
 8002c06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e09f      	b.n	8002d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e5      	bne.n	8002be8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7e1b      	ldrb	r3, [r3, #24]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d108      	bne.n	8002c36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e007      	b.n	8002c46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7e5b      	ldrb	r3, [r3, #25]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d108      	bne.n	8002c60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e007      	b.n	8002c70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7e9b      	ldrb	r3, [r3, #26]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d108      	bne.n	8002c8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e007      	b.n	8002c9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0220 	bic.w	r2, r2, #32
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7edb      	ldrb	r3, [r3, #27]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d108      	bne.n	8002cb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0210 	bic.w	r2, r2, #16
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e007      	b.n	8002cc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0210 	orr.w	r2, r2, #16
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7f1b      	ldrb	r3, [r3, #28]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d108      	bne.n	8002cde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0208 	orr.w	r2, r2, #8
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e007      	b.n	8002cee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0208 	bic.w	r2, r2, #8
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7f5b      	ldrb	r3, [r3, #29]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d108      	bne.n	8002d08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0204 	orr.w	r2, r2, #4
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e007      	b.n	8002d18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d003      	beq.n	8002d7e <HAL_CAN_ConfigFilter+0x26>
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	f040 80be 	bne.w	8002efa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002d7e:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <HAL_CAN_ConfigFilter+0x1bc>)
 8002d80:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	431a      	orrs	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d123      	bne.n	8002e28 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e02:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3248      	adds	r2, #72	; 0x48
 8002e08:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	3348      	adds	r3, #72	; 0x48
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d122      	bne.n	8002e76 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3248      	adds	r2, #72	; 0x48
 8002e56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e6c:	6979      	ldr	r1, [r7, #20]
 8002e6e:	3348      	adds	r3, #72	; 0x48
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e90:	e007      	b.n	8002ea2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ebc:	e007      	b.n	8002ece <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eec:	f023 0201 	bic.w	r2, r3, #1
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e006      	b.n	8002f08 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40006400 	.word	0x40006400

08002f18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d12e      	bne.n	8002f8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f44:	f7ff f99e 	bl	8002284 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f4a:	e012      	b.n	8002f72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f4c:	f7ff f99a 	bl	8002284 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b0a      	cmp	r3, #10
 8002f58:	d90b      	bls.n	8002f72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2205      	movs	r2, #5
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e012      	b.n	8002f98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e5      	bne.n	8002f4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e006      	b.n	8002f98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
  }
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d003      	beq.n	8002fcc <HAL_CAN_AddTxMessage+0x2c>
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	f040 80b8 	bne.w	800313c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80a0 	beq.w	800312c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	0e1b      	lsrs	r3, r3, #24
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d907      	bls.n	800300c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e09e      	b.n	800314a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800300c:	2201      	movs	r2, #1
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	409a      	lsls	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	6809      	ldr	r1, [r1, #0]
 800302c:	431a      	orrs	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3318      	adds	r3, #24
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	440b      	add	r3, r1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e00f      	b.n	800305a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003044:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800304e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3318      	adds	r3, #24
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	440b      	add	r3, r1
 8003058:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3318      	adds	r3, #24
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	440b      	add	r3, r1
 800306a:	3304      	adds	r3, #4
 800306c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	7d1b      	ldrb	r3, [r3, #20]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d111      	bne.n	800309a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3318      	adds	r3, #24
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	6811      	ldr	r1, [r2, #0]
 800308a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3318      	adds	r3, #24
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	440b      	add	r3, r1
 8003096:	3304      	adds	r3, #4
 8003098:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3307      	adds	r3, #7
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	061a      	lsls	r2, r3, #24
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3306      	adds	r3, #6
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3305      	adds	r3, #5
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	4313      	orrs	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	3204      	adds	r2, #4
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	4610      	mov	r0, r2
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	6811      	ldr	r1, [r2, #0]
 80030c2:	ea43 0200 	orr.w	r2, r3, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	440b      	add	r3, r1
 80030cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3303      	adds	r3, #3
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	061a      	lsls	r2, r3, #24
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3302      	adds	r3, #2
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3301      	adds	r3, #1
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	4313      	orrs	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	4610      	mov	r0, r2
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	6811      	ldr	r1, [r2, #0]
 80030f8:	ea43 0200 	orr.w	r2, r3, r0
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	440b      	add	r3, r1
 8003102:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003106:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3318      	adds	r3, #24
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	6811      	ldr	r1, [r2, #0]
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3318      	adds	r3, #24
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	440b      	add	r3, r1
 8003126:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e00e      	b.n	800314a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e006      	b.n	800314a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003168:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800316a:	7afb      	ldrb	r3, [r7, #11]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d002      	beq.n	8003176 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003170:	7afb      	ldrb	r3, [r7, #11]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d11d      	bne.n	80031b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3301      	adds	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3301      	adds	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d003      	beq.n	80031e4 <HAL_CAN_GetRxMessage+0x24>
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	f040 80f3 	bne.w	80033ca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10e      	bne.n	8003208 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0e7      	b.n	80033d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0d8      	b.n	80033d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	331b      	adds	r3, #27
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	4413      	add	r3, r2
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0204 	and.w	r2, r3, #4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10c      	bne.n	800325e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	331b      	adds	r3, #27
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4413      	add	r3, r2
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0d5b      	lsrs	r3, r3, #21
 8003254:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e00b      	b.n	8003276 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	331b      	adds	r3, #27
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	331b      	adds	r3, #27
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4413      	add	r3, r2
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0202 	and.w	r2, r3, #2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	331b      	adds	r3, #27
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	4413      	add	r3, r2
 8003298:	3304      	adds	r3, #4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	331b      	adds	r3, #27
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	331b      	adds	r3, #27
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0a1a      	lsrs	r2, r3, #8
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4413      	add	r3, r2
 800330e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0c1a      	lsrs	r2, r3, #16
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	3302      	adds	r3, #2
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	4413      	add	r3, r2
 8003328:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0e1a      	lsrs	r2, r3, #24
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	3303      	adds	r3, #3
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4413      	add	r3, r2
 8003342:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	3304      	adds	r3, #4
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	4413      	add	r3, r2
 800335a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0a1a      	lsrs	r2, r3, #8
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	3305      	adds	r3, #5
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	4413      	add	r3, r2
 8003374:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0c1a      	lsrs	r2, r3, #16
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	3306      	adds	r3, #6
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	4413      	add	r3, r2
 800338e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0e1a      	lsrs	r2, r3, #24
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	3307      	adds	r3, #7
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d108      	bne.n	80033b6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0220 	orr.w	r2, r2, #32
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	e007      	b.n	80033c6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0220 	orr.w	r2, r2, #32
 80033c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e006      	b.n	80033d8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d002      	beq.n	8003402 <HAL_CAN_ActivateNotification+0x1e>
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d109      	bne.n	8003416 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6959      	ldr	r1, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	e006      	b.n	8003424 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003438:	2300      	movs	r3, #0
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d07c      	beq.n	8003570 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d023      	beq.n	80034c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2201      	movs	r2, #1
 8003486:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f983 	bl	800379e <HAL_CAN_TxMailbox0CompleteCallback>
 8003498:	e016      	b.n	80034c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d004      	beq.n	80034ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	e00c      	b.n	80034c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	e002      	b.n	80034c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f989 	bl	80037da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d024      	beq.n	800351c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f963 	bl	80037b2 <HAL_CAN_TxMailbox1CompleteCallback>
 80034ec:	e016      	b.n	800351c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	e00c      	b.n	800351c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	e002      	b.n	800351c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f969 	bl	80037ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d024      	beq.n	8003570 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800352e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f943 	bl	80037c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003540:	e016      	b.n	8003570 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	e00c      	b.n	8003570 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	e002      	b.n	8003570 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f949 	bl	8003802 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00c      	beq.n	8003594 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800358a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2210      	movs	r2, #16
 8003592:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d006      	beq.n	80035b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2208      	movs	r2, #8
 80035ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f930 	bl	8003816 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fa24 	bl	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2210      	movs	r2, #16
 80035f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f912 	bl	800383e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8f9 	bl	800382a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2210      	movs	r2, #16
 8003652:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8fc 	bl	8003852 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2208      	movs	r2, #8
 8003674:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f8f5 	bl	8003866 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d07b      	beq.n	800377e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d072      	beq.n	8003776 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d043      	beq.n	8003776 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d03e      	beq.n	8003776 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036fe:	2b60      	cmp	r3, #96	; 0x60
 8003700:	d02b      	beq.n	800375a <HAL_CAN_IRQHandler+0x32a>
 8003702:	2b60      	cmp	r3, #96	; 0x60
 8003704:	d82e      	bhi.n	8003764 <HAL_CAN_IRQHandler+0x334>
 8003706:	2b50      	cmp	r3, #80	; 0x50
 8003708:	d022      	beq.n	8003750 <HAL_CAN_IRQHandler+0x320>
 800370a:	2b50      	cmp	r3, #80	; 0x50
 800370c:	d82a      	bhi.n	8003764 <HAL_CAN_IRQHandler+0x334>
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d019      	beq.n	8003746 <HAL_CAN_IRQHandler+0x316>
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d826      	bhi.n	8003764 <HAL_CAN_IRQHandler+0x334>
 8003716:	2b30      	cmp	r3, #48	; 0x30
 8003718:	d010      	beq.n	800373c <HAL_CAN_IRQHandler+0x30c>
 800371a:	2b30      	cmp	r3, #48	; 0x30
 800371c:	d822      	bhi.n	8003764 <HAL_CAN_IRQHandler+0x334>
 800371e:	2b10      	cmp	r3, #16
 8003720:	d002      	beq.n	8003728 <HAL_CAN_IRQHandler+0x2f8>
 8003722:	2b20      	cmp	r3, #32
 8003724:	d005      	beq.n	8003732 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003726:	e01d      	b.n	8003764 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	f043 0308 	orr.w	r3, r3, #8
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003730:	e019      	b.n	8003766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800373a:	e014      	b.n	8003766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	f043 0320 	orr.w	r3, r3, #32
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003744:	e00f      	b.n	8003766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800374e:	e00a      	b.n	8003766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003758:	e005      	b.n	8003766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003762:	e000      	b.n	8003766 <HAL_CAN_IRQHandler+0x336>
            break;
 8003764:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003774:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2204      	movs	r2, #4
 800377c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f872 	bl	800387a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003796:	bf00      	nop
 8003798:	3728      	adds	r7, #40	; 0x28
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <__NVIC_SetPriorityGrouping+0x44>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038ac:	4013      	ands	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038c2:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	60d3      	str	r3, [r2, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <__NVIC_GetPriorityGrouping+0x18>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	f003 0307 	and.w	r3, r3, #7
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	2b00      	cmp	r3, #0
 8003904:	db0b      	blt.n	800391e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	4907      	ldr	r1, [pc, #28]	; (800392c <__NVIC_EnableIRQ+0x38>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2001      	movs	r0, #1
 8003916:	fa00 f202 	lsl.w	r2, r0, r2
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e100 	.word	0xe000e100

08003930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	2b00      	cmp	r3, #0
 8003942:	db0a      	blt.n	800395a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	490c      	ldr	r1, [pc, #48]	; (800397c <__NVIC_SetPriority+0x4c>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	0112      	lsls	r2, r2, #4
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	440b      	add	r3, r1
 8003954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003958:	e00a      	b.n	8003970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4908      	ldr	r1, [pc, #32]	; (8003980 <__NVIC_SetPriority+0x50>)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	3b04      	subs	r3, #4
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	440b      	add	r3, r1
 800396e:	761a      	strb	r2, [r3, #24]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000e100 	.word	0xe000e100
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f1c3 0307 	rsb	r3, r3, #7
 800399e:	2b04      	cmp	r3, #4
 80039a0:	bf28      	it	cs
 80039a2:	2304      	movcs	r3, #4
 80039a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3304      	adds	r3, #4
 80039aa:	2b06      	cmp	r3, #6
 80039ac:	d902      	bls.n	80039b4 <NVIC_EncodePriority+0x30>
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3b03      	subs	r3, #3
 80039b2:	e000      	b.n	80039b6 <NVIC_EncodePriority+0x32>
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	401a      	ands	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039cc:	f04f 31ff 	mov.w	r1, #4294967295
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	43d9      	mvns	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039dc:	4313      	orrs	r3, r2
         );
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3724      	adds	r7, #36	; 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ff4c 	bl	8003890 <__NVIC_SetPriorityGrouping>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a12:	f7ff ff61 	bl	80038d8 <__NVIC_GetPriorityGrouping>
 8003a16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	6978      	ldr	r0, [r7, #20]
 8003a1e:	f7ff ffb1 	bl	8003984 <NVIC_EncodePriority>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff80 	bl	8003930 <__NVIC_SetPriority>
}
 8003a30:	bf00      	nop
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff54 	bl	80038f4 <__NVIC_EnableIRQ>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a60:	f7fe fc10 	bl	8002284 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e099      	b.n	8003ba4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a90:	e00f      	b.n	8003ab2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a92:	f7fe fbf7 	bl	8002284 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d908      	bls.n	8003ab2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e078      	b.n	8003ba4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e8      	bne.n	8003a92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4b38      	ldr	r3, [pc, #224]	; (8003bac <HAL_DMA_Init+0x158>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d107      	bne.n	8003b1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	4313      	orrs	r3, r2
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 0307 	bic.w	r3, r3, #7
 8003b32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d117      	bne.n	8003b76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00e      	beq.n	8003b76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fadf 	bl	800411c <DMA_CheckFifoParam>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b72:	2301      	movs	r3, #1
 8003b74:	e016      	b.n	8003ba4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa96 	bl	80040b0 <DMA_CalcBaseAndBitshift>
 8003b84:	4603      	mov	r3, r0
 8003b86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	223f      	movs	r2, #63	; 0x3f
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	f010803f 	.word	0xf010803f

08003bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_DMA_Start_IT+0x26>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e040      	b.n	8003c58 <HAL_DMA_Start_IT+0xa8>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d12f      	bne.n	8003c4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2202      	movs	r2, #2
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fa28 	bl	8004054 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	223f      	movs	r2, #63	; 0x3f
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0216 	orr.w	r2, r2, #22
 8003c1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0208 	orr.w	r2, r2, #8
 8003c36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e005      	b.n	8003c56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
 8003c54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c6e:	f7fe fb09 	bl	8002284 <HAL_GetTick>
 8003c72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d008      	beq.n	8003c92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e052      	b.n	8003d38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0216 	bic.w	r2, r2, #22
 8003ca0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_DMA_Abort+0x62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0208 	bic.w	r2, r2, #8
 8003cd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce2:	e013      	b.n	8003d0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ce4:	f7fe face 	bl	8002284 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b05      	cmp	r3, #5
 8003cf0:	d90c      	bls.n	8003d0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e015      	b.n	8003d38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e4      	bne.n	8003ce4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1e:	223f      	movs	r2, #63	; 0x3f
 8003d20:	409a      	lsls	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d4c:	4b92      	ldr	r3, [pc, #584]	; (8003f98 <HAL_DMA_IRQHandler+0x258>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a92      	ldr	r2, [pc, #584]	; (8003f9c <HAL_DMA_IRQHandler+0x25c>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01a      	beq.n	8003dac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0204 	bic.w	r2, r2, #4
 8003d92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	2208      	movs	r2, #8
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d012      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	2201      	movs	r2, #1
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f043 0202 	orr.w	r2, r3, #2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	2204      	movs	r2, #4
 8003de8:	409a      	lsls	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d012      	beq.n	8003e18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	2204      	movs	r2, #4
 8003e06:	409a      	lsls	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f043 0204 	orr.w	r2, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d043      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d03c      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d024      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	e01f      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01b      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
 8003e80:	e016      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0208 	bic.w	r2, r2, #8
 8003e9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 808e 	beq.w	8003fde <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8086 	beq.w	8003fde <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d136      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0216 	bic.w	r2, r2, #22
 8003ef8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_DMA_IRQHandler+0x1da>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0208 	bic.w	r2, r2, #8
 8003f28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	223f      	movs	r2, #63	; 0x3f
 8003f30:	409a      	lsls	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d07d      	beq.n	800404a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
        }
        return;
 8003f56:	e078      	b.n	800404a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01c      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d108      	bne.n	8003f86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d030      	beq.n	8003fde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
 8003f84:	e02b      	b.n	8003fde <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d027      	beq.n	8003fde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
 8003f96:	e022      	b.n	8003fde <HAL_DMA_IRQHandler+0x29e>
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10f      	bne.n	8003fce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0210 	bic.w	r2, r2, #16
 8003fbc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d032      	beq.n	800404c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	3301      	adds	r3, #1
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	429a      	cmp	r2, r3
 8004014:	d307      	bcc.n	8004026 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f2      	bne.n	800400a <HAL_DMA_IRQHandler+0x2ca>
 8004024:	e000      	b.n	8004028 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004026:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
 8004048:	e000      	b.n	800404c <HAL_DMA_IRQHandler+0x30c>
        return;
 800404a:	bf00      	nop
    }
  }
}
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop

08004054 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004070:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d108      	bne.n	8004094 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004092:	e007      	b.n	80040a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	3b10      	subs	r3, #16
 80040c0:	4a14      	ldr	r2, [pc, #80]	; (8004114 <DMA_CalcBaseAndBitshift+0x64>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ca:	4a13      	ldr	r2, [pc, #76]	; (8004118 <DMA_CalcBaseAndBitshift+0x68>)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d909      	bls.n	80040f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	659a      	str	r2, [r3, #88]	; 0x58
 80040f0:	e007      	b.n	8004102 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	aaaaaaab 	.word	0xaaaaaaab
 8004118:	08009898 	.word	0x08009898

0800411c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d11f      	bne.n	8004176 <DMA_CheckFifoParam+0x5a>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d856      	bhi.n	80041ea <DMA_CheckFifoParam+0xce>
 800413c:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <DMA_CheckFifoParam+0x28>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004155 	.word	0x08004155
 8004148:	08004167 	.word	0x08004167
 800414c:	08004155 	.word	0x08004155
 8004150:	080041eb 	.word	0x080041eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d046      	beq.n	80041ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004164:	e043      	b.n	80041ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800416e:	d140      	bne.n	80041f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004174:	e03d      	b.n	80041f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417e:	d121      	bne.n	80041c4 <DMA_CheckFifoParam+0xa8>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d837      	bhi.n	80041f6 <DMA_CheckFifoParam+0xda>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <DMA_CheckFifoParam+0x70>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041a3 	.word	0x080041a3
 8004194:	0800419d 	.word	0x0800419d
 8004198:	080041b5 	.word	0x080041b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      break;
 80041a0:	e030      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d025      	beq.n	80041fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b2:	e022      	b.n	80041fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041bc:	d11f      	bne.n	80041fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041c2:	e01c      	b.n	80041fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d903      	bls.n	80041d2 <DMA_CheckFifoParam+0xb6>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d003      	beq.n	80041d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041d0:	e018      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
      break;
 80041d6:	e015      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e00b      	b.n	8004202 <DMA_CheckFifoParam+0xe6>
      break;
 80041ea:	bf00      	nop
 80041ec:	e00a      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 80041ee:	bf00      	nop
 80041f0:	e008      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
 80041f4:	e006      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 80041f6:	bf00      	nop
 80041f8:	e004      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;   
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 8004202:	bf00      	nop
    }
  } 
  
  return status; 
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop

08004214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e16b      	b.n	8004508 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004230:	2201      	movs	r2, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	f040 815a 	bne.w	8004502 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d005      	beq.n	8004266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004262:	2b02      	cmp	r3, #2
 8004264:	d130      	bne.n	80042c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429c:	2201      	movs	r2, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0201 	and.w	r2, r3, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d017      	beq.n	8004304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d123      	bne.n	8004358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	08da      	lsrs	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3208      	adds	r2, #8
 8004318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0203 	and.w	r2, r3, #3
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80b4 	beq.w	8004502 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	4b60      	ldr	r3, [pc, #384]	; (8004520 <HAL_GPIO_Init+0x30c>)
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	4a5f      	ldr	r2, [pc, #380]	; (8004520 <HAL_GPIO_Init+0x30c>)
 80043a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a8:	6453      	str	r3, [r2, #68]	; 0x44
 80043aa:	4b5d      	ldr	r3, [pc, #372]	; (8004520 <HAL_GPIO_Init+0x30c>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043b6:	4a5b      	ldr	r2, [pc, #364]	; (8004524 <HAL_GPIO_Init+0x310>)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	3302      	adds	r3, #2
 80043be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	220f      	movs	r2, #15
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a52      	ldr	r2, [pc, #328]	; (8004528 <HAL_GPIO_Init+0x314>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d02b      	beq.n	800443a <HAL_GPIO_Init+0x226>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a51      	ldr	r2, [pc, #324]	; (800452c <HAL_GPIO_Init+0x318>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d025      	beq.n	8004436 <HAL_GPIO_Init+0x222>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a50      	ldr	r2, [pc, #320]	; (8004530 <HAL_GPIO_Init+0x31c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01f      	beq.n	8004432 <HAL_GPIO_Init+0x21e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a4f      	ldr	r2, [pc, #316]	; (8004534 <HAL_GPIO_Init+0x320>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d019      	beq.n	800442e <HAL_GPIO_Init+0x21a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a4e      	ldr	r2, [pc, #312]	; (8004538 <HAL_GPIO_Init+0x324>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_GPIO_Init+0x216>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a4d      	ldr	r2, [pc, #308]	; (800453c <HAL_GPIO_Init+0x328>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00d      	beq.n	8004426 <HAL_GPIO_Init+0x212>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a4c      	ldr	r2, [pc, #304]	; (8004540 <HAL_GPIO_Init+0x32c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <HAL_GPIO_Init+0x20e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4b      	ldr	r2, [pc, #300]	; (8004544 <HAL_GPIO_Init+0x330>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <HAL_GPIO_Init+0x20a>
 800441a:	2307      	movs	r3, #7
 800441c:	e00e      	b.n	800443c <HAL_GPIO_Init+0x228>
 800441e:	2308      	movs	r3, #8
 8004420:	e00c      	b.n	800443c <HAL_GPIO_Init+0x228>
 8004422:	2306      	movs	r3, #6
 8004424:	e00a      	b.n	800443c <HAL_GPIO_Init+0x228>
 8004426:	2305      	movs	r3, #5
 8004428:	e008      	b.n	800443c <HAL_GPIO_Init+0x228>
 800442a:	2304      	movs	r3, #4
 800442c:	e006      	b.n	800443c <HAL_GPIO_Init+0x228>
 800442e:	2303      	movs	r3, #3
 8004430:	e004      	b.n	800443c <HAL_GPIO_Init+0x228>
 8004432:	2302      	movs	r3, #2
 8004434:	e002      	b.n	800443c <HAL_GPIO_Init+0x228>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_GPIO_Init+0x228>
 800443a:	2300      	movs	r3, #0
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	f002 0203 	and.w	r2, r2, #3
 8004442:	0092      	lsls	r2, r2, #2
 8004444:	4093      	lsls	r3, r2
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800444c:	4935      	ldr	r1, [pc, #212]	; (8004524 <HAL_GPIO_Init+0x310>)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	089b      	lsrs	r3, r3, #2
 8004452:	3302      	adds	r3, #2
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800445a:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <HAL_GPIO_Init+0x334>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800447e:	4a32      	ldr	r2, [pc, #200]	; (8004548 <HAL_GPIO_Init+0x334>)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004484:	4b30      	ldr	r3, [pc, #192]	; (8004548 <HAL_GPIO_Init+0x334>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044a8:	4a27      	ldr	r2, [pc, #156]	; (8004548 <HAL_GPIO_Init+0x334>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ae:	4b26      	ldr	r3, [pc, #152]	; (8004548 <HAL_GPIO_Init+0x334>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <HAL_GPIO_Init+0x334>)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_GPIO_Init+0x334>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044fc:	4a12      	ldr	r2, [pc, #72]	; (8004548 <HAL_GPIO_Init+0x334>)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3301      	adds	r3, #1
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	f67f ae90 	bls.w	8004230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	3724      	adds	r7, #36	; 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	40013800 	.word	0x40013800
 8004528:	40020000 	.word	0x40020000
 800452c:	40020400 	.word	0x40020400
 8004530:	40020800 	.word	0x40020800
 8004534:	40020c00 	.word	0x40020c00
 8004538:	40021000 	.word	0x40021000
 800453c:	40021400 	.word	0x40021400
 8004540:	40021800 	.word	0x40021800
 8004544:	40021c00 	.word	0x40021c00
 8004548:	40013c00 	.word	0x40013c00

0800454c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	e001      	b.n	800456e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
 8004588:	4613      	mov	r3, r2
 800458a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800458c:	787b      	ldrb	r3, [r7, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004598:	e003      	b.n	80045a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	041a      	lsls	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e264      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d075      	beq.n	80046ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ce:	4ba3      	ldr	r3, [pc, #652]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d00c      	beq.n	80045f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045da:	4ba0      	ldr	r3, [pc, #640]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d112      	bne.n	800460c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e6:	4b9d      	ldr	r3, [pc, #628]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f2:	d10b      	bne.n	800460c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	4b99      	ldr	r3, [pc, #612]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d05b      	beq.n	80046b8 <HAL_RCC_OscConfig+0x108>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d157      	bne.n	80046b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e23f      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d106      	bne.n	8004624 <HAL_RCC_OscConfig+0x74>
 8004616:	4b91      	ldr	r3, [pc, #580]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a90      	ldr	r2, [pc, #576]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e01d      	b.n	8004660 <HAL_RCC_OscConfig+0xb0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x98>
 800462e:	4b8b      	ldr	r3, [pc, #556]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a8a      	ldr	r2, [pc, #552]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4b88      	ldr	r3, [pc, #544]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a87      	ldr	r2, [pc, #540]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0xb0>
 8004648:	4b84      	ldr	r3, [pc, #528]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a83      	ldr	r2, [pc, #524]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b81      	ldr	r3, [pc, #516]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a80      	ldr	r2, [pc, #512]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fd fe0c 	bl	8002284 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004670:	f7fd fe08 	bl	8002284 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e204      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b76      	ldr	r3, [pc, #472]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0xc0>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fd fdf8 	bl	8002284 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004698:	f7fd fdf4 	bl	8002284 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1f0      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	4b6c      	ldr	r3, [pc, #432]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0xe8>
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d063      	beq.n	800478e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046c6:	4b65      	ldr	r3, [pc, #404]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d2:	4b62      	ldr	r3, [pc, #392]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d11c      	bne.n	8004718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046de:	4b5f      	ldr	r3, [pc, #380]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	4b5c      	ldr	r3, [pc, #368]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x152>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e1c4      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4b56      	ldr	r3, [pc, #344]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4952      	ldr	r1, [pc, #328]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004716:	e03a      	b.n	800478e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004720:	4b4f      	ldr	r3, [pc, #316]	; (8004860 <HAL_RCC_OscConfig+0x2b0>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fd fdad 	bl	8002284 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800472e:	f7fd fda9 	bl	8002284 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1a5      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4940      	ldr	r1, [pc, #256]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
 8004760:	e015      	b.n	800478e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004762:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <HAL_RCC_OscConfig+0x2b0>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fd fd8c 	bl	8002284 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004770:	f7fd fd88 	bl	8002284 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e184      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d030      	beq.n	80047fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a2:	4b30      	ldr	r3, [pc, #192]	; (8004864 <HAL_RCC_OscConfig+0x2b4>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fd fd6c 	bl	8002284 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b0:	f7fd fd68 	bl	8002284 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e164      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x200>
 80047ce:	e015      	b.n	80047fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d0:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_RCC_OscConfig+0x2b4>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d6:	f7fd fd55 	bl	8002284 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047de:	f7fd fd51 	bl	8002284 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e14d      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 80047f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a0 	beq.w	800494a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480e:	4b13      	ldr	r3, [pc, #76]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10f      	bne.n	800483a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	4b0f      	ldr	r3, [pc, #60]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	4a0e      	ldr	r2, [pc, #56]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004828:	6413      	str	r3, [r2, #64]	; 0x40
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_RCC_OscConfig+0x2ac>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004836:	2301      	movs	r3, #1
 8004838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_OscConfig+0x2b8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d121      	bne.n	800488a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_RCC_OscConfig+0x2b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a07      	ldr	r2, [pc, #28]	; (8004868 <HAL_RCC_OscConfig+0x2b8>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004852:	f7fd fd17 	bl	8002284 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004858:	e011      	b.n	800487e <HAL_RCC_OscConfig+0x2ce>
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800
 8004860:	42470000 	.word	0x42470000
 8004864:	42470e80 	.word	0x42470e80
 8004868:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486c:	f7fd fd0a 	bl	8002284 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e106      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487e:	4b85      	ldr	r3, [pc, #532]	; (8004a94 <HAL_RCC_OscConfig+0x4e4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d106      	bne.n	80048a0 <HAL_RCC_OscConfig+0x2f0>
 8004892:	4b81      	ldr	r3, [pc, #516]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	4a80      	ldr	r2, [pc, #512]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	6713      	str	r3, [r2, #112]	; 0x70
 800489e:	e01c      	b.n	80048da <HAL_RCC_OscConfig+0x32a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d10c      	bne.n	80048c2 <HAL_RCC_OscConfig+0x312>
 80048a8:	4b7b      	ldr	r3, [pc, #492]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	4a7a      	ldr	r2, [pc, #488]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80048ae:	f043 0304 	orr.w	r3, r3, #4
 80048b2:	6713      	str	r3, [r2, #112]	; 0x70
 80048b4:	4b78      	ldr	r3, [pc, #480]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	4a77      	ldr	r2, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6713      	str	r3, [r2, #112]	; 0x70
 80048c0:	e00b      	b.n	80048da <HAL_RCC_OscConfig+0x32a>
 80048c2:	4b75      	ldr	r3, [pc, #468]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	4a74      	ldr	r2, [pc, #464]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	6713      	str	r3, [r2, #112]	; 0x70
 80048ce:	4b72      	ldr	r3, [pc, #456]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	4a71      	ldr	r2, [pc, #452]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d015      	beq.n	800490e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fd fccf 	bl	8002284 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fd fccb 	bl	8002284 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e0c5      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004900:	4b65      	ldr	r3, [pc, #404]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0ee      	beq.n	80048ea <HAL_RCC_OscConfig+0x33a>
 800490c:	e014      	b.n	8004938 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490e:	f7fd fcb9 	bl	8002284 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004914:	e00a      	b.n	800492c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f7fd fcb5 	bl	8002284 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	; 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e0af      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492c:	4b5a      	ldr	r3, [pc, #360]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1ee      	bne.n	8004916 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d105      	bne.n	800494a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493e:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a55      	ldr	r2, [pc, #340]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 8004944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 809b 	beq.w	8004a8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004954:	4b50      	ldr	r3, [pc, #320]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b08      	cmp	r3, #8
 800495e:	d05c      	beq.n	8004a1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d141      	bne.n	80049ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004968:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <HAL_RCC_OscConfig+0x4ec>)
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7fd fc89 	bl	8002284 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004976:	f7fd fc85 	bl	8002284 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e081      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004988:	4b43      	ldr	r3, [pc, #268]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f0      	bne.n	8004976 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	019b      	lsls	r3, r3, #6
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	3b01      	subs	r3, #1
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	061b      	lsls	r3, r3, #24
 80049b8:	4937      	ldr	r1, [pc, #220]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_RCC_OscConfig+0x4ec>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fd fc5e 	bl	8002284 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fd fc5a 	bl	8002284 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e056      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	4b2e      	ldr	r3, [pc, #184]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x41c>
 80049ea:	e04e      	b.n	8004a8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ec:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_RCC_OscConfig+0x4ec>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fd fc47 	bl	8002284 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fd fc43 	bl	8002284 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e03f      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0c:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCC_OscConfig+0x44a>
 8004a18:	e037      	b.n	8004a8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e032      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a26:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <HAL_RCC_OscConfig+0x4e8>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d028      	beq.n	8004a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d121      	bne.n	8004a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d11a      	bne.n	8004a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a56:	4013      	ands	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d001      	beq.n	8004a8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40007000 	.word	0x40007000
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	42470060 	.word	0x42470060

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0cc      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b68      	ldr	r3, [pc, #416]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d90c      	bls.n	8004adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b65      	ldr	r3, [pc, #404]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b63      	ldr	r3, [pc, #396]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0b8      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af4:	4b59      	ldr	r3, [pc, #356]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a58      	ldr	r2, [pc, #352]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b0c:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a52      	ldr	r2, [pc, #328]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	494d      	ldr	r1, [pc, #308]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d044      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	4b47      	ldr	r3, [pc, #284]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d119      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e07f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e067      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7e:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 0203 	bic.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4934      	ldr	r1, [pc, #208]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b90:	f7fd fb78 	bl	8002284 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b98:	f7fd fb74 	bl	8002284 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e04f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 020c 	and.w	r2, r3, #12
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1eb      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b25      	ldr	r3, [pc, #148]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d20c      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e032      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4916      	ldr	r1, [pc, #88]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	490e      	ldr	r1, [pc, #56]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c26:	f000 f821 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	490a      	ldr	r1, [pc, #40]	; (8004c60 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	5ccb      	ldrb	r3, [r1, r3]
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_RCC_ClockConfig+0x1c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc ff4e 	bl	8001ae8 <HAL_InitTick>

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023c00 	.word	0x40023c00
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08009880 	.word	0x08009880
 8004c64:	20000000 	.word	0x20000000
 8004c68:	20000004 	.word	0x20000004

08004c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c84:	4b67      	ldr	r3, [pc, #412]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x40>
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	f200 80bd 	bhi.w	8004e10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c9e:	e0b7      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ca2:	60bb      	str	r3, [r7, #8]
       break;
 8004ca4:	e0b7      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ca6:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ca8:	60bb      	str	r3, [r7, #8]
      break;
 8004caa:	e0b4      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cac:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04d      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc2:	4b58      	ldr	r3, [pc, #352]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cd2:	f04f 0100 	mov.w	r1, #0
 8004cd6:	ea02 0800 	and.w	r8, r2, r0
 8004cda:	ea03 0901 	and.w	r9, r3, r1
 8004cde:	4640      	mov	r0, r8
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	014b      	lsls	r3, r1, #5
 8004cec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cf0:	0142      	lsls	r2, r0, #5
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	ebb0 0008 	subs.w	r0, r0, r8
 8004cfa:	eb61 0109 	sbc.w	r1, r1, r9
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	018b      	lsls	r3, r1, #6
 8004d08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d0c:	0182      	lsls	r2, r0, #6
 8004d0e:	1a12      	subs	r2, r2, r0
 8004d10:	eb63 0301 	sbc.w	r3, r3, r1
 8004d14:	f04f 0000 	mov.w	r0, #0
 8004d18:	f04f 0100 	mov.w	r1, #0
 8004d1c:	00d9      	lsls	r1, r3, #3
 8004d1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d22:	00d0      	lsls	r0, r2, #3
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	eb12 0208 	adds.w	r2, r2, r8
 8004d2c:	eb43 0309 	adc.w	r3, r3, r9
 8004d30:	f04f 0000 	mov.w	r0, #0
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	0219      	lsls	r1, r3, #8
 8004d3a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004d3e:	0210      	lsls	r0, r2, #8
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	f7fb fa3e 	bl	80001d0 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e04a      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	ea02 0400 	and.w	r4, r2, r0
 8004d76:	ea03 0501 	and.w	r5, r3, r1
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	014b      	lsls	r3, r1, #5
 8004d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d8c:	0142      	lsls	r2, r0, #5
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	1b00      	subs	r0, r0, r4
 8004d94:	eb61 0105 	sbc.w	r1, r1, r5
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	018b      	lsls	r3, r1, #6
 8004da2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da6:	0182      	lsls	r2, r0, #6
 8004da8:	1a12      	subs	r2, r2, r0
 8004daa:	eb63 0301 	sbc.w	r3, r3, r1
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	00d9      	lsls	r1, r3, #3
 8004db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dbc:	00d0      	lsls	r0, r2, #3
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	1912      	adds	r2, r2, r4
 8004dc4:	eb45 0303 	adc.w	r3, r5, r3
 8004dc8:	f04f 0000 	mov.w	r0, #0
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	0299      	lsls	r1, r3, #10
 8004dd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dd6:	0290      	lsls	r0, r2, #10
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	f7fb f9f2 	bl	80001d0 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e12:	60bb      	str	r3, [r7, #8]
      break;
 8004e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e16:	68bb      	ldr	r3, [r7, #8]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	003d0900 	.word	0x003d0900

08004e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000000 	.word	0x20000000

08004e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e4c:	f7ff fff0 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	0b5b      	lsrs	r3, r3, #13
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4903      	ldr	r1, [pc, #12]	; (8004e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	08009890 	.word	0x08009890

08004e70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <HAL_RCC_GetClockConfig+0x5c>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0203 	and.w	r2, r3, #3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <HAL_RCC_GetClockConfig+0x5c>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <HAL_RCC_GetClockConfig+0x5c>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ea4:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <HAL_RCC_GetClockConfig+0x5c>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	08db      	lsrs	r3, r3, #3
 8004eaa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCC_GetClockConfig+0x60>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0207 	and.w	r2, r3, #7
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	601a      	str	r2, [r3, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40023c00 	.word	0x40023c00

08004ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e041      	b.n	8004f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd f844 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f001 f9a6 	bl	8006264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d001      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e04e      	b.n	800502a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a23      	ldr	r2, [pc, #140]	; (8005038 <HAL_TIM_Base_Start_IT+0xc4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d022      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x80>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb6:	d01d      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x80>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1f      	ldr	r2, [pc, #124]	; (800503c <HAL_TIM_Base_Start_IT+0xc8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d018      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x80>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1e      	ldr	r2, [pc, #120]	; (8005040 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x80>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x80>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x80>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a19      	ldr	r2, [pc, #100]	; (800504c <HAL_TIM_Base_Start_IT+0xd8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x80>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a18      	ldr	r2, [pc, #96]	; (8005050 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d111      	bne.n	8005018 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d010      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	e007      	b.n	8005028 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40010400 	.word	0x40010400
 800504c:	40014000 	.word	0x40014000
 8005050:	40001800 	.word	0x40001800

08005054 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e041      	b.n	80050ea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f839 	bl	80050f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f001 f8e6 	bl	8006264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_TIM_OC_Start_IT+0x28>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	e022      	b.n	8005176 <HAL_TIM_OC_Start_IT+0x6e>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b04      	cmp	r3, #4
 8005134:	d109      	bne.n	800514a <HAL_TIM_OC_Start_IT+0x42>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	bf14      	ite	ne
 8005142:	2301      	movne	r3, #1
 8005144:	2300      	moveq	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	e015      	b.n	8005176 <HAL_TIM_OC_Start_IT+0x6e>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d109      	bne.n	8005164 <HAL_TIM_OC_Start_IT+0x5c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	e008      	b.n	8005176 <HAL_TIM_OC_Start_IT+0x6e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0c7      	b.n	800530e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <HAL_TIM_OC_Start_IT+0x86>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800518c:	e013      	b.n	80051b6 <HAL_TIM_OC_Start_IT+0xae>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d104      	bne.n	800519e <HAL_TIM_OC_Start_IT+0x96>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800519c:	e00b      	b.n	80051b6 <HAL_TIM_OC_Start_IT+0xae>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_OC_Start_IT+0xa6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ac:	e003      	b.n	80051b6 <HAL_TIM_OC_Start_IT+0xae>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d841      	bhi.n	8005240 <HAL_TIM_OC_Start_IT+0x138>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <HAL_TIM_OC_Start_IT+0xbc>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	08005241 	.word	0x08005241
 80051cc:	08005241 	.word	0x08005241
 80051d0:	08005241 	.word	0x08005241
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	08005241 	.word	0x08005241
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005241 	.word	0x08005241
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005241 	.word	0x08005241
 80051f0:	08005241 	.word	0x08005241
 80051f4:	0800522f 	.word	0x0800522f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0202 	orr.w	r2, r2, #2
 8005206:	60da      	str	r2, [r3, #12]
      break;
 8005208:	e01d      	b.n	8005246 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0204 	orr.w	r2, r2, #4
 8005218:	60da      	str	r2, [r3, #12]
      break;
 800521a:	e014      	b.n	8005246 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	60da      	str	r2, [r3, #12]
      break;
 800522c:	e00b      	b.n	8005246 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0210 	orr.w	r2, r2, #16
 800523c:	60da      	str	r2, [r3, #12]
      break;
 800523e:	e002      	b.n	8005246 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
      break;
 8005244:	bf00      	nop
  }

  if (status == HAL_OK)
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d15f      	bne.n	800530c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f001 faef 	bl	8006838 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2e      	ldr	r2, [pc, #184]	; (8005318 <HAL_TIM_OC_Start_IT+0x210>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIM_OC_Start_IT+0x166>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a2c      	ldr	r2, [pc, #176]	; (800531c <HAL_TIM_OC_Start_IT+0x214>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_TIM_OC_Start_IT+0x16a>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_TIM_OC_Start_IT+0x16c>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a22      	ldr	r2, [pc, #136]	; (8005318 <HAL_TIM_OC_Start_IT+0x210>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d022      	beq.n	80052d8 <HAL_TIM_OC_Start_IT+0x1d0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d01d      	beq.n	80052d8 <HAL_TIM_OC_Start_IT+0x1d0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <HAL_TIM_OC_Start_IT+0x218>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d018      	beq.n	80052d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <HAL_TIM_OC_Start_IT+0x21c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <HAL_TIM_OC_Start_IT+0x220>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00e      	beq.n	80052d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <HAL_TIM_OC_Start_IT+0x214>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d009      	beq.n	80052d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_TIM_OC_Start_IT+0x224>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a17      	ldr	r2, [pc, #92]	; (8005330 <HAL_TIM_OC_Start_IT+0x228>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d111      	bne.n	80052fc <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d010      	beq.n	800530c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	e007      	b.n	800530c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800
 8005328:	40000c00 	.word	0x40000c00
 800532c:	40014000 	.word	0x40014000
 8005330:	40001800 	.word	0x40001800

08005334 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d841      	bhi.n	80053cc <HAL_TIM_OC_Stop_IT+0x98>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <HAL_TIM_OC_Stop_IT+0x1c>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005385 	.word	0x08005385
 8005354:	080053cd 	.word	0x080053cd
 8005358:	080053cd 	.word	0x080053cd
 800535c:	080053cd 	.word	0x080053cd
 8005360:	08005397 	.word	0x08005397
 8005364:	080053cd 	.word	0x080053cd
 8005368:	080053cd 	.word	0x080053cd
 800536c:	080053cd 	.word	0x080053cd
 8005370:	080053a9 	.word	0x080053a9
 8005374:	080053cd 	.word	0x080053cd
 8005378:	080053cd 	.word	0x080053cd
 800537c:	080053cd 	.word	0x080053cd
 8005380:	080053bb 	.word	0x080053bb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0202 	bic.w	r2, r2, #2
 8005392:	60da      	str	r2, [r3, #12]
      break;
 8005394:	e01d      	b.n	80053d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0204 	bic.w	r2, r2, #4
 80053a4:	60da      	str	r2, [r3, #12]
      break;
 80053a6:	e014      	b.n	80053d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0208 	bic.w	r2, r2, #8
 80053b6:	60da      	str	r2, [r3, #12]
      break;
 80053b8:	e00b      	b.n	80053d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0210 	bic.w	r2, r2, #16
 80053c8:	60da      	str	r2, [r3, #12]
      break;
 80053ca:	e002      	b.n	80053d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
      break;
 80053d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d161      	bne.n	800549c <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2200      	movs	r2, #0
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 fa29 	bl	8006838 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <HAL_TIM_OC_Stop_IT+0x174>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIM_OC_Stop_IT+0xc6>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2d      	ldr	r2, [pc, #180]	; (80054ac <HAL_TIM_OC_Stop_IT+0x178>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_OC_Stop_IT+0xca>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <HAL_TIM_OC_Stop_IT+0xcc>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d017      	beq.n	8005434 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	f241 1311 	movw	r3, #4369	; 0x1111
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10f      	bne.n	8005434 <HAL_TIM_OC_Stop_IT+0x100>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	f240 4344 	movw	r3, #1092	; 0x444
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <HAL_TIM_OC_Stop_IT+0x100>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005432:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	f241 1311 	movw	r3, #4369	; 0x1111
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10f      	bne.n	8005464 <HAL_TIM_OC_Stop_IT+0x130>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	f240 4344 	movw	r3, #1092	; 0x444
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d107      	bne.n	8005464 <HAL_TIM_OC_Stop_IT+0x130>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <HAL_TIM_OC_Stop_IT+0x140>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005472:	e013      	b.n	800549c <HAL_TIM_OC_Stop_IT+0x168>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d104      	bne.n	8005484 <HAL_TIM_OC_Stop_IT+0x150>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005482:	e00b      	b.n	800549c <HAL_TIM_OC_Stop_IT+0x168>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d104      	bne.n	8005494 <HAL_TIM_OC_Stop_IT+0x160>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005492:	e003      	b.n	800549c <HAL_TIM_OC_Stop_IT+0x168>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40010400 	.word	0x40010400

080054b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e041      	b.n	8005546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f839 	bl	800554e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f000 feb8 	bl	8006264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <HAL_TIM_PWM_Start+0x24>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e022      	b.n	80055ce <HAL_TIM_PWM_Start+0x6a>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b04      	cmp	r3, #4
 800558c:	d109      	bne.n	80055a2 <HAL_TIM_PWM_Start+0x3e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	e015      	b.n	80055ce <HAL_TIM_PWM_Start+0x6a>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d109      	bne.n	80055bc <HAL_TIM_PWM_Start+0x58>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e008      	b.n	80055ce <HAL_TIM_PWM_Start+0x6a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	bf14      	ite	ne
 80055c8:	2301      	movne	r3, #1
 80055ca:	2300      	moveq	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e07c      	b.n	80056d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_PWM_Start+0x82>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	e013      	b.n	800560e <HAL_TIM_PWM_Start+0xaa>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_PWM_Start+0x92>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f4:	e00b      	b.n	800560e <HAL_TIM_PWM_Start+0xaa>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_PWM_Start+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005604:	e003      	b.n	800560e <HAL_TIM_PWM_Start+0xaa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f90e 	bl	8006838 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2d      	ldr	r2, [pc, #180]	; (80056d8 <HAL_TIM_PWM_Start+0x174>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_TIM_PWM_Start+0xcc>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <HAL_TIM_PWM_Start+0x178>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d101      	bne.n	8005634 <HAL_TIM_PWM_Start+0xd0>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <HAL_TIM_PWM_Start+0xd2>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <HAL_TIM_PWM_Start+0x174>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d022      	beq.n	800569a <HAL_TIM_PWM_Start+0x136>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565c:	d01d      	beq.n	800569a <HAL_TIM_PWM_Start+0x136>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1f      	ldr	r2, [pc, #124]	; (80056e0 <HAL_TIM_PWM_Start+0x17c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d018      	beq.n	800569a <HAL_TIM_PWM_Start+0x136>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <HAL_TIM_PWM_Start+0x180>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_TIM_PWM_Start+0x136>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <HAL_TIM_PWM_Start+0x184>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00e      	beq.n	800569a <HAL_TIM_PWM_Start+0x136>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a16      	ldr	r2, [pc, #88]	; (80056dc <HAL_TIM_PWM_Start+0x178>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_TIM_PWM_Start+0x136>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <HAL_TIM_PWM_Start+0x188>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_TIM_PWM_Start+0x136>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <HAL_TIM_PWM_Start+0x18c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d111      	bne.n	80056be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b06      	cmp	r3, #6
 80056aa:	d010      	beq.n	80056ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	e007      	b.n	80056ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0201 	orr.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40010400 	.word	0x40010400
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40001800 	.word	0x40001800

080056f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <HAL_TIM_PWM_Start_DMA+0x2c>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e022      	b.n	8005766 <HAL_TIM_PWM_Start_DMA+0x72>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b04      	cmp	r3, #4
 8005724:	d109      	bne.n	800573a <HAL_TIM_PWM_Start_DMA+0x46>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	bf0c      	ite	eq
 8005732:	2301      	moveq	r3, #1
 8005734:	2300      	movne	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	e015      	b.n	8005766 <HAL_TIM_PWM_Start_DMA+0x72>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d109      	bne.n	8005754 <HAL_TIM_PWM_Start_DMA+0x60>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	bf0c      	ite	eq
 800574c:	2301      	moveq	r3, #1
 800574e:	2300      	movne	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e008      	b.n	8005766 <HAL_TIM_PWM_Start_DMA+0x72>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800576a:	2302      	movs	r3, #2
 800576c:	e171      	b.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start_DMA+0x94>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e022      	b.n	80057ce <HAL_TIM_PWM_Start_DMA+0xda>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d109      	bne.n	80057a2 <HAL_TIM_PWM_Start_DMA+0xae>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	e015      	b.n	80057ce <HAL_TIM_PWM_Start_DMA+0xda>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e008      	b.n	80057ce <HAL_TIM_PWM_Start_DMA+0xda>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d024      	beq.n	800581c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_PWM_Start_DMA+0xee>
 80057d8:	887b      	ldrh	r3, [r7, #2]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e137      	b.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f0:	e016      	b.n	8005820 <HAL_TIM_PWM_Start_DMA+0x12c>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Start_DMA+0x10e>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005800:	e00e      	b.n	8005820 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005810:	e006      	b.n	8005820 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800581a:	e001      	b.n	8005820 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e118      	b.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x35e>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b0c      	cmp	r3, #12
 8005824:	f200 80ae 	bhi.w	8005984 <HAL_TIM_PWM_Start_DMA+0x290>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005865 	.word	0x08005865
 8005834:	08005985 	.word	0x08005985
 8005838:	08005985 	.word	0x08005985
 800583c:	08005985 	.word	0x08005985
 8005840:	080058ad 	.word	0x080058ad
 8005844:	08005985 	.word	0x08005985
 8005848:	08005985 	.word	0x08005985
 800584c:	08005985 	.word	0x08005985
 8005850:	080058f5 	.word	0x080058f5
 8005854:	08005985 	.word	0x08005985
 8005858:	08005985 	.word	0x08005985
 800585c:	08005985 	.word	0x08005985
 8005860:	0800593d 	.word	0x0800593d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	4a7c      	ldr	r2, [pc, #496]	; (8005a5c <HAL_TIM_PWM_Start_DMA+0x368>)
 800586a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	4a7b      	ldr	r2, [pc, #492]	; (8005a60 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	4a7a      	ldr	r2, [pc, #488]	; (8005a64 <HAL_TIM_PWM_Start_DMA+0x370>)
 800587a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3334      	adds	r3, #52	; 0x34
 8005888:	461a      	mov	r2, r3
 800588a:	887b      	ldrh	r3, [r7, #2]
 800588c:	f7fe f990 	bl	8003bb0 <HAL_DMA_Start_IT>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e0db      	b.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a8:	60da      	str	r2, [r3, #12]
      break;
 80058aa:	e06e      	b.n	800598a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	4a6a      	ldr	r2, [pc, #424]	; (8005a5c <HAL_TIM_PWM_Start_DMA+0x368>)
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	4a69      	ldr	r2, [pc, #420]	; (8005a60 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80058ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	4a68      	ldr	r2, [pc, #416]	; (8005a64 <HAL_TIM_PWM_Start_DMA+0x370>)
 80058c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3338      	adds	r3, #56	; 0x38
 80058d0:	461a      	mov	r2, r3
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	f7fe f96c 	bl	8003bb0 <HAL_DMA_Start_IT>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0b7      	b.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058f0:	60da      	str	r2, [r3, #12]
      break;
 80058f2:	e04a      	b.n	800598a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	4a58      	ldr	r2, [pc, #352]	; (8005a5c <HAL_TIM_PWM_Start_DMA+0x368>)
 80058fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	4a57      	ldr	r2, [pc, #348]	; (8005a60 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a56      	ldr	r2, [pc, #344]	; (8005a64 <HAL_TIM_PWM_Start_DMA+0x370>)
 800590a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	333c      	adds	r3, #60	; 0x3c
 8005918:	461a      	mov	r2, r3
 800591a:	887b      	ldrh	r3, [r7, #2]
 800591c:	f7fe f948 	bl	8003bb0 <HAL_DMA_Start_IT>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e093      	b.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005938:	60da      	str	r2, [r3, #12]
      break;
 800593a:	e026      	b.n	800598a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	4a46      	ldr	r2, [pc, #280]	; (8005a5c <HAL_TIM_PWM_Start_DMA+0x368>)
 8005942:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	4a45      	ldr	r2, [pc, #276]	; (8005a60 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800594a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	4a44      	ldr	r2, [pc, #272]	; (8005a64 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005952:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3340      	adds	r3, #64	; 0x40
 8005960:	461a      	mov	r2, r3
 8005962:	887b      	ldrh	r3, [r7, #2]
 8005964:	f7fe f924 	bl	8003bb0 <HAL_DMA_Start_IT>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e06f      	b.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005980:	60da      	str	r2, [r3, #12]
      break;
 8005982:	e002      	b.n	800598a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
      break;
 8005988:	bf00      	nop
  }

  if (status == HAL_OK)
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d15f      	bne.n	8005a50 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2201      	movs	r2, #1
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 ff4d 	bl	8006838 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a31      	ldr	r2, [pc, #196]	; (8005a68 <HAL_TIM_PWM_Start_DMA+0x374>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a2f      	ldr	r2, [pc, #188]	; (8005a6c <HAL_TIM_PWM_Start_DMA+0x378>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a25      	ldr	r2, [pc, #148]	; (8005a68 <HAL_TIM_PWM_Start_DMA+0x374>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d022      	beq.n	8005a1c <HAL_TIM_PWM_Start_DMA+0x328>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d01d      	beq.n	8005a1c <HAL_TIM_PWM_Start_DMA+0x328>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a22      	ldr	r2, [pc, #136]	; (8005a70 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_TIM_PWM_Start_DMA+0x328>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a21      	ldr	r2, [pc, #132]	; (8005a74 <HAL_TIM_PWM_Start_DMA+0x380>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <HAL_TIM_PWM_Start_DMA+0x328>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1f      	ldr	r2, [pc, #124]	; (8005a78 <HAL_TIM_PWM_Start_DMA+0x384>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_PWM_Start_DMA+0x328>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1a      	ldr	r2, [pc, #104]	; (8005a6c <HAL_TIM_PWM_Start_DMA+0x378>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIM_PWM_Start_DMA+0x328>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <HAL_TIM_PWM_Start_DMA+0x388>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_PWM_Start_DMA+0x328>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1a      	ldr	r2, [pc, #104]	; (8005a80 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d111      	bne.n	8005a40 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d010      	beq.n	8005a50 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	e007      	b.n	8005a50 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08006155 	.word	0x08006155
 8005a60:	080061fd 	.word	0x080061fd
 8005a64:	080060c3 	.word	0x080060c3
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40000c00 	.word	0x40000c00
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	40001800 	.word	0x40001800

08005a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d122      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d11b      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0202 	mvn.w	r2, #2
 8005ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fac9 	bl	800605e <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fb fe3c 	bl	800174c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 facc 	bl	8006072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d122      	bne.n	8005b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d11b      	bne.n	8005b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0204 	mvn.w	r2, #4
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa9f 	bl	800605e <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb fe12 	bl	800174c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 faa2 	bl	8006072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d122      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d11b      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0208 	mvn.w	r2, #8
 8005b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa75 	bl	800605e <HAL_TIM_IC_CaptureCallback>
 8005b74:	e005      	b.n	8005b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb fde8 	bl	800174c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fa78 	bl	8006072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0210 	mvn.w	r2, #16
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa4b 	bl	800605e <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fb fdbe 	bl	800174c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fa4e 	bl	8006072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d10e      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d107      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0201 	mvn.w	r2, #1
 8005c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fb ff2c 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d10e      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c20:	2b80      	cmp	r3, #128	; 0x80
 8005c22:	d107      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 feae 	bl	8006990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d10e      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d107      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fa1d 	bl	800609a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d10e      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d107      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0220 	mvn.w	r2, #32
 8005c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fe78 	bl	800697c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e048      	b.n	8005d44 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b0c      	cmp	r3, #12
 8005cbe:	d839      	bhi.n	8005d34 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005cc0:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005cfd 	.word	0x08005cfd
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005d35 	.word	0x08005d35
 8005cd4:	08005d35 	.word	0x08005d35
 8005cd8:	08005d0b 	.word	0x08005d0b
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005d35 	.word	0x08005d35
 8005ce8:	08005d19 	.word	0x08005d19
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d35 	.word	0x08005d35
 8005cf4:	08005d35 	.word	0x08005d35
 8005cf8:	08005d27 	.word	0x08005d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fb4e 	bl	80063a4 <TIM_OC1_SetConfig>
      break;
 8005d08:	e017      	b.n	8005d3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fbb7 	bl	8006484 <TIM_OC2_SetConfig>
      break;
 8005d16:	e010      	b.n	8005d3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fc26 	bl	8006570 <TIM_OC3_SetConfig>
      break;
 8005d24:	e009      	b.n	8005d3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fc93 	bl	8006658 <TIM_OC4_SetConfig>
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
      break;
 8005d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e0ae      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b0c      	cmp	r3, #12
 8005d76:	f200 809f 	bhi.w	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005db5 	.word	0x08005db5
 8005d84:	08005eb9 	.word	0x08005eb9
 8005d88:	08005eb9 	.word	0x08005eb9
 8005d8c:	08005eb9 	.word	0x08005eb9
 8005d90:	08005df5 	.word	0x08005df5
 8005d94:	08005eb9 	.word	0x08005eb9
 8005d98:	08005eb9 	.word	0x08005eb9
 8005d9c:	08005eb9 	.word	0x08005eb9
 8005da0:	08005e37 	.word	0x08005e37
 8005da4:	08005eb9 	.word	0x08005eb9
 8005da8:	08005eb9 	.word	0x08005eb9
 8005dac:	08005eb9 	.word	0x08005eb9
 8005db0:	08005e77 	.word	0x08005e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 faf2 	bl	80063a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0208 	orr.w	r2, r2, #8
 8005dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0204 	bic.w	r2, r2, #4
 8005dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6999      	ldr	r1, [r3, #24]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	619a      	str	r2, [r3, #24]
      break;
 8005df2:	e064      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fb42 	bl	8006484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	021a      	lsls	r2, r3, #8
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	619a      	str	r2, [r3, #24]
      break;
 8005e34:	e043      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fb97 	bl	8006570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0208 	orr.w	r2, r2, #8
 8005e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0204 	bic.w	r2, r2, #4
 8005e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	61da      	str	r2, [r3, #28]
      break;
 8005e74:	e023      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fbeb 	bl	8006658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69d9      	ldr	r1, [r3, #28]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	021a      	lsls	r2, r3, #8
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	61da      	str	r2, [r3, #28]
      break;
 8005eb6:	e002      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	75fb      	strb	r3, [r7, #23]
      break;
 8005ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_TIM_ConfigClockSource+0x1c>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e0b4      	b.n	8006056 <HAL_TIM_ConfigClockSource+0x186>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f24:	d03e      	beq.n	8005fa4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2a:	f200 8087 	bhi.w	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f32:	f000 8086 	beq.w	8006042 <HAL_TIM_ConfigClockSource+0x172>
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3a:	d87f      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f3c:	2b70      	cmp	r3, #112	; 0x70
 8005f3e:	d01a      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0xa6>
 8005f40:	2b70      	cmp	r3, #112	; 0x70
 8005f42:	d87b      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f44:	2b60      	cmp	r3, #96	; 0x60
 8005f46:	d050      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x11a>
 8005f48:	2b60      	cmp	r3, #96	; 0x60
 8005f4a:	d877      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b50      	cmp	r3, #80	; 0x50
 8005f4e:	d03c      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0xfa>
 8005f50:	2b50      	cmp	r3, #80	; 0x50
 8005f52:	d873      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d058      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x13a>
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d86f      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b30      	cmp	r3, #48	; 0x30
 8005f5e:	d064      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15a>
 8005f60:	2b30      	cmp	r3, #48	; 0x30
 8005f62:	d86b      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d060      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15a>
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d867      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d05c      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15a>
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d05a      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15a>
 8005f74:	e062      	b.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6899      	ldr	r1, [r3, #8]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f000 fc37 	bl	80067f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	609a      	str	r2, [r3, #8]
      break;
 8005fa2:	e04f      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6899      	ldr	r1, [r3, #8]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f000 fc20 	bl	80067f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fc6:	609a      	str	r2, [r3, #8]
      break;
 8005fc8:	e03c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f000 fb94 	bl	8006704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2150      	movs	r1, #80	; 0x50
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fbed 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 8005fe8:	e02c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f000 fbb3 	bl	8006762 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2160      	movs	r1, #96	; 0x60
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fbdd 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 8006008:	e01c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	461a      	mov	r2, r3
 8006018:	f000 fb74 	bl	8006704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2140      	movs	r1, #64	; 0x40
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fbcd 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 8006028:	e00c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 fbc4 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 800603a:	e003      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
      break;
 8006040:	e000      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d107      	bne.n	80060ea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e8:	e02a      	b.n	8006140 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d107      	bne.n	8006104 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2202      	movs	r2, #2
 80060f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006102:	e01d      	b.n	8006140 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	429a      	cmp	r2, r3
 800610c:	d107      	bne.n	800611e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2204      	movs	r2, #4
 8006112:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800611c:	e010      	b.n	8006140 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d107      	bne.n	8006138 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2208      	movs	r2, #8
 800612c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006136:	e003      	b.n	8006140 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ffb4 	bl	80060ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
}
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d10b      	bne.n	8006184 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d136      	bne.n	80061e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006182:	e031      	b.n	80061e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	429a      	cmp	r2, r3
 800618c:	d10b      	bne.n	80061a6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2202      	movs	r2, #2
 8006192:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d125      	bne.n	80061e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a4:	e020      	b.n	80061e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d10b      	bne.n	80061c8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2204      	movs	r2, #4
 80061b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d114      	bne.n	80061e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c6:	e00f      	b.n	80061e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d10a      	bne.n	80061e8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2208      	movs	r2, #8
 80061d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d103      	bne.n	80061e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ff42 	bl	8006072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	771a      	strb	r2, [r3, #28]
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	429a      	cmp	r2, r3
 8006212:	d103      	bne.n	800621c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	771a      	strb	r2, [r3, #28]
 800621a:	e019      	b.n	8006250 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d103      	bne.n	800622e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2202      	movs	r2, #2
 800622a:	771a      	strb	r2, [r3, #28]
 800622c:	e010      	b.n	8006250 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	d103      	bne.n	8006240 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2204      	movs	r2, #4
 800623c:	771a      	strb	r2, [r3, #28]
 800623e:	e007      	b.n	8006250 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d102      	bne.n	8006250 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2208      	movs	r2, #8
 800624e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff ff18 	bl	8006086 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	771a      	strb	r2, [r3, #28]
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a40      	ldr	r2, [pc, #256]	; (8006378 <TIM_Base_SetConfig+0x114>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006282:	d00f      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3d      	ldr	r2, [pc, #244]	; (800637c <TIM_Base_SetConfig+0x118>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00b      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3c      	ldr	r2, [pc, #240]	; (8006380 <TIM_Base_SetConfig+0x11c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3b      	ldr	r2, [pc, #236]	; (8006384 <TIM_Base_SetConfig+0x120>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3a      	ldr	r2, [pc, #232]	; (8006388 <TIM_Base_SetConfig+0x124>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d108      	bne.n	80062b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2f      	ldr	r2, [pc, #188]	; (8006378 <TIM_Base_SetConfig+0x114>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d02b      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c4:	d027      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2c      	ldr	r2, [pc, #176]	; (800637c <TIM_Base_SetConfig+0x118>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d023      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2b      	ldr	r2, [pc, #172]	; (8006380 <TIM_Base_SetConfig+0x11c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01f      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <TIM_Base_SetConfig+0x120>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01b      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a29      	ldr	r2, [pc, #164]	; (8006388 <TIM_Base_SetConfig+0x124>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d017      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a28      	ldr	r2, [pc, #160]	; (800638c <TIM_Base_SetConfig+0x128>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a27      	ldr	r2, [pc, #156]	; (8006390 <TIM_Base_SetConfig+0x12c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00f      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a26      	ldr	r2, [pc, #152]	; (8006394 <TIM_Base_SetConfig+0x130>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00b      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a25      	ldr	r2, [pc, #148]	; (8006398 <TIM_Base_SetConfig+0x134>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d007      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a24      	ldr	r2, [pc, #144]	; (800639c <TIM_Base_SetConfig+0x138>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a23      	ldr	r2, [pc, #140]	; (80063a0 <TIM_Base_SetConfig+0x13c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d108      	bne.n	8006328 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <TIM_Base_SetConfig+0x114>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_Base_SetConfig+0xf8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a0c      	ldr	r2, [pc, #48]	; (8006388 <TIM_Base_SetConfig+0x124>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d103      	bne.n	8006364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	615a      	str	r2, [r3, #20]
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40010000 	.word	0x40010000
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40000c00 	.word	0x40000c00
 8006388:	40010400 	.word	0x40010400
 800638c:	40014000 	.word	0x40014000
 8006390:	40014400 	.word	0x40014400
 8006394:	40014800 	.word	0x40014800
 8006398:	40001800 	.word	0x40001800
 800639c:	40001c00 	.word	0x40001c00
 80063a0:	40002000 	.word	0x40002000

080063a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 0302 	bic.w	r3, r3, #2
 80063ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a20      	ldr	r2, [pc, #128]	; (800647c <TIM_OC1_SetConfig+0xd8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_OC1_SetConfig+0x64>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1f      	ldr	r2, [pc, #124]	; (8006480 <TIM_OC1_SetConfig+0xdc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d10c      	bne.n	8006422 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0308 	bic.w	r3, r3, #8
 800640e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f023 0304 	bic.w	r3, r3, #4
 8006420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a15      	ldr	r2, [pc, #84]	; (800647c <TIM_OC1_SetConfig+0xd8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <TIM_OC1_SetConfig+0x8e>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <TIM_OC1_SetConfig+0xdc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d111      	bne.n	8006456 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40010000 	.word	0x40010000
 8006480:	40010400 	.word	0x40010400

08006484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f023 0210 	bic.w	r2, r3, #16
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0320 	bic.w	r3, r3, #32
 80064ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a22      	ldr	r2, [pc, #136]	; (8006568 <TIM_OC2_SetConfig+0xe4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_OC2_SetConfig+0x68>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a21      	ldr	r2, [pc, #132]	; (800656c <TIM_OC2_SetConfig+0xe8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d10d      	bne.n	8006508 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a17      	ldr	r2, [pc, #92]	; (8006568 <TIM_OC2_SetConfig+0xe4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC2_SetConfig+0x94>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a16      	ldr	r2, [pc, #88]	; (800656c <TIM_OC2_SetConfig+0xe8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d113      	bne.n	8006540 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800651e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40010400 	.word	0x40010400

08006570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a21      	ldr	r2, [pc, #132]	; (8006650 <TIM_OC3_SetConfig+0xe0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_OC3_SetConfig+0x66>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a20      	ldr	r2, [pc, #128]	; (8006654 <TIM_OC3_SetConfig+0xe4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10d      	bne.n	80065f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a16      	ldr	r2, [pc, #88]	; (8006650 <TIM_OC3_SetConfig+0xe0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC3_SetConfig+0x92>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a15      	ldr	r2, [pc, #84]	; (8006654 <TIM_OC3_SetConfig+0xe4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d113      	bne.n	800662a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	621a      	str	r2, [r3, #32]
}
 8006644:	bf00      	nop
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	40010000 	.word	0x40010000
 8006654:	40010400 	.word	0x40010400

08006658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	031b      	lsls	r3, r3, #12
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a12      	ldr	r2, [pc, #72]	; (80066fc <TIM_OC4_SetConfig+0xa4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC4_SetConfig+0x68>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a11      	ldr	r2, [pc, #68]	; (8006700 <TIM_OC4_SetConfig+0xa8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d109      	bne.n	80066d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	019b      	lsls	r3, r3, #6
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40010000 	.word	0x40010000
 8006700:	40010400 	.word	0x40010400

08006704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0201 	bic.w	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f023 030a 	bic.w	r3, r3, #10
 8006740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006762:	b480      	push	{r7}
 8006764:	b087      	sub	sp, #28
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f023 0210 	bic.w	r2, r3, #16
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800678c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	031b      	lsls	r3, r3, #12
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800679e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	f043 0307 	orr.w	r3, r3, #7
 80067e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	609a      	str	r2, [r3, #8]
}
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	021a      	lsls	r2, r3, #8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	431a      	orrs	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4313      	orrs	r3, r2
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	609a      	str	r2, [r3, #8]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 031f 	and.w	r3, r3, #31
 800684a:	2201      	movs	r2, #1
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	43db      	mvns	r3, r3
 800685a:	401a      	ands	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1a      	ldr	r2, [r3, #32]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	fa01 f303 	lsl.w	r3, r1, r3
 8006870:	431a      	orrs	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006898:	2302      	movs	r3, #2
 800689a:	e05a      	b.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a21      	ldr	r2, [pc, #132]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d022      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e8:	d01d      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1b      	ldr	r2, [pc, #108]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1a      	ldr	r2, [pc, #104]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00e      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a18      	ldr	r2, [pc, #96]	; (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d009      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a17      	ldr	r2, [pc, #92]	; (8006974 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a15      	ldr	r2, [pc, #84]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d10c      	bne.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800692c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	4313      	orrs	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40010400 	.word	0x40010400
 8006974:	40014000 	.word	0x40014000
 8006978:	40001800 	.word	0x40001800

0800697c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <__NVIC_SetPriority>:
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	6039      	str	r1, [r7, #0]
 80069ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	db0a      	blt.n	80069ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	490c      	ldr	r1, [pc, #48]	; (80069f0 <__NVIC_SetPriority+0x4c>)
 80069be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c2:	0112      	lsls	r2, r2, #4
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	440b      	add	r3, r1
 80069c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069cc:	e00a      	b.n	80069e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	4908      	ldr	r1, [pc, #32]	; (80069f4 <__NVIC_SetPriority+0x50>)
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	3b04      	subs	r3, #4
 80069dc:	0112      	lsls	r2, r2, #4
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	440b      	add	r3, r1
 80069e2:	761a      	strb	r2, [r3, #24]
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	e000e100 	.word	0xe000e100
 80069f4:	e000ed00 	.word	0xe000ed00

080069f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <SysTick_Handler+0x1c>)
 80069fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a00:	f001 fd28 	bl	8008454 <xTaskGetSchedulerState>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d001      	beq.n	8006a0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a0a:	f002 fb0d 	bl	8009028 <xPortSysTickHandler>
  }
}
 8006a0e:	bf00      	nop
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	e000e010 	.word	0xe000e010

08006a18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	f06f 0004 	mvn.w	r0, #4
 8006a22:	f7ff ffbf 	bl	80069a4 <__NVIC_SetPriority>
#endif
}
 8006a26:	bf00      	nop
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a32:	f3ef 8305 	mrs	r3, IPSR
 8006a36:	603b      	str	r3, [r7, #0]
  return(result);
 8006a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a3e:	f06f 0305 	mvn.w	r3, #5
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	e00c      	b.n	8006a60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <osKernelInitialize+0x44>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d105      	bne.n	8006a5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a4e:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <osKernelInitialize+0x44>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	e002      	b.n	8006a60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a60:	687b      	ldr	r3, [r7, #4]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	200000a8 	.word	0x200000a8

08006a74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a7a:	f3ef 8305 	mrs	r3, IPSR
 8006a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a86:	f06f 0305 	mvn.w	r3, #5
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	e010      	b.n	8006ab0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <osKernelStart+0x48>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d109      	bne.n	8006aaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a96:	f7ff ffbf 	bl	8006a18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <osKernelStart+0x48>)
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006aa0:	f001 f87c 	bl	8007b9c <vTaskStartScheduler>
      stat = osOK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	e002      	b.n	8006ab0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006aae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ab0:	687b      	ldr	r3, [r7, #4]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	200000a8 	.word	0x200000a8

08006ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08e      	sub	sp, #56	; 0x38
 8006ac4:	af04      	add	r7, sp, #16
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad0:	f3ef 8305 	mrs	r3, IPSR
 8006ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ad6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d17e      	bne.n	8006bda <osThreadNew+0x11a>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d07b      	beq.n	8006bda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ae2:	2380      	movs	r3, #128	; 0x80
 8006ae4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ae6:	2318      	movs	r3, #24
 8006ae8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d045      	beq.n	8006b86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <osThreadNew+0x48>
        name = attr->name;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <osThreadNew+0x6e>
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b38      	cmp	r3, #56	; 0x38
 8006b20:	d805      	bhi.n	8006b2e <osThreadNew+0x6e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <osThreadNew+0x72>
        return (NULL);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	e054      	b.n	8006bdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	089b      	lsrs	r3, r3, #2
 8006b40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <osThreadNew+0xa8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2bbb      	cmp	r3, #187	; 0xbb
 8006b50:	d90a      	bls.n	8006b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d006      	beq.n	8006b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <osThreadNew+0xa8>
        mem = 1;
 8006b62:	2301      	movs	r3, #1
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	e010      	b.n	8006b8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10c      	bne.n	8006b8a <osThreadNew+0xca>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d108      	bne.n	8006b8a <osThreadNew+0xca>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <osThreadNew+0xca>
          mem = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	e001      	b.n	8006b8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d110      	bne.n	8006bb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b98:	9202      	str	r2, [sp, #8]
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fe0c 	bl	80077c4 <xTaskCreateStatic>
 8006bac:	4603      	mov	r3, r0
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	e013      	b.n	8006bda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d110      	bne.n	8006bda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	f107 0310 	add.w	r3, r7, #16
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fe57 	bl	800787e <xTaskCreate>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d001      	beq.n	8006bda <osThreadNew+0x11a>
            hTask = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bda:	693b      	ldr	r3, [r7, #16]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3728      	adds	r7, #40	; 0x28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bec:	f3ef 8305 	mrs	r3, IPSR
 8006bf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <osDelay+0x1c>
    stat = osErrorISR;
 8006bf8:	f06f 0305 	mvn.w	r3, #5
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e007      	b.n	8006c10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 ff92 	bl	8007b34 <vTaskDelay>
    }
  }

  return (stat);
 8006c10:	68fb      	ldr	r3, [r7, #12]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4a07      	ldr	r2, [pc, #28]	; (8006c48 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	4a06      	ldr	r2, [pc, #24]	; (8006c4c <vApplicationGetIdleTaskMemory+0x30>)
 8006c32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	601a      	str	r2, [r3, #0]
}
 8006c3a:	bf00      	nop
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	200000ac 	.word	0x200000ac
 8006c4c:	20000168 	.word	0x20000168

08006c50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <vApplicationGetTimerTaskMemory+0x2c>)
 8006c60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	4a06      	ldr	r2, [pc, #24]	; (8006c80 <vApplicationGetTimerTaskMemory+0x30>)
 8006c66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c6e:	601a      	str	r2, [r3, #0]
}
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20000368 	.word	0x20000368
 8006c80:	20000424 	.word	0x20000424

08006c84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f103 0208 	add.w	r2, r3, #8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f103 0208 	add.w	r2, r3, #8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f103 0208 	add.w	r2, r3, #8
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	601a      	str	r2, [r3, #0]
}
 8006d1a:	bf00      	nop
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d103      	bne.n	8006d46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e00c      	b.n	8006d60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	e002      	b.n	8006d54 <vListInsert+0x2e>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d2f6      	bcs.n	8006d4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	601a      	str	r2, [r3, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6892      	ldr	r2, [r2, #8]
 8006dae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6852      	ldr	r2, [r2, #4]
 8006db8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d103      	bne.n	8006dcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	1e5a      	subs	r2, r3, #1
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e16:	f002 f875 	bl	8008f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	441a      	add	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	3b01      	subs	r3, #1
 8006e48:	68f9      	ldr	r1, [r7, #12]
 8006e4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	22ff      	movs	r2, #255	; 0xff
 8006e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	22ff      	movs	r2, #255	; 0xff
 8006e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d114      	bne.n	8006e96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01a      	beq.n	8006eaa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3310      	adds	r3, #16
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 f929 	bl	80080d0 <xTaskRemoveFromEventList>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d012      	beq.n	8006eaa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e84:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <xQueueGenericReset+0xcc>)
 8006e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	e009      	b.n	8006eaa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3310      	adds	r3, #16
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fef2 	bl	8006c84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3324      	adds	r3, #36	; 0x24
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7ff feed 	bl	8006c84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006eaa:	f002 f85b 	bl	8008f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006eae:	2301      	movs	r3, #1
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08e      	sub	sp, #56	; 0x38
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <xQueueGenericCreateStatic+0x52>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <xQueueGenericCreateStatic+0x56>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <xQueueGenericCreateStatic+0x58>
 8006f12:	2300      	movs	r3, #0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	623b      	str	r3, [r7, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <xQueueGenericCreateStatic+0x7e>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <xQueueGenericCreateStatic+0x82>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <xQueueGenericCreateStatic+0x84>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	61fb      	str	r3, [r7, #28]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f5a:	2350      	movs	r3, #80	; 0x50
 8006f5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b50      	cmp	r3, #80	; 0x50
 8006f62:	d00a      	beq.n	8006f7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	61bb      	str	r3, [r7, #24]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00d      	beq.n	8006fa2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f805 	bl	8006fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3730      	adds	r7, #48	; 0x30
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d103      	bne.n	8006fc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	e002      	b.n	8006fce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fda:	2101      	movs	r1, #1
 8006fdc:	69b8      	ldr	r0, [r7, #24]
 8006fde:	f7ff ff05 	bl	8006dec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	78fa      	ldrb	r2, [r7, #3]
 8006fe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08e      	sub	sp, #56	; 0x38
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007002:	2300      	movs	r3, #0
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <xQueueGenericSend+0x32>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d103      	bne.n	8007034 <xQueueGenericSend+0x40>
 800702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <xQueueGenericSend+0x44>
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <xQueueGenericSend+0x46>
 8007038:	2300      	movs	r3, #0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <xQueueGenericSend+0x60>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b02      	cmp	r3, #2
 8007058:	d103      	bne.n	8007062 <xQueueGenericSend+0x6e>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <xQueueGenericSend+0x72>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <xQueueGenericSend+0x74>
 8007066:	2300      	movs	r3, #0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <xQueueGenericSend+0x8e>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	623b      	str	r3, [r7, #32]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007082:	f001 f9e7 	bl	8008454 <xTaskGetSchedulerState>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <xQueueGenericSend+0x9e>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <xQueueGenericSend+0xa2>
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <xQueueGenericSend+0xa4>
 8007096:	2300      	movs	r3, #0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	61fb      	str	r3, [r7, #28]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070b2:	f001 ff27 	bl	8008f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <xQueueGenericSend+0xd4>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d129      	bne.n	800711c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ce:	f000 fa0b 	bl	80074e8 <prvCopyDataToQueue>
 80070d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d010      	beq.n	80070fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fff5 	bl	80080d0 <xTaskRemoveFromEventList>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d013      	beq.n	8007114 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070ec:	4b3f      	ldr	r3, [pc, #252]	; (80071ec <xQueueGenericSend+0x1f8>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	e00a      	b.n	8007114 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007104:	4b39      	ldr	r3, [pc, #228]	; (80071ec <xQueueGenericSend+0x1f8>)
 8007106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007114:	f001 ff26 	bl	8008f64 <vPortExitCritical>
				return pdPASS;
 8007118:	2301      	movs	r3, #1
 800711a:	e063      	b.n	80071e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007122:	f001 ff1f 	bl	8008f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007126:	2300      	movs	r3, #0
 8007128:	e05c      	b.n	80071e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	4618      	mov	r0, r3
 8007136:	f001 f82f 	bl	8008198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800713a:	2301      	movs	r3, #1
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800713e:	f001 ff11 	bl	8008f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007142:	f000 fd9b 	bl	8007c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007146:	f001 fedd 	bl	8008f04 <vPortEnterCritical>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007150:	b25b      	sxtb	r3, r3
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d103      	bne.n	8007160 <xQueueGenericSend+0x16c>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007166:	b25b      	sxtb	r3, r3
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d103      	bne.n	8007176 <xQueueGenericSend+0x182>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007176:	f001 fef5 	bl	8008f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800717a:	1d3a      	adds	r2, r7, #4
 800717c:	f107 0314 	add.w	r3, r7, #20
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f81e 	bl	80081c4 <xTaskCheckForTimeOut>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d124      	bne.n	80071d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800718e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007190:	f000 faa2 	bl	80076d8 <prvIsQueueFull>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d018      	beq.n	80071cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	3310      	adds	r3, #16
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 ff44 	bl	8008030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071aa:	f000 fa2d 	bl	8007608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071ae:	f000 fd73 	bl	8007c98 <xTaskResumeAll>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f47f af7c 	bne.w	80070b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80071ba:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <xQueueGenericSend+0x1f8>)
 80071bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	e772      	b.n	80070b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ce:	f000 fa1b 	bl	8007608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071d2:	f000 fd61 	bl	8007c98 <xTaskResumeAll>
 80071d6:	e76c      	b.n	80070b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071da:	f000 fa15 	bl	8007608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071de:	f000 fd5b 	bl	8007c98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3738      	adds	r7, #56	; 0x38
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	e000ed04 	.word	0xe000ed04

080071f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b090      	sub	sp, #64	; 0x40
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d103      	bne.n	800722c <xQueueGenericSendFromISR+0x3c>
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <xQueueGenericSendFromISR+0x40>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <xQueueGenericSendFromISR+0x42>
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d103      	bne.n	800725a <xQueueGenericSendFromISR+0x6a>
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <xQueueGenericSendFromISR+0x6e>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <xQueueGenericSendFromISR+0x70>
 800725e:	2300      	movs	r3, #0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	623b      	str	r3, [r7, #32]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800727a:	f001 ff25 	bl	80090c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800727e:	f3ef 8211 	mrs	r2, BASEPRI
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	61fa      	str	r2, [r7, #28]
 8007294:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007296:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d302      	bcc.n	80072ac <xQueueGenericSendFromISR+0xbc>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d12f      	bne.n	800730c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072c2:	f000 f911 	bl	80074e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ce:	d112      	bne.n	80072f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d016      	beq.n	8007306 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	3324      	adds	r3, #36	; 0x24
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 fef7 	bl	80080d0 <xTaskRemoveFromEventList>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00e      	beq.n	8007306 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e007      	b.n	8007306 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072fa:	3301      	adds	r3, #1
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	b25a      	sxtb	r2, r3
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007306:	2301      	movs	r3, #1
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800730a:	e001      	b.n	8007310 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800730c:	2300      	movs	r3, #0
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007312:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800731a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800731c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800731e:	4618      	mov	r0, r3
 8007320:	3740      	adds	r7, #64	; 0x40
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08c      	sub	sp, #48	; 0x30
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <xQueueReceive+0x30>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	623b      	str	r3, [r7, #32]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d103      	bne.n	8007366 <xQueueReceive+0x3e>
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <xQueueReceive+0x42>
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <xQueueReceive+0x44>
 800736a:	2300      	movs	r3, #0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <xQueueReceive+0x5e>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	61fb      	str	r3, [r7, #28]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007386:	f001 f865 	bl	8008454 <xTaskGetSchedulerState>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <xQueueReceive+0x6e>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <xQueueReceive+0x72>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <xQueueReceive+0x74>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xQueueReceive+0x8e>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	61bb      	str	r3, [r7, #24]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073b6:	f001 fda5 	bl	8008f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d01f      	beq.n	8007406 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ca:	f000 f8f7 	bl	80075bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	1e5a      	subs	r2, r3, #1
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00f      	beq.n	80073fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	3310      	adds	r3, #16
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fe74 	bl	80080d0 <xTaskRemoveFromEventList>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073ee:	4b3d      	ldr	r3, [pc, #244]	; (80074e4 <xQueueReceive+0x1bc>)
 80073f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073fe:	f001 fdb1 	bl	8008f64 <vPortExitCritical>
				return pdPASS;
 8007402:	2301      	movs	r3, #1
 8007404:	e069      	b.n	80074da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800740c:	f001 fdaa 	bl	8008f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007410:	2300      	movs	r3, #0
 8007412:	e062      	b.n	80074da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800741a:	f107 0310 	add.w	r3, r7, #16
 800741e:	4618      	mov	r0, r3
 8007420:	f000 feba 	bl	8008198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007428:	f001 fd9c 	bl	8008f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800742c:	f000 fc26 	bl	8007c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007430:	f001 fd68 	bl	8008f04 <vPortEnterCritical>
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800743a:	b25b      	sxtb	r3, r3
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d103      	bne.n	800744a <xQueueReceive+0x122>
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007450:	b25b      	sxtb	r3, r3
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d103      	bne.n	8007460 <xQueueReceive+0x138>
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007460:	f001 fd80 	bl	8008f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007464:	1d3a      	adds	r2, r7, #4
 8007466:	f107 0310 	add.w	r3, r7, #16
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fea9 	bl	80081c4 <xTaskCheckForTimeOut>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d123      	bne.n	80074c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800747a:	f000 f917 	bl	80076ac <prvIsQueueEmpty>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d017      	beq.n	80074b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	3324      	adds	r3, #36	; 0x24
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fdcf 	bl	8008030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007494:	f000 f8b8 	bl	8007608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007498:	f000 fbfe 	bl	8007c98 <xTaskResumeAll>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d189      	bne.n	80073b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074a2:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <xQueueReceive+0x1bc>)
 80074a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	e780      	b.n	80073b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b6:	f000 f8a7 	bl	8007608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074ba:	f000 fbed 	bl	8007c98 <xTaskResumeAll>
 80074be:	e77a      	b.n	80073b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c2:	f000 f8a1 	bl	8007608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074c6:	f000 fbe7 	bl	8007c98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074cc:	f000 f8ee 	bl	80076ac <prvIsQueueEmpty>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f43f af6f 	beq.w	80073b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3730      	adds	r7, #48	; 0x30
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	e000ed04 	.word	0xe000ed04

080074e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10d      	bne.n	8007522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d14d      	bne.n	80075aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 ffbc 	bl	8008490 <xTaskPriorityDisinherit>
 8007518:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	609a      	str	r2, [r3, #8]
 8007520:	e043      	b.n	80075aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d119      	bne.n	800755c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6858      	ldr	r0, [r3, #4]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	461a      	mov	r2, r3
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	f002 f818 	bl	8009568 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	429a      	cmp	r2, r3
 8007550:	d32b      	bcc.n	80075aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]
 800755a:	e026      	b.n	80075aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68d8      	ldr	r0, [r3, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	461a      	mov	r2, r3
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	f001 fffe 	bl	8009568 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	425b      	negs	r3, r3
 8007576:	441a      	add	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	429a      	cmp	r2, r3
 8007586:	d207      	bcs.n	8007598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	425b      	negs	r3, r3
 8007592:	441a      	add	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d105      	bne.n	80075aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075b2:	697b      	ldr	r3, [r7, #20]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d018      	beq.n	8007600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	441a      	add	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d303      	bcc.n	80075f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68d9      	ldr	r1, [r3, #12]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	461a      	mov	r2, r3
 80075fa:	6838      	ldr	r0, [r7, #0]
 80075fc:	f001 ffb4 	bl	8009568 <memcpy>
	}
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007610:	f001 fc78 	bl	8008f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800761a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800761c:	e011      	b.n	8007642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d012      	beq.n	800764c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3324      	adds	r3, #36	; 0x24
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fd50 	bl	80080d0 <xTaskRemoveFromEventList>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007636:	f000 fe27 	bl	8008288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	3b01      	subs	r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007646:	2b00      	cmp	r3, #0
 8007648:	dce9      	bgt.n	800761e <prvUnlockQueue+0x16>
 800764a:	e000      	b.n	800764e <prvUnlockQueue+0x46>
					break;
 800764c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	22ff      	movs	r2, #255	; 0xff
 8007652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007656:	f001 fc85 	bl	8008f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800765a:	f001 fc53 	bl	8008f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007666:	e011      	b.n	800768c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d012      	beq.n	8007696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3310      	adds	r3, #16
 8007674:	4618      	mov	r0, r3
 8007676:	f000 fd2b 	bl	80080d0 <xTaskRemoveFromEventList>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007680:	f000 fe02 	bl	8008288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	3b01      	subs	r3, #1
 8007688:	b2db      	uxtb	r3, r3
 800768a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800768c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007690:	2b00      	cmp	r3, #0
 8007692:	dce9      	bgt.n	8007668 <prvUnlockQueue+0x60>
 8007694:	e000      	b.n	8007698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	22ff      	movs	r2, #255	; 0xff
 800769c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076a0:	f001 fc60 	bl	8008f64 <vPortExitCritical>
}
 80076a4:	bf00      	nop
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076b4:	f001 fc26 	bl	8008f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e001      	b.n	80076ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ca:	f001 fc4b 	bl	8008f64 <vPortExitCritical>

	return xReturn;
 80076ce:	68fb      	ldr	r3, [r7, #12]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076e0:	f001 fc10 	bl	8008f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d102      	bne.n	80076f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076f0:	2301      	movs	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e001      	b.n	80076fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076fa:	f001 fc33 	bl	8008f64 <vPortExitCritical>

	return xReturn;
 80076fe:	68fb      	ldr	r3, [r7, #12]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e014      	b.n	8007742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007718:	4a0f      	ldr	r2, [pc, #60]	; (8007758 <vQueueAddToRegistry+0x50>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007724:	490c      	ldr	r1, [pc, #48]	; (8007758 <vQueueAddToRegistry+0x50>)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800772e:	4a0a      	ldr	r2, [pc, #40]	; (8007758 <vQueueAddToRegistry+0x50>)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	4413      	add	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800773a:	e006      	b.n	800774a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b07      	cmp	r3, #7
 8007746:	d9e7      	bls.n	8007718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	20004eec 	.word	0x20004eec

0800775c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800776c:	f001 fbca 	bl	8008f04 <vPortEnterCritical>
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007776:	b25b      	sxtb	r3, r3
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d103      	bne.n	8007786 <vQueueWaitForMessageRestricted+0x2a>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800778c:	b25b      	sxtb	r3, r3
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007792:	d103      	bne.n	800779c <vQueueWaitForMessageRestricted+0x40>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800779c:	f001 fbe2 	bl	8008f64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fc61 	bl	8008078 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077b6:	6978      	ldr	r0, [r7, #20]
 80077b8:	f7ff ff26 	bl	8007608 <prvUnlockQueue>
	}
 80077bc:	bf00      	nop
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08e      	sub	sp, #56	; 0x38
 80077c8:	af04      	add	r7, sp, #16
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	623b      	str	r3, [r7, #32]
}
 80077ea:	bf00      	nop
 80077ec:	e7fe      	b.n	80077ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <xTaskCreateStatic+0x46>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	61fb      	str	r3, [r7, #28]
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800780a:	23bc      	movs	r3, #188	; 0xbc
 800780c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2bbc      	cmp	r3, #188	; 0xbc
 8007812:	d00a      	beq.n	800782a <xTaskCreateStatic+0x66>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	61bb      	str	r3, [r7, #24]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800782a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800782c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782e:	2b00      	cmp	r3, #0
 8007830:	d01e      	beq.n	8007870 <xTaskCreateStatic+0xac>
 8007832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01b      	beq.n	8007870 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007840:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	2202      	movs	r2, #2
 8007846:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800784a:	2300      	movs	r3, #0
 800784c:	9303      	str	r3, [sp, #12]
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	9302      	str	r3, [sp, #8]
 8007852:	f107 0314 	add.w	r3, r7, #20
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 f850 	bl	8007908 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800786a:	f000 f8f3 	bl	8007a54 <prvAddNewTaskToReadyList>
 800786e:	e001      	b.n	8007874 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007874:	697b      	ldr	r3, [r7, #20]
	}
 8007876:	4618      	mov	r0, r3
 8007878:	3728      	adds	r7, #40	; 0x28
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800787e:	b580      	push	{r7, lr}
 8007880:	b08c      	sub	sp, #48	; 0x30
 8007882:	af04      	add	r7, sp, #16
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4618      	mov	r0, r3
 8007894:	f001 fc58 	bl	8009148 <pvPortMalloc>
 8007898:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00e      	beq.n	80078be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078a0:	20bc      	movs	r0, #188	; 0xbc
 80078a2:	f001 fc51 	bl	8009148 <pvPortMalloc>
 80078a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	631a      	str	r2, [r3, #48]	; 0x30
 80078b4:	e005      	b.n	80078c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078b6:	6978      	ldr	r0, [r7, #20]
 80078b8:	f001 fd12 	bl	80092e0 <vPortFree>
 80078bc:	e001      	b.n	80078c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d017      	beq.n	80078f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078d0:	88fa      	ldrh	r2, [r7, #6]
 80078d2:	2300      	movs	r3, #0
 80078d4:	9303      	str	r3, [sp, #12]
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	9302      	str	r3, [sp, #8]
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f80e 	bl	8007908 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078ec:	69f8      	ldr	r0, [r7, #28]
 80078ee:	f000 f8b1 	bl	8007a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078f2:	2301      	movs	r3, #1
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e002      	b.n	80078fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007900:	4618      	mov	r0, r3
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	461a      	mov	r2, r3
 8007920:	21a5      	movs	r1, #165	; 0xa5
 8007922:	f001 fe2f 	bl	8009584 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007930:	3b01      	subs	r3, #1
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f023 0307 	bic.w	r3, r3, #7
 800793e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <prvInitialiseNewTask+0x58>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	617b      	str	r3, [r7, #20]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01f      	beq.n	80079a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007966:	2300      	movs	r3, #0
 8007968:	61fb      	str	r3, [r7, #28]
 800796a:	e012      	b.n	8007992 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	7819      	ldrb	r1, [r3, #0]
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	4413      	add	r3, r2
 800797a:	3334      	adds	r3, #52	; 0x34
 800797c:	460a      	mov	r2, r1
 800797e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	4413      	add	r3, r2
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d006      	beq.n	800799a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3301      	adds	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2b0f      	cmp	r3, #15
 8007996:	d9e9      	bls.n	800796c <prvInitialiseNewTask+0x64>
 8007998:	e000      	b.n	800799c <prvInitialiseNewTask+0x94>
			{
				break;
 800799a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079a4:	e003      	b.n	80079ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	2b37      	cmp	r3, #55	; 0x37
 80079b2:	d901      	bls.n	80079b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079b4:	2337      	movs	r3, #55	; 0x37
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	2200      	movs	r2, #0
 80079c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	3304      	adds	r3, #4
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff f978 	bl	8006cc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	3318      	adds	r3, #24
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff f973 	bl	8006cc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	3354      	adds	r3, #84	; 0x54
 8007a08:	2260      	movs	r2, #96	; 0x60
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 fdb9 	bl	8009584 <memset>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	4a0c      	ldr	r2, [pc, #48]	; (8007a48 <prvInitialiseNewTask+0x140>)
 8007a16:	659a      	str	r2, [r3, #88]	; 0x58
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	4a0c      	ldr	r2, [pc, #48]	; (8007a4c <prvInitialiseNewTask+0x144>)
 8007a1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <prvInitialiseNewTask+0x148>)
 8007a22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	68f9      	ldr	r1, [r7, #12]
 8007a28:	69b8      	ldr	r0, [r7, #24]
 8007a2a:	f001 f941 	bl	8008cb0 <pxPortInitialiseStack>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a40:	bf00      	nop
 8007a42:	3720      	adds	r7, #32
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	080098c0 	.word	0x080098c0
 8007a4c:	080098e0 	.word	0x080098e0
 8007a50:	080098a0 	.word	0x080098a0

08007a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a5c:	f001 fa52 	bl	8008f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a60:	4b2d      	ldr	r3, [pc, #180]	; (8007b18 <prvAddNewTaskToReadyList+0xc4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	4a2c      	ldr	r2, [pc, #176]	; (8007b18 <prvAddNewTaskToReadyList+0xc4>)
 8007a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a6a:	4b2c      	ldr	r3, [pc, #176]	; (8007b1c <prvAddNewTaskToReadyList+0xc8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a72:	4a2a      	ldr	r2, [pc, #168]	; (8007b1c <prvAddNewTaskToReadyList+0xc8>)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a78:	4b27      	ldr	r3, [pc, #156]	; (8007b18 <prvAddNewTaskToReadyList+0xc4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d110      	bne.n	8007aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a80:	f000 fc26 	bl	80082d0 <prvInitialiseTaskLists>
 8007a84:	e00d      	b.n	8007aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a86:	4b26      	ldr	r3, [pc, #152]	; (8007b20 <prvAddNewTaskToReadyList+0xcc>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a8e:	4b23      	ldr	r3, [pc, #140]	; (8007b1c <prvAddNewTaskToReadyList+0xc8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d802      	bhi.n	8007aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a9c:	4a1f      	ldr	r2, [pc, #124]	; (8007b1c <prvAddNewTaskToReadyList+0xc8>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aa2:	4b20      	ldr	r3, [pc, #128]	; (8007b24 <prvAddNewTaskToReadyList+0xd0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <prvAddNewTaskToReadyList+0xd0>)
 8007aaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007aac:	4b1d      	ldr	r3, [pc, #116]	; (8007b24 <prvAddNewTaskToReadyList+0xd0>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <prvAddNewTaskToReadyList+0xd4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d903      	bls.n	8007ac8 <prvAddNewTaskToReadyList+0x74>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <prvAddNewTaskToReadyList+0xd4>)
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4a15      	ldr	r2, [pc, #84]	; (8007b2c <prvAddNewTaskToReadyList+0xd8>)
 8007ad6:	441a      	add	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f7ff f8fd 	bl	8006cde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ae4:	f001 fa3e 	bl	8008f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <prvAddNewTaskToReadyList+0xcc>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00e      	beq.n	8007b0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <prvAddNewTaskToReadyList+0xc8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d207      	bcs.n	8007b0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <prvAddNewTaskToReadyList+0xdc>)
 8007b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000cf8 	.word	0x20000cf8
 8007b1c:	20000824 	.word	0x20000824
 8007b20:	20000d04 	.word	0x20000d04
 8007b24:	20000d14 	.word	0x20000d14
 8007b28:	20000d00 	.word	0x20000d00
 8007b2c:	20000828 	.word	0x20000828
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d017      	beq.n	8007b76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b46:	4b13      	ldr	r3, [pc, #76]	; (8007b94 <vTaskDelay+0x60>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <vTaskDelay+0x30>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	60bb      	str	r3, [r7, #8]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b64:	f000 f88a 	bl	8007c7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b68:	2100      	movs	r1, #0
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fcfe 	bl	800856c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b70:	f000 f892 	bl	8007c98 <xTaskResumeAll>
 8007b74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d107      	bne.n	8007b8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <vTaskDelay+0x64>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000d20 	.word	0x20000d20
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08a      	sub	sp, #40	; 0x28
 8007ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007baa:	463a      	mov	r2, r7
 8007bac:	1d39      	adds	r1, r7, #4
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff f832 	bl	8006c1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	9202      	str	r2, [sp, #8]
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	460a      	mov	r2, r1
 8007bca:	4924      	ldr	r1, [pc, #144]	; (8007c5c <vTaskStartScheduler+0xc0>)
 8007bcc:	4824      	ldr	r0, [pc, #144]	; (8007c60 <vTaskStartScheduler+0xc4>)
 8007bce:	f7ff fdf9 	bl	80077c4 <xTaskCreateStatic>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4a23      	ldr	r2, [pc, #140]	; (8007c64 <vTaskStartScheduler+0xc8>)
 8007bd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bd8:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <vTaskStartScheduler+0xc8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007be0:	2301      	movs	r3, #1
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	e001      	b.n	8007bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d102      	bne.n	8007bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bf0:	f000 fd10 	bl	8008614 <xTimerCreateTimerTask>
 8007bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d11b      	bne.n	8007c34 <vTaskStartScheduler+0x98>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	613b      	str	r3, [r7, #16]
}
 8007c0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c10:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <vTaskStartScheduler+0xcc>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3354      	adds	r3, #84	; 0x54
 8007c16:	4a15      	ldr	r2, [pc, #84]	; (8007c6c <vTaskStartScheduler+0xd0>)
 8007c18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c1a:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <vTaskStartScheduler+0xd4>)
 8007c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <vTaskStartScheduler+0xd8>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c28:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <vTaskStartScheduler+0xdc>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c2e:	f001 f8c7 	bl	8008dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c32:	e00e      	b.n	8007c52 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d10a      	bne.n	8007c52 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <vTaskStartScheduler+0xb4>
}
 8007c52:	bf00      	nop
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	0800976c 	.word	0x0800976c
 8007c60:	080082a1 	.word	0x080082a1
 8007c64:	20000d1c 	.word	0x20000d1c
 8007c68:	20000824 	.word	0x20000824
 8007c6c:	20000010 	.word	0x20000010
 8007c70:	20000d18 	.word	0x20000d18
 8007c74:	20000d04 	.word	0x20000d04
 8007c78:	20000cfc 	.word	0x20000cfc

08007c7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c80:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <vTaskSuspendAll+0x18>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3301      	adds	r3, #1
 8007c86:	4a03      	ldr	r2, [pc, #12]	; (8007c94 <vTaskSuspendAll+0x18>)
 8007c88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c8a:	bf00      	nop
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	20000d20 	.word	0x20000d20

08007c98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ca6:	4b42      	ldr	r3, [pc, #264]	; (8007db0 <xTaskResumeAll+0x118>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10a      	bne.n	8007cc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	603b      	str	r3, [r7, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	e7fe      	b.n	8007cc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cc4:	f001 f91e 	bl	8008f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cc8:	4b39      	ldr	r3, [pc, #228]	; (8007db0 <xTaskResumeAll+0x118>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	4a38      	ldr	r2, [pc, #224]	; (8007db0 <xTaskResumeAll+0x118>)
 8007cd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd2:	4b37      	ldr	r3, [pc, #220]	; (8007db0 <xTaskResumeAll+0x118>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d162      	bne.n	8007da0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cda:	4b36      	ldr	r3, [pc, #216]	; (8007db4 <xTaskResumeAll+0x11c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d05e      	beq.n	8007da0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ce2:	e02f      	b.n	8007d44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce4:	4b34      	ldr	r3, [pc, #208]	; (8007db8 <xTaskResumeAll+0x120>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3318      	adds	r3, #24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff f851 	bl	8006d98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff f84c 	bl	8006d98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d04:	4b2d      	ldr	r3, [pc, #180]	; (8007dbc <xTaskResumeAll+0x124>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d903      	bls.n	8007d14 <xTaskResumeAll+0x7c>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	4a2a      	ldr	r2, [pc, #168]	; (8007dbc <xTaskResumeAll+0x124>)
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4a27      	ldr	r2, [pc, #156]	; (8007dc0 <xTaskResumeAll+0x128>)
 8007d22:	441a      	add	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7fe ffd7 	bl	8006cde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d34:	4b23      	ldr	r3, [pc, #140]	; (8007dc4 <xTaskResumeAll+0x12c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d302      	bcc.n	8007d44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d3e:	4b22      	ldr	r3, [pc, #136]	; (8007dc8 <xTaskResumeAll+0x130>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d44:	4b1c      	ldr	r3, [pc, #112]	; (8007db8 <xTaskResumeAll+0x120>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1cb      	bne.n	8007ce4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d52:	f000 fb5f 	bl	8008414 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d56:	4b1d      	ldr	r3, [pc, #116]	; (8007dcc <xTaskResumeAll+0x134>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d010      	beq.n	8007d84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d62:	f000 f847 	bl	8007df4 <xTaskIncrementTick>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d6c:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <xTaskResumeAll+0x130>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1f1      	bne.n	8007d62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <xTaskResumeAll+0x134>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d84:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <xTaskResumeAll+0x130>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d009      	beq.n	8007da0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <xTaskResumeAll+0x138>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007da0:	f001 f8e0 	bl	8008f64 <vPortExitCritical>

	return xAlreadyYielded;
 8007da4:	68bb      	ldr	r3, [r7, #8]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000d20 	.word	0x20000d20
 8007db4:	20000cf8 	.word	0x20000cf8
 8007db8:	20000cb8 	.word	0x20000cb8
 8007dbc:	20000d00 	.word	0x20000d00
 8007dc0:	20000828 	.word	0x20000828
 8007dc4:	20000824 	.word	0x20000824
 8007dc8:	20000d0c 	.word	0x20000d0c
 8007dcc:	20000d08 	.word	0x20000d08
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <xTaskGetTickCount+0x1c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007de0:	687b      	ldr	r3, [r7, #4]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20000cfc 	.word	0x20000cfc

08007df4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dfe:	4b4f      	ldr	r3, [pc, #316]	; (8007f3c <xTaskIncrementTick+0x148>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f040 808f 	bne.w	8007f26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e08:	4b4d      	ldr	r3, [pc, #308]	; (8007f40 <xTaskIncrementTick+0x14c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e10:	4a4b      	ldr	r2, [pc, #300]	; (8007f40 <xTaskIncrementTick+0x14c>)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d120      	bne.n	8007e5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e1c:	4b49      	ldr	r3, [pc, #292]	; (8007f44 <xTaskIncrementTick+0x150>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <xTaskIncrementTick+0x48>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	603b      	str	r3, [r7, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <xTaskIncrementTick+0x46>
 8007e3c:	4b41      	ldr	r3, [pc, #260]	; (8007f44 <xTaskIncrementTick+0x150>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	4b41      	ldr	r3, [pc, #260]	; (8007f48 <xTaskIncrementTick+0x154>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a3f      	ldr	r2, [pc, #252]	; (8007f44 <xTaskIncrementTick+0x150>)
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	4a3f      	ldr	r2, [pc, #252]	; (8007f48 <xTaskIncrementTick+0x154>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	4b3e      	ldr	r3, [pc, #248]	; (8007f4c <xTaskIncrementTick+0x158>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	4a3d      	ldr	r2, [pc, #244]	; (8007f4c <xTaskIncrementTick+0x158>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	f000 fadb 	bl	8008414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e5e:	4b3c      	ldr	r3, [pc, #240]	; (8007f50 <xTaskIncrementTick+0x15c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d349      	bcc.n	8007efc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e68:	4b36      	ldr	r3, [pc, #216]	; (8007f44 <xTaskIncrementTick+0x150>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d104      	bne.n	8007e7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e72:	4b37      	ldr	r3, [pc, #220]	; (8007f50 <xTaskIncrementTick+0x15c>)
 8007e74:	f04f 32ff 	mov.w	r2, #4294967295
 8007e78:	601a      	str	r2, [r3, #0]
					break;
 8007e7a:	e03f      	b.n	8007efc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7c:	4b31      	ldr	r3, [pc, #196]	; (8007f44 <xTaskIncrementTick+0x150>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d203      	bcs.n	8007e9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e94:	4a2e      	ldr	r2, [pc, #184]	; (8007f50 <xTaskIncrementTick+0x15c>)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e9a:	e02f      	b.n	8007efc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe ff79 	bl	8006d98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d004      	beq.n	8007eb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3318      	adds	r3, #24
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe ff70 	bl	8006d98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebc:	4b25      	ldr	r3, [pc, #148]	; (8007f54 <xTaskIncrementTick+0x160>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d903      	bls.n	8007ecc <xTaskIncrementTick+0xd8>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	4a22      	ldr	r2, [pc, #136]	; (8007f54 <xTaskIncrementTick+0x160>)
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4a1f      	ldr	r2, [pc, #124]	; (8007f58 <xTaskIncrementTick+0x164>)
 8007eda:	441a      	add	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	f7fe fefb 	bl	8006cde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eec:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <xTaskIncrementTick+0x168>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3b8      	bcc.n	8007e68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007efa:	e7b5      	b.n	8007e68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007efc:	4b17      	ldr	r3, [pc, #92]	; (8007f5c <xTaskIncrementTick+0x168>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f02:	4915      	ldr	r1, [pc, #84]	; (8007f58 <xTaskIncrementTick+0x164>)
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	440b      	add	r3, r1
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d901      	bls.n	8007f18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <xTaskIncrementTick+0x16c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	e004      	b.n	8007f30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <xTaskIncrementTick+0x170>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	4a0d      	ldr	r2, [pc, #52]	; (8007f64 <xTaskIncrementTick+0x170>)
 8007f2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f30:	697b      	ldr	r3, [r7, #20]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000d20 	.word	0x20000d20
 8007f40:	20000cfc 	.word	0x20000cfc
 8007f44:	20000cb0 	.word	0x20000cb0
 8007f48:	20000cb4 	.word	0x20000cb4
 8007f4c:	20000d10 	.word	0x20000d10
 8007f50:	20000d18 	.word	0x20000d18
 8007f54:	20000d00 	.word	0x20000d00
 8007f58:	20000828 	.word	0x20000828
 8007f5c:	20000824 	.word	0x20000824
 8007f60:	20000d0c 	.word	0x20000d0c
 8007f64:	20000d08 	.word	0x20000d08

08007f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f6e:	4b2a      	ldr	r3, [pc, #168]	; (8008018 <vTaskSwitchContext+0xb0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f76:	4b29      	ldr	r3, [pc, #164]	; (800801c <vTaskSwitchContext+0xb4>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f7c:	e046      	b.n	800800c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007f7e:	4b27      	ldr	r3, [pc, #156]	; (800801c <vTaskSwitchContext+0xb4>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f84:	4b26      	ldr	r3, [pc, #152]	; (8008020 <vTaskSwitchContext+0xb8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	e010      	b.n	8007fae <vTaskSwitchContext+0x46>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	607b      	str	r3, [r7, #4]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <vTaskSwitchContext+0x3e>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	491d      	ldr	r1, [pc, #116]	; (8008024 <vTaskSwitchContext+0xbc>)
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0e4      	beq.n	8007f8c <vTaskSwitchContext+0x24>
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4a15      	ldr	r2, [pc, #84]	; (8008024 <vTaskSwitchContext+0xbc>)
 8007fce:	4413      	add	r3, r2
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	605a      	str	r2, [r3, #4]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d104      	bne.n	8007ff2 <vTaskSwitchContext+0x8a>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	605a      	str	r2, [r3, #4]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4a0b      	ldr	r2, [pc, #44]	; (8008028 <vTaskSwitchContext+0xc0>)
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	4a08      	ldr	r2, [pc, #32]	; (8008020 <vTaskSwitchContext+0xb8>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008002:	4b09      	ldr	r3, [pc, #36]	; (8008028 <vTaskSwitchContext+0xc0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3354      	adds	r3, #84	; 0x54
 8008008:	4a08      	ldr	r2, [pc, #32]	; (800802c <vTaskSwitchContext+0xc4>)
 800800a:	6013      	str	r3, [r2, #0]
}
 800800c:	bf00      	nop
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	20000d20 	.word	0x20000d20
 800801c:	20000d0c 	.word	0x20000d0c
 8008020:	20000d00 	.word	0x20000d00
 8008024:	20000828 	.word	0x20000828
 8008028:	20000824 	.word	0x20000824
 800802c:	20000010 	.word	0x20000010

08008030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	60fb      	str	r3, [r7, #12]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008056:	4b07      	ldr	r3, [pc, #28]	; (8008074 <vTaskPlaceOnEventList+0x44>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3318      	adds	r3, #24
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7fe fe61 	bl	8006d26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008064:	2101      	movs	r1, #1
 8008066:	6838      	ldr	r0, [r7, #0]
 8008068:	f000 fa80 	bl	800856c <prvAddCurrentTaskToDelayedList>
}
 800806c:	bf00      	nop
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20000824 	.word	0x20000824

08008078 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10a      	bne.n	80080a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	617b      	str	r3, [r7, #20]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080a0:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <vTaskPlaceOnEventListRestricted+0x54>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3318      	adds	r3, #24
 80080a6:	4619      	mov	r1, r3
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7fe fe18 	bl	8006cde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295
 80080b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	68b8      	ldr	r0, [r7, #8]
 80080be:	f000 fa55 	bl	800856c <prvAddCurrentTaskToDelayedList>
	}
 80080c2:	bf00      	nop
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000824 	.word	0x20000824

080080d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60fb      	str	r3, [r7, #12]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	3318      	adds	r3, #24
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fe49 	bl	8006d98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008106:	4b1e      	ldr	r3, [pc, #120]	; (8008180 <xTaskRemoveFromEventList+0xb0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d11d      	bne.n	800814a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	3304      	adds	r3, #4
 8008112:	4618      	mov	r0, r3
 8008114:	f7fe fe40 	bl	8006d98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811c:	4b19      	ldr	r3, [pc, #100]	; (8008184 <xTaskRemoveFromEventList+0xb4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d903      	bls.n	800812c <xTaskRemoveFromEventList+0x5c>
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008128:	4a16      	ldr	r2, [pc, #88]	; (8008184 <xTaskRemoveFromEventList+0xb4>)
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4a13      	ldr	r2, [pc, #76]	; (8008188 <xTaskRemoveFromEventList+0xb8>)
 800813a:	441a      	add	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe fdcb 	bl	8006cde <vListInsertEnd>
 8008148:	e005      	b.n	8008156 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	3318      	adds	r3, #24
 800814e:	4619      	mov	r1, r3
 8008150:	480e      	ldr	r0, [pc, #56]	; (800818c <xTaskRemoveFromEventList+0xbc>)
 8008152:	f7fe fdc4 	bl	8006cde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815a:	4b0d      	ldr	r3, [pc, #52]	; (8008190 <xTaskRemoveFromEventList+0xc0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	429a      	cmp	r2, r3
 8008162:	d905      	bls.n	8008170 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008168:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <xTaskRemoveFromEventList+0xc4>)
 800816a:	2201      	movs	r2, #1
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	e001      	b.n	8008174 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008170:	2300      	movs	r3, #0
 8008172:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008174:	697b      	ldr	r3, [r7, #20]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000d20 	.word	0x20000d20
 8008184:	20000d00 	.word	0x20000d00
 8008188:	20000828 	.word	0x20000828
 800818c:	20000cb8 	.word	0x20000cb8
 8008190:	20000824 	.word	0x20000824
 8008194:	20000d0c 	.word	0x20000d0c

08008198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081a0:	4b06      	ldr	r3, [pc, #24]	; (80081bc <vTaskInternalSetTimeOutState+0x24>)
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <vTaskInternalSetTimeOutState+0x28>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	605a      	str	r2, [r3, #4]
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000d10 	.word	0x20000d10
 80081c0:	20000cfc 	.word	0x20000cfc

080081c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	613b      	str	r3, [r7, #16]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	60fb      	str	r3, [r7, #12]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008206:	f000 fe7d 	bl	8008f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800820a:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <xTaskCheckForTimeOut+0xbc>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008222:	d102      	bne.n	800822a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	e023      	b.n	8008272 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4b15      	ldr	r3, [pc, #84]	; (8008284 <xTaskCheckForTimeOut+0xc0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d007      	beq.n	8008246 <xTaskCheckForTimeOut+0x82>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	429a      	cmp	r2, r3
 800823e:	d302      	bcc.n	8008246 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	e015      	b.n	8008272 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	429a      	cmp	r2, r3
 800824e:	d20b      	bcs.n	8008268 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff ff9b 	bl	8008198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	e004      	b.n	8008272 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008272:	f000 fe77 	bl	8008f64 <vPortExitCritical>

	return xReturn;
 8008276:	69fb      	ldr	r3, [r7, #28]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3720      	adds	r7, #32
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000cfc 	.word	0x20000cfc
 8008284:	20000d10 	.word	0x20000d10

08008288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008288:	b480      	push	{r7}
 800828a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800828c:	4b03      	ldr	r3, [pc, #12]	; (800829c <vTaskMissedYield+0x14>)
 800828e:	2201      	movs	r2, #1
 8008290:	601a      	str	r2, [r3, #0]
}
 8008292:	bf00      	nop
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	20000d0c 	.word	0x20000d0c

080082a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082a8:	f000 f852 	bl	8008350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <prvIdleTask+0x28>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d9f9      	bls.n	80082a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <prvIdleTask+0x2c>)
 80082b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082c4:	e7f0      	b.n	80082a8 <prvIdleTask+0x8>
 80082c6:	bf00      	nop
 80082c8:	20000828 	.word	0x20000828
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082d6:	2300      	movs	r3, #0
 80082d8:	607b      	str	r3, [r7, #4]
 80082da:	e00c      	b.n	80082f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4a12      	ldr	r2, [pc, #72]	; (8008330 <prvInitialiseTaskLists+0x60>)
 80082e8:	4413      	add	r3, r2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fcca 	bl	8006c84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3301      	adds	r3, #1
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b37      	cmp	r3, #55	; 0x37
 80082fa:	d9ef      	bls.n	80082dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082fc:	480d      	ldr	r0, [pc, #52]	; (8008334 <prvInitialiseTaskLists+0x64>)
 80082fe:	f7fe fcc1 	bl	8006c84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008302:	480d      	ldr	r0, [pc, #52]	; (8008338 <prvInitialiseTaskLists+0x68>)
 8008304:	f7fe fcbe 	bl	8006c84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008308:	480c      	ldr	r0, [pc, #48]	; (800833c <prvInitialiseTaskLists+0x6c>)
 800830a:	f7fe fcbb 	bl	8006c84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800830e:	480c      	ldr	r0, [pc, #48]	; (8008340 <prvInitialiseTaskLists+0x70>)
 8008310:	f7fe fcb8 	bl	8006c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008314:	480b      	ldr	r0, [pc, #44]	; (8008344 <prvInitialiseTaskLists+0x74>)
 8008316:	f7fe fcb5 	bl	8006c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800831a:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <prvInitialiseTaskLists+0x78>)
 800831c:	4a05      	ldr	r2, [pc, #20]	; (8008334 <prvInitialiseTaskLists+0x64>)
 800831e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008320:	4b0a      	ldr	r3, [pc, #40]	; (800834c <prvInitialiseTaskLists+0x7c>)
 8008322:	4a05      	ldr	r2, [pc, #20]	; (8008338 <prvInitialiseTaskLists+0x68>)
 8008324:	601a      	str	r2, [r3, #0]
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000828 	.word	0x20000828
 8008334:	20000c88 	.word	0x20000c88
 8008338:	20000c9c 	.word	0x20000c9c
 800833c:	20000cb8 	.word	0x20000cb8
 8008340:	20000ccc 	.word	0x20000ccc
 8008344:	20000ce4 	.word	0x20000ce4
 8008348:	20000cb0 	.word	0x20000cb0
 800834c:	20000cb4 	.word	0x20000cb4

08008350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008356:	e019      	b.n	800838c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008358:	f000 fdd4 	bl	8008f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835c:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <prvCheckTasksWaitingTermination+0x50>)
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3304      	adds	r3, #4
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fd15 	bl	8006d98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800836e:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <prvCheckTasksWaitingTermination+0x54>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3b01      	subs	r3, #1
 8008374:	4a0b      	ldr	r2, [pc, #44]	; (80083a4 <prvCheckTasksWaitingTermination+0x54>)
 8008376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008378:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <prvCheckTasksWaitingTermination+0x58>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3b01      	subs	r3, #1
 800837e:	4a0a      	ldr	r2, [pc, #40]	; (80083a8 <prvCheckTasksWaitingTermination+0x58>)
 8008380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008382:	f000 fdef 	bl	8008f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f810 	bl	80083ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <prvCheckTasksWaitingTermination+0x58>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e1      	bne.n	8008358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000ccc 	.word	0x20000ccc
 80083a4:	20000cf8 	.word	0x20000cf8
 80083a8:	20000ce0 	.word	0x20000ce0

080083ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3354      	adds	r3, #84	; 0x54
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 f8f9 	bl	80095b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d108      	bne.n	80083da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 ff87 	bl	80092e0 <vPortFree>
				vPortFree( pxTCB );
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 ff84 	bl	80092e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083d8:	e018      	b.n	800840c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d103      	bne.n	80083ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 ff7b 	bl	80092e0 <vPortFree>
	}
 80083ea:	e00f      	b.n	800840c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d00a      	beq.n	800840c <prvDeleteTCB+0x60>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	60fb      	str	r3, [r7, #12]
}
 8008408:	bf00      	nop
 800840a:	e7fe      	b.n	800840a <prvDeleteTCB+0x5e>
	}
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800841a:	4b0c      	ldr	r3, [pc, #48]	; (800844c <prvResetNextTaskUnblockTime+0x38>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <prvResetNextTaskUnblockTime+0x3c>)
 8008426:	f04f 32ff 	mov.w	r2, #4294967295
 800842a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800842c:	e008      	b.n	8008440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842e:	4b07      	ldr	r3, [pc, #28]	; (800844c <prvResetNextTaskUnblockTime+0x38>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	4a04      	ldr	r2, [pc, #16]	; (8008450 <prvResetNextTaskUnblockTime+0x3c>)
 800843e:	6013      	str	r3, [r2, #0]
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	20000cb0 	.word	0x20000cb0
 8008450:	20000d18 	.word	0x20000d18

08008454 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800845a:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <xTaskGetSchedulerState+0x34>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d102      	bne.n	8008468 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008462:	2301      	movs	r3, #1
 8008464:	607b      	str	r3, [r7, #4]
 8008466:	e008      	b.n	800847a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008468:	4b08      	ldr	r3, [pc, #32]	; (800848c <xTaskGetSchedulerState+0x38>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008470:	2302      	movs	r3, #2
 8008472:	607b      	str	r3, [r7, #4]
 8008474:	e001      	b.n	800847a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008476:	2300      	movs	r3, #0
 8008478:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800847a:	687b      	ldr	r3, [r7, #4]
	}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	20000d04 	.word	0x20000d04
 800848c:	20000d20 	.word	0x20000d20

08008490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d056      	beq.n	8008554 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084a6:	4b2e      	ldr	r3, [pc, #184]	; (8008560 <xTaskPriorityDisinherit+0xd0>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d00a      	beq.n	80084c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	60fb      	str	r3, [r7, #12]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10a      	bne.n	80084e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	60bb      	str	r3, [r7, #8]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e8:	1e5a      	subs	r2, r3, #1
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d02c      	beq.n	8008554 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d128      	bne.n	8008554 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	3304      	adds	r3, #4
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fc46 	bl	8006d98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008524:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <xTaskPriorityDisinherit+0xd4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d903      	bls.n	8008534 <xTaskPriorityDisinherit+0xa4>
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	4a0c      	ldr	r2, [pc, #48]	; (8008564 <xTaskPriorityDisinherit+0xd4>)
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4a09      	ldr	r2, [pc, #36]	; (8008568 <xTaskPriorityDisinherit+0xd8>)
 8008542:	441a      	add	r2, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	3304      	adds	r3, #4
 8008548:	4619      	mov	r1, r3
 800854a:	4610      	mov	r0, r2
 800854c:	f7fe fbc7 	bl	8006cde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008550:	2301      	movs	r3, #1
 8008552:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008554:	697b      	ldr	r3, [r7, #20]
	}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000824 	.word	0x20000824
 8008564:	20000d00 	.word	0x20000d00
 8008568:	20000828 	.word	0x20000828

0800856c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008576:	4b21      	ldr	r3, [pc, #132]	; (80085fc <prvAddCurrentTaskToDelayedList+0x90>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800857c:	4b20      	ldr	r3, [pc, #128]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3304      	adds	r3, #4
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fc08 	bl	8006d98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d10a      	bne.n	80085a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008596:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4819      	ldr	r0, [pc, #100]	; (8008604 <prvAddCurrentTaskToDelayedList+0x98>)
 80085a0:	f7fe fb9d 	bl	8006cde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085a4:	e026      	b.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4413      	add	r3, r2
 80085ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085ae:	4b14      	ldr	r3, [pc, #80]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d209      	bcs.n	80085d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085be:	4b12      	ldr	r3, [pc, #72]	; (8008608 <prvAddCurrentTaskToDelayedList+0x9c>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f7fe fbab 	bl	8006d26 <vListInsert>
}
 80085d0:	e010      	b.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d2:	4b0e      	ldr	r3, [pc, #56]	; (800860c <prvAddCurrentTaskToDelayedList+0xa0>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b0a      	ldr	r3, [pc, #40]	; (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fe fba1 	bl	8006d26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085e4:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d202      	bcs.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085ee:	4a08      	ldr	r2, [pc, #32]	; (8008610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6013      	str	r3, [r2, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20000cfc 	.word	0x20000cfc
 8008600:	20000824 	.word	0x20000824
 8008604:	20000ce4 	.word	0x20000ce4
 8008608:	20000cb4 	.word	0x20000cb4
 800860c:	20000cb0 	.word	0x20000cb0
 8008610:	20000d18 	.word	0x20000d18

08008614 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08a      	sub	sp, #40	; 0x28
 8008618:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800861e:	f000 fb07 	bl	8008c30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008622:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <xTimerCreateTimerTask+0x80>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d021      	beq.n	800866e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008632:	1d3a      	adds	r2, r7, #4
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	f107 030c 	add.w	r3, r7, #12
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe fb07 	bl	8006c50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	9202      	str	r2, [sp, #8]
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	2302      	movs	r3, #2
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	460a      	mov	r2, r1
 8008654:	4910      	ldr	r1, [pc, #64]	; (8008698 <xTimerCreateTimerTask+0x84>)
 8008656:	4811      	ldr	r0, [pc, #68]	; (800869c <xTimerCreateTimerTask+0x88>)
 8008658:	f7ff f8b4 	bl	80077c4 <xTaskCreateStatic>
 800865c:	4603      	mov	r3, r0
 800865e:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <xTimerCreateTimerTask+0x8c>)
 8008660:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008662:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <xTimerCreateTimerTask+0x8c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800866a:	2301      	movs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	613b      	str	r3, [r7, #16]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800868a:	697b      	ldr	r3, [r7, #20]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000d54 	.word	0x20000d54
 8008698:	08009774 	.word	0x08009774
 800869c:	080087d9 	.word	0x080087d9
 80086a0:	20000d58 	.word	0x20000d58

080086a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	; 0x28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	623b      	str	r3, [r7, #32]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086d2:	4b1a      	ldr	r3, [pc, #104]	; (800873c <xTimerGenericCommand+0x98>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d02a      	beq.n	8008730 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b05      	cmp	r3, #5
 80086ea:	dc18      	bgt.n	800871e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086ec:	f7ff feb2 	bl	8008454 <xTaskGetSchedulerState>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d109      	bne.n	800870a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <xTimerGenericCommand+0x98>)
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f107 0110 	add.w	r1, r7, #16
 80086fe:	2300      	movs	r3, #0
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	f7fe fc77 	bl	8006ff4 <xQueueGenericSend>
 8008706:	6278      	str	r0, [r7, #36]	; 0x24
 8008708:	e012      	b.n	8008730 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800870a:	4b0c      	ldr	r3, [pc, #48]	; (800873c <xTimerGenericCommand+0x98>)
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	f107 0110 	add.w	r1, r7, #16
 8008712:	2300      	movs	r3, #0
 8008714:	2200      	movs	r2, #0
 8008716:	f7fe fc6d 	bl	8006ff4 <xQueueGenericSend>
 800871a:	6278      	str	r0, [r7, #36]	; 0x24
 800871c:	e008      	b.n	8008730 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800871e:	4b07      	ldr	r3, [pc, #28]	; (800873c <xTimerGenericCommand+0x98>)
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f107 0110 	add.w	r1, r7, #16
 8008726:	2300      	movs	r3, #0
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	f7fe fd61 	bl	80071f0 <xQueueGenericSendFromISR>
 800872e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008732:	4618      	mov	r0, r3
 8008734:	3728      	adds	r7, #40	; 0x28
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000d54 	.word	0x20000d54

08008740 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af02      	add	r7, sp, #8
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800874a:	4b22      	ldr	r3, [pc, #136]	; (80087d4 <prvProcessExpiredTimer+0x94>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	3304      	adds	r3, #4
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fb1d 	bl	8006d98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d022      	beq.n	80087b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	699a      	ldr	r2, [r3, #24]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	18d1      	adds	r1, r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	6978      	ldr	r0, [r7, #20]
 800877a:	f000 f8d1 	bl	8008920 <prvInsertTimerInActiveList>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01f      	beq.n	80087c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008784:	2300      	movs	r3, #0
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	2300      	movs	r3, #0
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	2100      	movs	r1, #0
 800878e:	6978      	ldr	r0, [r7, #20]
 8008790:	f7ff ff88 	bl	80086a4 <xTimerGenericCommand>
 8008794:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d113      	bne.n	80087c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	60fb      	str	r3, [r7, #12]
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087b8:	f023 0301 	bic.w	r3, r3, #1
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	6978      	ldr	r0, [r7, #20]
 80087ca:	4798      	blx	r3
}
 80087cc:	bf00      	nop
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20000d4c 	.word	0x20000d4c

080087d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087e0:	f107 0308 	add.w	r3, r7, #8
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 f857 	bl	8008898 <prvGetNextExpireTime>
 80087ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4619      	mov	r1, r3
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 f803 	bl	80087fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087f6:	f000 f8d5 	bl	80089a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087fa:	e7f1      	b.n	80087e0 <prvTimerTask+0x8>

080087fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008806:	f7ff fa39 	bl	8007c7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800880a:	f107 0308 	add.w	r3, r7, #8
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f866 	bl	80088e0 <prvSampleTimeNow>
 8008814:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d130      	bne.n	800887e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <prvProcessTimerOrBlockTask+0x3c>
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	429a      	cmp	r2, r3
 8008828:	d806      	bhi.n	8008838 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800882a:	f7ff fa35 	bl	8007c98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff ff85 	bl	8008740 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008836:	e024      	b.n	8008882 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d008      	beq.n	8008850 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <prvProcessTimerOrBlockTask+0x90>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <prvProcessTimerOrBlockTask+0x50>
 8008848:	2301      	movs	r3, #1
 800884a:	e000      	b.n	800884e <prvProcessTimerOrBlockTask+0x52>
 800884c:	2300      	movs	r3, #0
 800884e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008850:	4b0f      	ldr	r3, [pc, #60]	; (8008890 <prvProcessTimerOrBlockTask+0x94>)
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	4619      	mov	r1, r3
 800885e:	f7fe ff7d 	bl	800775c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008862:	f7ff fa19 	bl	8007c98 <xTaskResumeAll>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800886c:	4b09      	ldr	r3, [pc, #36]	; (8008894 <prvProcessTimerOrBlockTask+0x98>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
}
 800887c:	e001      	b.n	8008882 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800887e:	f7ff fa0b 	bl	8007c98 <xTaskResumeAll>
}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000d50 	.word	0x20000d50
 8008890:	20000d54 	.word	0x20000d54
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088a0:	4b0e      	ldr	r3, [pc, #56]	; (80088dc <prvGetNextExpireTime+0x44>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <prvGetNextExpireTime+0x16>
 80088aa:	2201      	movs	r2, #1
 80088ac:	e000      	b.n	80088b0 <prvGetNextExpireTime+0x18>
 80088ae:	2200      	movs	r2, #0
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d105      	bne.n	80088c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088bc:	4b07      	ldr	r3, [pc, #28]	; (80088dc <prvGetNextExpireTime+0x44>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e001      	b.n	80088cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088cc:	68fb      	ldr	r3, [r7, #12]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	20000d4c 	.word	0x20000d4c

080088e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088e8:	f7ff fa74 	bl	8007dd4 <xTaskGetTickCount>
 80088ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <prvSampleTimeNow+0x3c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d205      	bcs.n	8008904 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088f8:	f000 f936 	bl	8008b68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	e002      	b.n	800890a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800890a:	4a04      	ldr	r2, [pc, #16]	; (800891c <prvSampleTimeNow+0x3c>)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008910:	68fb      	ldr	r3, [r7, #12]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000d5c 	.word	0x20000d5c

08008920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800892e:	2300      	movs	r3, #0
 8008930:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d812      	bhi.n	800896c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	1ad2      	subs	r2, r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	429a      	cmp	r2, r3
 8008952:	d302      	bcc.n	800895a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008954:	2301      	movs	r3, #1
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	e01b      	b.n	8008992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800895a:	4b10      	ldr	r3, [pc, #64]	; (800899c <prvInsertTimerInActiveList+0x7c>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3304      	adds	r3, #4
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f7fe f9de 	bl	8006d26 <vListInsert>
 800896a:	e012      	b.n	8008992 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d206      	bcs.n	8008982 <prvInsertTimerInActiveList+0x62>
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d302      	bcc.n	8008982 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e007      	b.n	8008992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008982:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <prvInsertTimerInActiveList+0x80>)
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3304      	adds	r3, #4
 800898a:	4619      	mov	r1, r3
 800898c:	4610      	mov	r0, r2
 800898e:	f7fe f9ca 	bl	8006d26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008992:	697b      	ldr	r3, [r7, #20]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20000d50 	.word	0x20000d50
 80089a0:	20000d4c 	.word	0x20000d4c

080089a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08e      	sub	sp, #56	; 0x38
 80089a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089aa:	e0ca      	b.n	8008b42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	da18      	bge.n	80089e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089b2:	1d3b      	adds	r3, r7, #4
 80089b4:	3304      	adds	r3, #4
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	61fb      	str	r3, [r7, #28]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089da:	6850      	ldr	r0, [r2, #4]
 80089dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089de:	6892      	ldr	r2, [r2, #8]
 80089e0:	4611      	mov	r1, r2
 80089e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f2c0 80aa 	blt.w	8008b40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d004      	beq.n	8008a02 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	3304      	adds	r3, #4
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe f9cb 	bl	8006d98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a02:	463b      	mov	r3, r7
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7ff ff6b 	bl	80088e0 <prvSampleTimeNow>
 8008a0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	f200 8097 	bhi.w	8008b42 <prvProcessReceivedCommands+0x19e>
 8008a14:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <prvProcessReceivedCommands+0x78>)
 8008a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1a:	bf00      	nop
 8008a1c:	08008a45 	.word	0x08008a45
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a45 	.word	0x08008a45
 8008a28:	08008ab9 	.word	0x08008ab9
 8008a2c:	08008acd 	.word	0x08008acd
 8008a30:	08008b17 	.word	0x08008b17
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a45 	.word	0x08008a45
 8008a3c:	08008ab9 	.word	0x08008ab9
 8008a40:	08008acd 	.word	0x08008acd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a4a:	f043 0301 	orr.w	r3, r3, #1
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	18d1      	adds	r1, r2, r3
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a64:	f7ff ff5c 	bl	8008920 <prvInsertTimerInActiveList>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d069      	beq.n	8008b42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d05e      	beq.n	8008b42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	441a      	add	r2, r3
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	2300      	movs	r3, #0
 8008a92:	2100      	movs	r1, #0
 8008a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a96:	f7ff fe05 	bl	80086a4 <xTimerGenericCommand>
 8008a9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d14f      	bne.n	8008b42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	61bb      	str	r3, [r7, #24]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008aca:	e03a      	b.n	8008b42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ad2:	f043 0301 	orr.w	r3, r3, #1
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10a      	bne.n	8008b02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	617b      	str	r3, [r7, #20]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	699a      	ldr	r2, [r3, #24]
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	18d1      	adds	r1, r2, r3
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b10:	f7ff ff06 	bl	8008920 <prvInsertTimerInActiveList>
					break;
 8008b14:	e015      	b.n	8008b42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d103      	bne.n	8008b2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b26:	f000 fbdb 	bl	80092e0 <vPortFree>
 8008b2a:	e00a      	b.n	8008b42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b32:	f023 0301 	bic.w	r3, r3, #1
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b3e:	e000      	b.n	8008b42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b42:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <prvProcessReceivedCommands+0x1c0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	1d39      	adds	r1, r7, #4
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe fbec 	bl	8007328 <xQueueReceive>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f47f af2a 	bne.w	80089ac <prvProcessReceivedCommands+0x8>
	}
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	3730      	adds	r7, #48	; 0x30
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20000d54 	.word	0x20000d54

08008b68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b6e:	e048      	b.n	8008c02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b70:	4b2d      	ldr	r3, [pc, #180]	; (8008c28 <prvSwitchTimerLists+0xc0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b7a:	4b2b      	ldr	r3, [pc, #172]	; (8008c28 <prvSwitchTimerLists+0xc0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3304      	adds	r3, #4
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe f905 	bl	8006d98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d02e      	beq.n	8008c02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4413      	add	r3, r2
 8008bac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d90e      	bls.n	8008bd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bc2:	4b19      	ldr	r3, [pc, #100]	; (8008c28 <prvSwitchTimerLists+0xc0>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4610      	mov	r0, r2
 8008bce:	f7fe f8aa 	bl	8006d26 <vListInsert>
 8008bd2:	e016      	b.n	8008c02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	2100      	movs	r1, #0
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f7ff fd60 	bl	80086a4 <xTimerGenericCommand>
 8008be4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	603b      	str	r3, [r7, #0]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c02:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <prvSwitchTimerLists+0xc0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1b1      	bne.n	8008b70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <prvSwitchTimerLists+0xc0>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c12:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <prvSwitchTimerLists+0xc4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a04      	ldr	r2, [pc, #16]	; (8008c28 <prvSwitchTimerLists+0xc0>)
 8008c18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c1a:	4a04      	ldr	r2, [pc, #16]	; (8008c2c <prvSwitchTimerLists+0xc4>)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	6013      	str	r3, [r2, #0]
}
 8008c20:	bf00      	nop
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20000d4c 	.word	0x20000d4c
 8008c2c:	20000d50 	.word	0x20000d50

08008c30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c36:	f000 f965 	bl	8008f04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c3a:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <prvCheckForValidListAndQueue+0x60>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d120      	bne.n	8008c84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c42:	4814      	ldr	r0, [pc, #80]	; (8008c94 <prvCheckForValidListAndQueue+0x64>)
 8008c44:	f7fe f81e 	bl	8006c84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c48:	4813      	ldr	r0, [pc, #76]	; (8008c98 <prvCheckForValidListAndQueue+0x68>)
 8008c4a:	f7fe f81b 	bl	8006c84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <prvCheckForValidListAndQueue+0x6c>)
 8008c50:	4a10      	ldr	r2, [pc, #64]	; (8008c94 <prvCheckForValidListAndQueue+0x64>)
 8008c52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c54:	4b12      	ldr	r3, [pc, #72]	; (8008ca0 <prvCheckForValidListAndQueue+0x70>)
 8008c56:	4a10      	ldr	r2, [pc, #64]	; (8008c98 <prvCheckForValidListAndQueue+0x68>)
 8008c58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <prvCheckForValidListAndQueue+0x74>)
 8008c60:	4a11      	ldr	r2, [pc, #68]	; (8008ca8 <prvCheckForValidListAndQueue+0x78>)
 8008c62:	2110      	movs	r1, #16
 8008c64:	200a      	movs	r0, #10
 8008c66:	f7fe f929 	bl	8006ebc <xQueueGenericCreateStatic>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4a08      	ldr	r2, [pc, #32]	; (8008c90 <prvCheckForValidListAndQueue+0x60>)
 8008c6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <prvCheckForValidListAndQueue+0x60>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c78:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <prvCheckForValidListAndQueue+0x60>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	490b      	ldr	r1, [pc, #44]	; (8008cac <prvCheckForValidListAndQueue+0x7c>)
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fd42 	bl	8007708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c84:	f000 f96e 	bl	8008f64 <vPortExitCritical>
}
 8008c88:	bf00      	nop
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000d54 	.word	0x20000d54
 8008c94:	20000d24 	.word	0x20000d24
 8008c98:	20000d38 	.word	0x20000d38
 8008c9c:	20000d4c 	.word	0x20000d4c
 8008ca0:	20000d50 	.word	0x20000d50
 8008ca4:	20000e00 	.word	0x20000e00
 8008ca8:	20000d60 	.word	0x20000d60
 8008cac:	0800977c 	.word	0x0800977c

08008cb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3b04      	subs	r3, #4
 8008cc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b04      	subs	r3, #4
 8008cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f023 0201 	bic.w	r2, r3, #1
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3b04      	subs	r3, #4
 8008cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ce0:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <pxPortInitialiseStack+0x64>)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3b14      	subs	r3, #20
 8008cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3b04      	subs	r3, #4
 8008cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f06f 0202 	mvn.w	r2, #2
 8008cfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3b20      	subs	r3, #32
 8008d04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d06:	68fb      	ldr	r3, [r7, #12]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	08008d19 	.word	0x08008d19

08008d18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d22:	4b12      	ldr	r3, [pc, #72]	; (8008d6c <prvTaskExitError+0x54>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2a:	d00a      	beq.n	8008d42 <prvTaskExitError+0x2a>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	60fb      	str	r3, [r7, #12]
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <prvTaskExitError+0x28>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	60bb      	str	r3, [r7, #8]
}
 8008d54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d56:	bf00      	nop
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0fc      	beq.n	8008d58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d5e:	bf00      	nop
 8008d60:	bf00      	nop
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	2000000c 	.word	0x2000000c

08008d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d70:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <pxCurrentTCBConst2>)
 8008d72:	6819      	ldr	r1, [r3, #0]
 8008d74:	6808      	ldr	r0, [r1, #0]
 8008d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7a:	f380 8809 	msr	PSP, r0
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f04f 0000 	mov.w	r0, #0
 8008d86:	f380 8811 	msr	BASEPRI, r0
 8008d8a:	4770      	bx	lr
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst2>:
 8008d90:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d98:	4808      	ldr	r0, [pc, #32]	; (8008dbc <prvPortStartFirstTask+0x24>)
 8008d9a:	6800      	ldr	r0, [r0, #0]
 8008d9c:	6800      	ldr	r0, [r0, #0]
 8008d9e:	f380 8808 	msr	MSP, r0
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8814 	msr	CONTROL, r0
 8008daa:	b662      	cpsie	i
 8008dac:	b661      	cpsie	f
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	df00      	svc	0
 8008db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dba:	bf00      	nop
 8008dbc:	e000ed08 	.word	0xe000ed08

08008dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008dc6:	4b46      	ldr	r3, [pc, #280]	; (8008ee0 <xPortStartScheduler+0x120>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a46      	ldr	r2, [pc, #280]	; (8008ee4 <xPortStartScheduler+0x124>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d10a      	bne.n	8008de6 <xPortStartScheduler+0x26>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	613b      	str	r3, [r7, #16]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008de6:	4b3e      	ldr	r3, [pc, #248]	; (8008ee0 <xPortStartScheduler+0x120>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a3f      	ldr	r2, [pc, #252]	; (8008ee8 <xPortStartScheduler+0x128>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d10a      	bne.n	8008e06 <xPortStartScheduler+0x46>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60fb      	str	r3, [r7, #12]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e06:	4b39      	ldr	r3, [pc, #228]	; (8008eec <xPortStartScheduler+0x12c>)
 8008e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	22ff      	movs	r2, #255	; 0xff
 8008e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	4b31      	ldr	r3, [pc, #196]	; (8008ef0 <xPortStartScheduler+0x130>)
 8008e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e2e:	4b31      	ldr	r3, [pc, #196]	; (8008ef4 <xPortStartScheduler+0x134>)
 8008e30:	2207      	movs	r2, #7
 8008e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e34:	e009      	b.n	8008e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e36:	4b2f      	ldr	r3, [pc, #188]	; (8008ef4 <xPortStartScheduler+0x134>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	4a2d      	ldr	r2, [pc, #180]	; (8008ef4 <xPortStartScheduler+0x134>)
 8008e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e52:	2b80      	cmp	r3, #128	; 0x80
 8008e54:	d0ef      	beq.n	8008e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e56:	4b27      	ldr	r3, [pc, #156]	; (8008ef4 <xPortStartScheduler+0x134>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f1c3 0307 	rsb	r3, r3, #7
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d00a      	beq.n	8008e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	60bb      	str	r3, [r7, #8]
}
 8008e74:	bf00      	nop
 8008e76:	e7fe      	b.n	8008e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e78:	4b1e      	ldr	r3, [pc, #120]	; (8008ef4 <xPortStartScheduler+0x134>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	4a1d      	ldr	r2, [pc, #116]	; (8008ef4 <xPortStartScheduler+0x134>)
 8008e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e82:	4b1c      	ldr	r3, [pc, #112]	; (8008ef4 <xPortStartScheduler+0x134>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e8a:	4a1a      	ldr	r2, [pc, #104]	; (8008ef4 <xPortStartScheduler+0x134>)
 8008e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e96:	4b18      	ldr	r3, [pc, #96]	; (8008ef8 <xPortStartScheduler+0x138>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <xPortStartScheduler+0x138>)
 8008e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ea2:	4b15      	ldr	r3, [pc, #84]	; (8008ef8 <xPortStartScheduler+0x138>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a14      	ldr	r2, [pc, #80]	; (8008ef8 <xPortStartScheduler+0x138>)
 8008ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008eae:	f000 f8dd 	bl	800906c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008eb2:	4b12      	ldr	r3, [pc, #72]	; (8008efc <xPortStartScheduler+0x13c>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008eb8:	f000 f8fc 	bl	80090b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ebc:	4b10      	ldr	r3, [pc, #64]	; (8008f00 <xPortStartScheduler+0x140>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a0f      	ldr	r2, [pc, #60]	; (8008f00 <xPortStartScheduler+0x140>)
 8008ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ec8:	f7ff ff66 	bl	8008d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ecc:	f7ff f84c 	bl	8007f68 <vTaskSwitchContext>
	prvTaskExitError();
 8008ed0:	f7ff ff22 	bl	8008d18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	e000ed00 	.word	0xe000ed00
 8008ee4:	410fc271 	.word	0x410fc271
 8008ee8:	410fc270 	.word	0x410fc270
 8008eec:	e000e400 	.word	0xe000e400
 8008ef0:	20000e50 	.word	0x20000e50
 8008ef4:	20000e54 	.word	0x20000e54
 8008ef8:	e000ed20 	.word	0xe000ed20
 8008efc:	2000000c 	.word	0x2000000c
 8008f00:	e000ef34 	.word	0xe000ef34

08008f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	607b      	str	r3, [r7, #4]
}
 8008f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f1e:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <vPortEnterCritical+0x58>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3301      	adds	r3, #1
 8008f24:	4a0d      	ldr	r2, [pc, #52]	; (8008f5c <vPortEnterCritical+0x58>)
 8008f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <vPortEnterCritical+0x58>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d10f      	bne.n	8008f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <vPortEnterCritical+0x5c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	603b      	str	r3, [r7, #0]
}
 8008f4c:	bf00      	nop
 8008f4e:	e7fe      	b.n	8008f4e <vPortEnterCritical+0x4a>
	}
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	2000000c 	.word	0x2000000c
 8008f60:	e000ed04 	.word	0xe000ed04

08008f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f6a:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <vPortExitCritical+0x50>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <vPortExitCritical+0x24>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	607b      	str	r3, [r7, #4]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f88:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <vPortExitCritical+0x50>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <vPortExitCritical+0x50>)
 8008f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f92:	4b08      	ldr	r3, [pc, #32]	; (8008fb4 <vPortExitCritical+0x50>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <vPortExitCritical+0x42>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	f383 8811 	msr	BASEPRI, r3
}
 8008fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	2000000c 	.word	0x2000000c
	...

08008fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fc0:	f3ef 8009 	mrs	r0, PSP
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	4b15      	ldr	r3, [pc, #84]	; (8009020 <pxCurrentTCBConst>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	f01e 0f10 	tst.w	lr, #16
 8008fd0:	bf08      	it	eq
 8008fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fda:	6010      	str	r0, [r2, #0]
 8008fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fe4:	f380 8811 	msr	BASEPRI, r0
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f7fe ffba 	bl	8007f68 <vTaskSwitchContext>
 8008ff4:	f04f 0000 	mov.w	r0, #0
 8008ff8:	f380 8811 	msr	BASEPRI, r0
 8008ffc:	bc09      	pop	{r0, r3}
 8008ffe:	6819      	ldr	r1, [r3, #0]
 8009000:	6808      	ldr	r0, [r1, #0]
 8009002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009006:	f01e 0f10 	tst.w	lr, #16
 800900a:	bf08      	it	eq
 800900c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009010:	f380 8809 	msr	PSP, r0
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	f3af 8000 	nop.w

08009020 <pxCurrentTCBConst>:
 8009020:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop

08009028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	607b      	str	r3, [r7, #4]
}
 8009040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009042:	f7fe fed7 	bl	8007df4 <xTaskIncrementTick>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800904c:	4b06      	ldr	r3, [pc, #24]	; (8009068 <xPortSysTickHandler+0x40>)
 800904e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	f383 8811 	msr	BASEPRI, r3
}
 800905e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	e000ed04 	.word	0xe000ed04

0800906c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <vPortSetupTimerInterrupt+0x34>)
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009076:	4b0b      	ldr	r3, [pc, #44]	; (80090a4 <vPortSetupTimerInterrupt+0x38>)
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800907c:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <vPortSetupTimerInterrupt+0x3c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a0a      	ldr	r2, [pc, #40]	; (80090ac <vPortSetupTimerInterrupt+0x40>)
 8009082:	fba2 2303 	umull	r2, r3, r2, r3
 8009086:	099b      	lsrs	r3, r3, #6
 8009088:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <vPortSetupTimerInterrupt+0x44>)
 800908a:	3b01      	subs	r3, #1
 800908c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800908e:	4b04      	ldr	r3, [pc, #16]	; (80090a0 <vPortSetupTimerInterrupt+0x34>)
 8009090:	2207      	movs	r2, #7
 8009092:	601a      	str	r2, [r3, #0]
}
 8009094:	bf00      	nop
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	e000e010 	.word	0xe000e010
 80090a4:	e000e018 	.word	0xe000e018
 80090a8:	20000000 	.word	0x20000000
 80090ac:	10624dd3 	.word	0x10624dd3
 80090b0:	e000e014 	.word	0xe000e014

080090b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090c4 <vPortEnableVFP+0x10>
 80090b8:	6801      	ldr	r1, [r0, #0]
 80090ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090be:	6001      	str	r1, [r0, #0]
 80090c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090c2:	bf00      	nop
 80090c4:	e000ed88 	.word	0xe000ed88

080090c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090ce:	f3ef 8305 	mrs	r3, IPSR
 80090d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b0f      	cmp	r3, #15
 80090d8:	d914      	bls.n	8009104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090da:	4a17      	ldr	r2, [pc, #92]	; (8009138 <vPortValidateInterruptPriority+0x70>)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4413      	add	r3, r2
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090e4:	4b15      	ldr	r3, [pc, #84]	; (800913c <vPortValidateInterruptPriority+0x74>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	7afa      	ldrb	r2, [r7, #11]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d20a      	bcs.n	8009104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	607b      	str	r3, [r7, #4]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009104:	4b0e      	ldr	r3, [pc, #56]	; (8009140 <vPortValidateInterruptPriority+0x78>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800910c:	4b0d      	ldr	r3, [pc, #52]	; (8009144 <vPortValidateInterruptPriority+0x7c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d90a      	bls.n	800912a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	603b      	str	r3, [r7, #0]
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <vPortValidateInterruptPriority+0x60>
	}
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	e000e3f0 	.word	0xe000e3f0
 800913c:	20000e50 	.word	0x20000e50
 8009140:	e000ed0c 	.word	0xe000ed0c
 8009144:	20000e54 	.word	0x20000e54

08009148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08a      	sub	sp, #40	; 0x28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009150:	2300      	movs	r3, #0
 8009152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009154:	f7fe fd92 	bl	8007c7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009158:	4b5b      	ldr	r3, [pc, #364]	; (80092c8 <pvPortMalloc+0x180>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009160:	f000 f920 	bl	80093a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009164:	4b59      	ldr	r3, [pc, #356]	; (80092cc <pvPortMalloc+0x184>)
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4013      	ands	r3, r2
 800916c:	2b00      	cmp	r3, #0
 800916e:	f040 8093 	bne.w	8009298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01d      	beq.n	80091b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009178:	2208      	movs	r2, #8
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	2b00      	cmp	r3, #0
 8009188:	d014      	beq.n	80091b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f023 0307 	bic.w	r3, r3, #7
 8009190:	3308      	adds	r3, #8
 8009192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <pvPortMalloc+0x6c>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	617b      	str	r3, [r7, #20]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d06e      	beq.n	8009298 <pvPortMalloc+0x150>
 80091ba:	4b45      	ldr	r3, [pc, #276]	; (80092d0 <pvPortMalloc+0x188>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d869      	bhi.n	8009298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091c4:	4b43      	ldr	r3, [pc, #268]	; (80092d4 <pvPortMalloc+0x18c>)
 80091c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091c8:	4b42      	ldr	r3, [pc, #264]	; (80092d4 <pvPortMalloc+0x18c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091ce:	e004      	b.n	80091da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d903      	bls.n	80091ec <pvPortMalloc+0xa4>
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1f1      	bne.n	80091d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091ec:	4b36      	ldr	r3, [pc, #216]	; (80092c8 <pvPortMalloc+0x180>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d050      	beq.n	8009298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2208      	movs	r2, #8
 80091fc:	4413      	add	r3, r2
 80091fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	2308      	movs	r3, #8
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	429a      	cmp	r2, r3
 8009216:	d91f      	bls.n	8009258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4413      	add	r3, r2
 800921e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <pvPortMalloc+0xf8>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	613b      	str	r3, [r7, #16]
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	1ad2      	subs	r2, r2, r3
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009252:	69b8      	ldr	r0, [r7, #24]
 8009254:	f000 f908 	bl	8009468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009258:	4b1d      	ldr	r3, [pc, #116]	; (80092d0 <pvPortMalloc+0x188>)
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	4a1b      	ldr	r2, [pc, #108]	; (80092d0 <pvPortMalloc+0x188>)
 8009264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009266:	4b1a      	ldr	r3, [pc, #104]	; (80092d0 <pvPortMalloc+0x188>)
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	4b1b      	ldr	r3, [pc, #108]	; (80092d8 <pvPortMalloc+0x190>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d203      	bcs.n	800927a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009272:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <pvPortMalloc+0x188>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a18      	ldr	r2, [pc, #96]	; (80092d8 <pvPortMalloc+0x190>)
 8009278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	4b13      	ldr	r3, [pc, #76]	; (80092cc <pvPortMalloc+0x184>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	431a      	orrs	r2, r3
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <pvPortMalloc+0x194>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	4a11      	ldr	r2, [pc, #68]	; (80092dc <pvPortMalloc+0x194>)
 8009296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009298:	f7fe fcfe 	bl	8007c98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <pvPortMalloc+0x174>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	60fb      	str	r3, [r7, #12]
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <pvPortMalloc+0x172>
	return pvReturn;
 80092bc:	69fb      	ldr	r3, [r7, #28]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3728      	adds	r7, #40	; 0x28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20004a60 	.word	0x20004a60
 80092cc:	20004a74 	.word	0x20004a74
 80092d0:	20004a64 	.word	0x20004a64
 80092d4:	20004a58 	.word	0x20004a58
 80092d8:	20004a68 	.word	0x20004a68
 80092dc:	20004a6c 	.word	0x20004a6c

080092e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d04d      	beq.n	800938e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092f2:	2308      	movs	r3, #8
 80092f4:	425b      	negs	r3, r3
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4413      	add	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	4b24      	ldr	r3, [pc, #144]	; (8009398 <vPortFree+0xb8>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4013      	ands	r3, r2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10a      	bne.n	8009324 <vPortFree+0x44>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	60fb      	str	r3, [r7, #12]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <vPortFree+0x62>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60bb      	str	r3, [r7, #8]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	4b14      	ldr	r3, [pc, #80]	; (8009398 <vPortFree+0xb8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d01e      	beq.n	800938e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d11a      	bne.n	800938e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	4b0e      	ldr	r3, [pc, #56]	; (8009398 <vPortFree+0xb8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	43db      	mvns	r3, r3
 8009362:	401a      	ands	r2, r3
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009368:	f7fe fc88 	bl	8007c7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	4b0a      	ldr	r3, [pc, #40]	; (800939c <vPortFree+0xbc>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4413      	add	r3, r2
 8009376:	4a09      	ldr	r2, [pc, #36]	; (800939c <vPortFree+0xbc>)
 8009378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800937a:	6938      	ldr	r0, [r7, #16]
 800937c:	f000 f874 	bl	8009468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <vPortFree+0xc0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3301      	adds	r3, #1
 8009386:	4a06      	ldr	r2, [pc, #24]	; (80093a0 <vPortFree+0xc0>)
 8009388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800938a:	f7fe fc85 	bl	8007c98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800938e:	bf00      	nop
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20004a74 	.word	0x20004a74
 800939c:	20004a64 	.word	0x20004a64
 80093a0:	20004a70 	.word	0x20004a70

080093a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093b0:	4b27      	ldr	r3, [pc, #156]	; (8009450 <prvHeapInit+0xac>)
 80093b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00c      	beq.n	80093d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3307      	adds	r3, #7
 80093c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0307 	bic.w	r3, r3, #7
 80093ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	4a1f      	ldr	r2, [pc, #124]	; (8009450 <prvHeapInit+0xac>)
 80093d4:	4413      	add	r3, r2
 80093d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093dc:	4a1d      	ldr	r2, [pc, #116]	; (8009454 <prvHeapInit+0xb0>)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093e2:	4b1c      	ldr	r3, [pc, #112]	; (8009454 <prvHeapInit+0xb0>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	4413      	add	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093f0:	2208      	movs	r2, #8
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1a9b      	subs	r3, r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f023 0307 	bic.w	r3, r3, #7
 80093fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a15      	ldr	r2, [pc, #84]	; (8009458 <prvHeapInit+0xb4>)
 8009404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009406:	4b14      	ldr	r3, [pc, #80]	; (8009458 <prvHeapInit+0xb4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2200      	movs	r2, #0
 800940c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800940e:	4b12      	ldr	r3, [pc, #72]	; (8009458 <prvHeapInit+0xb4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <prvHeapInit+0xb4>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	4a0a      	ldr	r2, [pc, #40]	; (800945c <prvHeapInit+0xb8>)
 8009432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4a09      	ldr	r2, [pc, #36]	; (8009460 <prvHeapInit+0xbc>)
 800943a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800943c:	4b09      	ldr	r3, [pc, #36]	; (8009464 <prvHeapInit+0xc0>)
 800943e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009442:	601a      	str	r2, [r3, #0]
}
 8009444:	bf00      	nop
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	20000e58 	.word	0x20000e58
 8009454:	20004a58 	.word	0x20004a58
 8009458:	20004a60 	.word	0x20004a60
 800945c:	20004a68 	.word	0x20004a68
 8009460:	20004a64 	.word	0x20004a64
 8009464:	20004a74 	.word	0x20004a74

08009468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009470:	4b28      	ldr	r3, [pc, #160]	; (8009514 <prvInsertBlockIntoFreeList+0xac>)
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e002      	b.n	800947c <prvInsertBlockIntoFreeList+0x14>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	429a      	cmp	r2, r3
 8009484:	d8f7      	bhi.n	8009476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4413      	add	r3, r2
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	429a      	cmp	r2, r3
 8009496:	d108      	bne.n	80094aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	441a      	add	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	441a      	add	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d118      	bne.n	80094f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <prvInsertBlockIntoFreeList+0xb0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d00d      	beq.n	80094e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	441a      	add	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e008      	b.n	80094f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094e6:	4b0c      	ldr	r3, [pc, #48]	; (8009518 <prvInsertBlockIntoFreeList+0xb0>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	e003      	b.n	80094f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d002      	beq.n	8009506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20004a58 	.word	0x20004a58
 8009518:	20004a60 	.word	0x20004a60

0800951c <__libc_init_array>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	4d0d      	ldr	r5, [pc, #52]	; (8009554 <__libc_init_array+0x38>)
 8009520:	4c0d      	ldr	r4, [pc, #52]	; (8009558 <__libc_init_array+0x3c>)
 8009522:	1b64      	subs	r4, r4, r5
 8009524:	10a4      	asrs	r4, r4, #2
 8009526:	2600      	movs	r6, #0
 8009528:	42a6      	cmp	r6, r4
 800952a:	d109      	bne.n	8009540 <__libc_init_array+0x24>
 800952c:	4d0b      	ldr	r5, [pc, #44]	; (800955c <__libc_init_array+0x40>)
 800952e:	4c0c      	ldr	r4, [pc, #48]	; (8009560 <__libc_init_array+0x44>)
 8009530:	f000 f8f6 	bl	8009720 <_init>
 8009534:	1b64      	subs	r4, r4, r5
 8009536:	10a4      	asrs	r4, r4, #2
 8009538:	2600      	movs	r6, #0
 800953a:	42a6      	cmp	r6, r4
 800953c:	d105      	bne.n	800954a <__libc_init_array+0x2e>
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	f855 3b04 	ldr.w	r3, [r5], #4
 8009544:	4798      	blx	r3
 8009546:	3601      	adds	r6, #1
 8009548:	e7ee      	b.n	8009528 <__libc_init_array+0xc>
 800954a:	f855 3b04 	ldr.w	r3, [r5], #4
 800954e:	4798      	blx	r3
 8009550:	3601      	adds	r6, #1
 8009552:	e7f2      	b.n	800953a <__libc_init_array+0x1e>
 8009554:	08009908 	.word	0x08009908
 8009558:	08009908 	.word	0x08009908
 800955c:	08009908 	.word	0x08009908
 8009560:	0800990c 	.word	0x0800990c

08009564 <__retarget_lock_acquire_recursive>:
 8009564:	4770      	bx	lr

08009566 <__retarget_lock_release_recursive>:
 8009566:	4770      	bx	lr

08009568 <memcpy>:
 8009568:	440a      	add	r2, r1
 800956a:	4291      	cmp	r1, r2
 800956c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009570:	d100      	bne.n	8009574 <memcpy+0xc>
 8009572:	4770      	bx	lr
 8009574:	b510      	push	{r4, lr}
 8009576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800957a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800957e:	4291      	cmp	r1, r2
 8009580:	d1f9      	bne.n	8009576 <memcpy+0xe>
 8009582:	bd10      	pop	{r4, pc}

08009584 <memset>:
 8009584:	4402      	add	r2, r0
 8009586:	4603      	mov	r3, r0
 8009588:	4293      	cmp	r3, r2
 800958a:	d100      	bne.n	800958e <memset+0xa>
 800958c:	4770      	bx	lr
 800958e:	f803 1b01 	strb.w	r1, [r3], #1
 8009592:	e7f9      	b.n	8009588 <memset+0x4>

08009594 <cleanup_glue>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	460c      	mov	r4, r1
 8009598:	6809      	ldr	r1, [r1, #0]
 800959a:	4605      	mov	r5, r0
 800959c:	b109      	cbz	r1, 80095a2 <cleanup_glue+0xe>
 800959e:	f7ff fff9 	bl	8009594 <cleanup_glue>
 80095a2:	4621      	mov	r1, r4
 80095a4:	4628      	mov	r0, r5
 80095a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095aa:	f000 b869 	b.w	8009680 <_free_r>
	...

080095b0 <_reclaim_reent>:
 80095b0:	4b2c      	ldr	r3, [pc, #176]	; (8009664 <_reclaim_reent+0xb4>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4283      	cmp	r3, r0
 80095b6:	b570      	push	{r4, r5, r6, lr}
 80095b8:	4604      	mov	r4, r0
 80095ba:	d051      	beq.n	8009660 <_reclaim_reent+0xb0>
 80095bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80095be:	b143      	cbz	r3, 80095d2 <_reclaim_reent+0x22>
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d14a      	bne.n	800965c <_reclaim_reent+0xac>
 80095c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c8:	6819      	ldr	r1, [r3, #0]
 80095ca:	b111      	cbz	r1, 80095d2 <_reclaim_reent+0x22>
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 f857 	bl	8009680 <_free_r>
 80095d2:	6961      	ldr	r1, [r4, #20]
 80095d4:	b111      	cbz	r1, 80095dc <_reclaim_reent+0x2c>
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 f852 	bl	8009680 <_free_r>
 80095dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095de:	b111      	cbz	r1, 80095e6 <_reclaim_reent+0x36>
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 f84d 	bl	8009680 <_free_r>
 80095e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095e8:	b111      	cbz	r1, 80095f0 <_reclaim_reent+0x40>
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 f848 	bl	8009680 <_free_r>
 80095f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80095f2:	b111      	cbz	r1, 80095fa <_reclaim_reent+0x4a>
 80095f4:	4620      	mov	r0, r4
 80095f6:	f000 f843 	bl	8009680 <_free_r>
 80095fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80095fc:	b111      	cbz	r1, 8009604 <_reclaim_reent+0x54>
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f83e 	bl	8009680 <_free_r>
 8009604:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009606:	b111      	cbz	r1, 800960e <_reclaim_reent+0x5e>
 8009608:	4620      	mov	r0, r4
 800960a:	f000 f839 	bl	8009680 <_free_r>
 800960e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009610:	b111      	cbz	r1, 8009618 <_reclaim_reent+0x68>
 8009612:	4620      	mov	r0, r4
 8009614:	f000 f834 	bl	8009680 <_free_r>
 8009618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800961a:	b111      	cbz	r1, 8009622 <_reclaim_reent+0x72>
 800961c:	4620      	mov	r0, r4
 800961e:	f000 f82f 	bl	8009680 <_free_r>
 8009622:	69a3      	ldr	r3, [r4, #24]
 8009624:	b1e3      	cbz	r3, 8009660 <_reclaim_reent+0xb0>
 8009626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009628:	4620      	mov	r0, r4
 800962a:	4798      	blx	r3
 800962c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800962e:	b1b9      	cbz	r1, 8009660 <_reclaim_reent+0xb0>
 8009630:	4620      	mov	r0, r4
 8009632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009636:	f7ff bfad 	b.w	8009594 <cleanup_glue>
 800963a:	5949      	ldr	r1, [r1, r5]
 800963c:	b941      	cbnz	r1, 8009650 <_reclaim_reent+0xa0>
 800963e:	3504      	adds	r5, #4
 8009640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009642:	2d80      	cmp	r5, #128	; 0x80
 8009644:	68d9      	ldr	r1, [r3, #12]
 8009646:	d1f8      	bne.n	800963a <_reclaim_reent+0x8a>
 8009648:	4620      	mov	r0, r4
 800964a:	f000 f819 	bl	8009680 <_free_r>
 800964e:	e7ba      	b.n	80095c6 <_reclaim_reent+0x16>
 8009650:	680e      	ldr	r6, [r1, #0]
 8009652:	4620      	mov	r0, r4
 8009654:	f000 f814 	bl	8009680 <_free_r>
 8009658:	4631      	mov	r1, r6
 800965a:	e7ef      	b.n	800963c <_reclaim_reent+0x8c>
 800965c:	2500      	movs	r5, #0
 800965e:	e7ef      	b.n	8009640 <_reclaim_reent+0x90>
 8009660:	bd70      	pop	{r4, r5, r6, pc}
 8009662:	bf00      	nop
 8009664:	20000010 	.word	0x20000010

08009668 <__malloc_lock>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__malloc_lock+0x8>)
 800966a:	f7ff bf7b 	b.w	8009564 <__retarget_lock_acquire_recursive>
 800966e:	bf00      	nop
 8009670:	20004f30 	.word	0x20004f30

08009674 <__malloc_unlock>:
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <__malloc_unlock+0x8>)
 8009676:	f7ff bf76 	b.w	8009566 <__retarget_lock_release_recursive>
 800967a:	bf00      	nop
 800967c:	20004f30 	.word	0x20004f30

08009680 <_free_r>:
 8009680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009682:	2900      	cmp	r1, #0
 8009684:	d048      	beq.n	8009718 <_free_r+0x98>
 8009686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800968a:	9001      	str	r0, [sp, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f1a1 0404 	sub.w	r4, r1, #4
 8009692:	bfb8      	it	lt
 8009694:	18e4      	addlt	r4, r4, r3
 8009696:	f7ff ffe7 	bl	8009668 <__malloc_lock>
 800969a:	4a20      	ldr	r2, [pc, #128]	; (800971c <_free_r+0x9c>)
 800969c:	9801      	ldr	r0, [sp, #4]
 800969e:	6813      	ldr	r3, [r2, #0]
 80096a0:	4615      	mov	r5, r2
 80096a2:	b933      	cbnz	r3, 80096b2 <_free_r+0x32>
 80096a4:	6063      	str	r3, [r4, #4]
 80096a6:	6014      	str	r4, [r2, #0]
 80096a8:	b003      	add	sp, #12
 80096aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096ae:	f7ff bfe1 	b.w	8009674 <__malloc_unlock>
 80096b2:	42a3      	cmp	r3, r4
 80096b4:	d90b      	bls.n	80096ce <_free_r+0x4e>
 80096b6:	6821      	ldr	r1, [r4, #0]
 80096b8:	1862      	adds	r2, r4, r1
 80096ba:	4293      	cmp	r3, r2
 80096bc:	bf04      	itt	eq
 80096be:	681a      	ldreq	r2, [r3, #0]
 80096c0:	685b      	ldreq	r3, [r3, #4]
 80096c2:	6063      	str	r3, [r4, #4]
 80096c4:	bf04      	itt	eq
 80096c6:	1852      	addeq	r2, r2, r1
 80096c8:	6022      	streq	r2, [r4, #0]
 80096ca:	602c      	str	r4, [r5, #0]
 80096cc:	e7ec      	b.n	80096a8 <_free_r+0x28>
 80096ce:	461a      	mov	r2, r3
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	b10b      	cbz	r3, 80096d8 <_free_r+0x58>
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	d9fa      	bls.n	80096ce <_free_r+0x4e>
 80096d8:	6811      	ldr	r1, [r2, #0]
 80096da:	1855      	adds	r5, r2, r1
 80096dc:	42a5      	cmp	r5, r4
 80096de:	d10b      	bne.n	80096f8 <_free_r+0x78>
 80096e0:	6824      	ldr	r4, [r4, #0]
 80096e2:	4421      	add	r1, r4
 80096e4:	1854      	adds	r4, r2, r1
 80096e6:	42a3      	cmp	r3, r4
 80096e8:	6011      	str	r1, [r2, #0]
 80096ea:	d1dd      	bne.n	80096a8 <_free_r+0x28>
 80096ec:	681c      	ldr	r4, [r3, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	6053      	str	r3, [r2, #4]
 80096f2:	4421      	add	r1, r4
 80096f4:	6011      	str	r1, [r2, #0]
 80096f6:	e7d7      	b.n	80096a8 <_free_r+0x28>
 80096f8:	d902      	bls.n	8009700 <_free_r+0x80>
 80096fa:	230c      	movs	r3, #12
 80096fc:	6003      	str	r3, [r0, #0]
 80096fe:	e7d3      	b.n	80096a8 <_free_r+0x28>
 8009700:	6825      	ldr	r5, [r4, #0]
 8009702:	1961      	adds	r1, r4, r5
 8009704:	428b      	cmp	r3, r1
 8009706:	bf04      	itt	eq
 8009708:	6819      	ldreq	r1, [r3, #0]
 800970a:	685b      	ldreq	r3, [r3, #4]
 800970c:	6063      	str	r3, [r4, #4]
 800970e:	bf04      	itt	eq
 8009710:	1949      	addeq	r1, r1, r5
 8009712:	6021      	streq	r1, [r4, #0]
 8009714:	6054      	str	r4, [r2, #4]
 8009716:	e7c7      	b.n	80096a8 <_free_r+0x28>
 8009718:	b003      	add	sp, #12
 800971a:	bd30      	pop	{r4, r5, pc}
 800971c:	20004a78 	.word	0x20004a78

08009720 <_init>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr

0800972c <_fini>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	bf00      	nop
 8009730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009732:	bc08      	pop	{r3}
 8009734:	469e      	mov	lr, r3
 8009736:	4770      	bx	lr
